<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://Whw-colab.github.io</id>
    <title>潇潇先生个人博客</title>
    <subtitle></subtitle>
    <icon>http://whw-colab.github.io/images/favicon.ico</icon>
    <link href="http://Whw-colab.github.io" />
    <author>
      <name>潇潇先生</name>
    </author>
    <updated>2025-04-17T04:12:57.000Z</updated>
    <entry>
        <id>http://whw-colab.github.io/2025/04/17/CTF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
        <title>CTF学习笔记</title>
        <link rel="alternate" href="http://whw-colab.github.io/2025/04/17/CTF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;h1 id=&#34;ctf学习笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf学习笔记&#34;&gt;❡&lt;/a&gt; CTF 学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;ctf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf&#34;&gt;❡&lt;/a&gt; CTF&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义&#34;&gt;❡&lt;/a&gt; 定义&lt;/h3&gt;
&lt;p&gt;CTF 就像一场 “黑客版的寻宝游戏”，参赛者通过破解密码、挖漏洞、逆向程序等技术手段，在虚拟世界里找到隐藏的 “flag”（一串特定字符），谁找得快、技术强谁就赢。&lt;/p&gt;
&lt;h3 id=&#34;竞赛模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#竞赛模式&#34;&gt;❡&lt;/a&gt; 竞赛模式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;解题模式（Jeopardy）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 核心机制 *&lt;/strong&gt;&lt;/em&gt;：通过解决安全技术题目获取 flag，按题目分值和解题时间排名，常见于线上选拔赛。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 动态积分规则 *&lt;/strong&gt;&lt;/em&gt;：题目初始分值随解题人数增加而递减，前三名（一血、二血、三血）获得额外奖励分。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 题型分类 *&lt;/strong&gt;&lt;/em&gt;：Web 渗透、逆向工程、密码学、安全杂项（MISC）、二进制漏洞（PWN）等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;玩法&lt;/strong&gt;：像&lt;mark&gt;做试卷&lt;/mark&gt;，题目分类型（如密码破译、逆向工程、Web 漏洞等），解出题目后提交隐藏的 flag 就能得分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题目难度越高分越多，但解题人数越多分越少（动态积分）。&lt;/li&gt;
&lt;li&gt;适合线上赛，比如预选赛，团队可自由组队，拼脑力和技术积累。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：给你一个网站，找 SQL 注入漏洞拿 flag，类似 “黑客版奥数题”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;攻防模式（Attack-Defense） （&lt;mark&gt;黑客版真人 CS**&lt;/mark&gt;）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 核心机制 *&lt;/strong&gt;&lt;/em&gt;：各队伍拥有相同漏洞的服务器（GameBox），攻击对手服务得分，修补自身漏洞防御扣分，实时对抗性强。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 计分规则 *&lt;/strong&gt;&lt;/em&gt;：每轮得分取决于攻击成功次数和防御状态，服务宕机将扣分。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 特点 *&lt;/strong&gt;&lt;/em&gt;：高强度持续 24-48 小时，考验团队协作和体力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ADP 攻防增强模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一句话总结就是 ==&lt;strong&gt;“黑客版的一题两吃”&lt;/strong&gt;==：每个题目只需完成一次攻击（拿 flag）和一次防御（修漏洞），做完就扔，不用反复折腾。&lt;/p&gt;
&lt;h3 id=&#34;举个栗子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#举个栗子&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;举个栗子🌰：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	假设题目是一个&lt;strong&gt;带漏洞的网站&lt;/strong&gt;，ADP 模式下你要做两件事：&lt;/p&gt;
&lt;p&gt;​		1️⃣ &lt;strong&gt;攻击&lt;/strong&gt;：找到漏洞（比如 SQL 注入），拿到 flag 提交得分（类似解题模式）。&lt;/p&gt;
&lt;p&gt;​		2️⃣ &lt;strong&gt;防御&lt;/strong&gt;：给漏洞打补丁（比如过滤 SQL 语句），上传补丁到平台验证，确认修好后得分。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;这题就算完事了！&lt;/strong&gt; 之后不用再管它，专心搞其他题目就行。&lt;/p&gt;
&lt;h3 id=&#34;和传统攻防awd的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和传统攻防awd的区别&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;和传统攻防（AwD）的区别&lt;/strong&gt;：&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;对比项&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;传统攻防（AwD）&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;ADP 攻防增强&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;攻击方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;全程用脚本批量攻击对手，抢 flag 刷分&lt;/td&gt;
&lt;td&gt;每个题只需攻击一次，提交 flag 就停手&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;防御方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;边修漏洞边防对手攻击，服务崩了会疯狂扣分&lt;/td&gt;
&lt;td&gt;修好漏洞并验证通过后，这题永远不扣分了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;选手压力&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;熬夜修漏洞 + 写攻击脚本，像打仗一样累&lt;/td&gt;
&lt;td&gt;像做作业，一题两步骤，做完就躺平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主办方压力&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;要维护几十台服务器，防止被选手打崩&lt;/td&gt;
&lt;td&gt;题目环境用完就删，省电省服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;adp的核心优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adp的核心优势&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;ADP 的核心优势&lt;/strong&gt;：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;选手省力&lt;/strong&gt;：不用写自动化脚本，不用盯着服务是否崩溃，专注解题和修漏洞本身。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主办方省钱&lt;/strong&gt;：题目环境用完就销毁，不用扛住几百个队伍的持续攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;题目灵活&lt;/strong&gt;：比赛过程中可以随时换题（比如旧题下线，新题上线），增加新鲜感。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;适合谁玩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#适合谁玩&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;适合谁玩？&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;新手友好&lt;/strong&gt;：适合刚接触攻防模式的小白，&lt;mark&gt;不用学写攻击脚本&lt;/mark&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中小型比赛&lt;/strong&gt;：比如企业内训、高校校赛，运维成本低。&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;&lt;strong&gt;专精 Web/PWN 的选手&lt;/strong&gt;&lt;/mark&gt;：ADP 通常只出这两种题型，其他方向（如逆向、密码学）不参与。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;mark&gt;ADP 就是 **“简化版攻防”**，把持续对抗拆成单次任务，让选手和主办方都轻松点～&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;混合模式（Mix） （&lt;mark&gt;&lt;strong&gt;解题 + 攻防二合一&lt;/strong&gt;&lt;/mark&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 机制 *&lt;/strong&gt;&lt;/em&gt;：结合解题与攻防，解题获取基础分后进入攻防对抗，分数动态增减。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 典型赛事 *&lt;/strong&gt;&lt;/em&gt;：iCTF 国际赛、RealWorld CTF（RWCTF）。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;其他衍生模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	&lt;em&gt;&lt;strong&gt;*KoH（抢占山头）*&lt;/strong&gt;&lt;/em&gt;：攻击并控制中央服务器，写入队伍标识后防御加固，定期判定得分。&lt;/p&gt;
&lt;p&gt;​	&lt;mark&gt;&lt;strong&gt;RW（真实世界）&lt;/strong&gt;&lt;/mark&gt;：模拟真实漏洞利用，比如攻击物联网设备。&lt;/p&gt;
&lt;p&gt;​	&lt;em&gt;&lt;strong&gt;* 战争分享模式 *&lt;/strong&gt;&lt;/em&gt;：队伍互相出题 + 解题 + 分享思路，综合评分。&lt;/p&gt;
&lt;p&gt;​	&lt;em&gt;&lt;strong&gt;*AI 自动化（RHG）*&lt;/strong&gt;&lt;/em&gt;：编写自动化程序（bot）全自动挖掘漏洞并提交 flag。&lt;/p&gt;
&lt;h3 id=&#34;ctf主要题型及考察重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf主要题型及考察重点&#34;&gt;❡&lt;/a&gt; CTF 主要题型及考察重点&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼0–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;ctf学习路线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf学习路线&#34;&gt;❡&lt;/a&gt; CTF 学习路线&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初期基础&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;*Web 开发 *&lt;/strong&gt;&lt;/em&gt;：HTML/CSS/JS、PHP+MySQL 开发动态网站，掌握基础漏洞原理（如 SQL 注入）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 工具入门 *&lt;/strong&gt;&lt;/em&gt;：Burp Suite 抓包改包、Python 脚本编写（requests 库）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中期漏洞专项&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 核心漏洞 *&lt;/strong&gt;&lt;/em&gt;：SQL 注入、文件上传、命令执行（RCE）、XSS/CSRF。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 靶场练习 *&lt;/strong&gt;&lt;/em&gt;：sqli-labs、upload-labs、DVWA。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后期综合实战&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 赛事参与 *&lt;/strong&gt;&lt;/em&gt;：BUUCTF、CTFHub 等平台刷题，参与校赛 / XCTF 联赛。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 知识扩展 *&lt;/strong&gt;&lt;/em&gt;：逆向工程（《加密与解密》）、二进制漏洞（《IDA Pro 权威指南》）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;比赛形式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比赛形式&#34;&gt;❡&lt;/a&gt; 比赛形式&lt;/h3&gt;
&lt;p&gt;CTF 比赛一般分为线上赛和线下赛。通常来说，线上赛多为 &lt;code&gt;初赛&lt;/code&gt; ，线下赛多为 &lt;code&gt;决赛&lt;/code&gt; ，但是也不排除直接进行&lt;/p&gt;
&lt;h4 id=&#34;线上&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线上&#34;&gt;❡&lt;/a&gt; 线上&lt;/h4&gt;
&lt;p&gt;选手通过主办方搭建的比赛平台在线注册，在线做题并提交 flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出 == 提示 ( &lt;code&gt;Hint&lt;/code&gt; )== 来帮助选手做题。&lt;/p&gt;
&lt;h4 id=&#34;线下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线下&#34;&gt;❡&lt;/a&gt; 线下&lt;/h4&gt;
&lt;p&gt;选手前往比赛所在地，现场接入比赛网络进行比赛，&lt;mark&gt;线下多为 AWD 模式&lt;/mark&gt;，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如&lt;mark&gt;结合&lt;strong&gt;解题 + AWD&lt;/strong&gt; ，&lt;strong&gt;解题 + RW&lt;/strong&gt;&lt;/mark&gt; 等等&lt;/p&gt;
&lt;h3 id=&#34;题目类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目类型&#34;&gt;❡&lt;/a&gt; 题目类型&lt;/h3&gt;
&lt;p&gt;​	在 CTF 中主要包含以下 5 个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如 == &lt;code&gt;移动设备(Mobile)&lt;/code&gt; ,  &lt;code&gt;电子取证(Forensics)&lt;/code&gt; == 等，近年来也会出来混合类型的题目，例如在 Web 中存在一个二进制程序，需要选手先利用 Web 的漏洞获取到二进制程序，之后通过逆向或是 Pwn 等方式获得最终 flag&lt;/p&gt;
&lt;h4 id=&#34;web&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web&#34;&gt;❡&lt;/a&gt; Web&lt;/h4&gt;
&lt;p&gt;​	Web 类题目大部分情况下和网、Web、HTTP 等相关技能有关。主要考察选手对于 Web 攻防的一些知识技巧。诸如 == &lt;code&gt;SQL注入&lt;/code&gt; 、 &lt;code&gt;XSS&lt;/code&gt; 、 &lt;code&gt;代码执行&lt;/code&gt; 、 &lt;code&gt;代码审计&lt;/code&gt;  == 等等都是很常见的考点。一般情况下 Web 题目只会给出一个能够访问的 URL。部分题目会给出附件&lt;/p&gt;
&lt;h4 id=&#34;pwn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn&#34;&gt;❡&lt;/a&gt; Pwn&lt;/h4&gt;
&lt;p&gt;​	Pwn 类题目重点考察选手对于 == &lt;code&gt;二进制漏洞的挖掘和利用&lt;/code&gt; &lt;mark&gt;能力，其考点也通常在&lt;/mark&gt; &lt;code&gt;堆栈溢出&lt;/code&gt; 、 &lt;code&gt;格式化漏洞&lt;/code&gt; 、 &lt;code&gt;UAF&lt;/code&gt; 、 &lt;code&gt;Double Free&lt;/code&gt; == 等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本 ( &lt;code&gt;Exploit&lt;/code&gt; )，进而对主办方给出的远程服务器进行攻击并获取 flag 通常来说 Pwn 类题目给出的远程服务器信息为 &lt;code&gt;nc IP_ADDRESS PORT&lt;/code&gt; ，例如 &lt;code&gt;nc 1.2.3.4 4567&lt;/code&gt;  这种形式，表示在 &lt;code&gt;1.2.3.4&lt;/code&gt;  这个 IP 的 &lt;code&gt;4567&lt;/code&gt;  端口上运行了该题目&lt;/p&gt;
&lt;h4 id=&#34;reverse&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reverse&#34;&gt;❡&lt;/a&gt; Reverse&lt;/h4&gt;
&lt;p&gt;Re 类题目考察选手 &lt;code&gt;逆向工程&lt;/code&gt; 能力。题目会给出一个&lt;mark&gt;可执行二进制文件&lt;/mark&gt;，有些时候也可能是 Android 的 APK 安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得 flag&lt;/p&gt;
&lt;h4 id=&#34;crypto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crypto&#34;&gt;❡&lt;/a&gt; Crypto&lt;/h4&gt;
&lt;p&gt;​	Crypto 类题目考察选手对 &lt;code&gt;密码学&lt;/code&gt; 相关知识的了解程度，诸如 &lt;code&gt;RSA&lt;/code&gt; 、 &lt;code&gt;AES&lt;/code&gt; 、 &lt;code&gt;DES&lt;/code&gt;  等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。&lt;/p&gt;
&lt;h4 id=&#34;misc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#misc&#34;&gt;❡&lt;/a&gt; Misc&lt;/h4&gt;
&lt;p&gt;​	Misc 意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出 flag。&lt;/p&gt;
&lt;p&gt;​	常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT 相关等等。五花八门，种类繁多。&lt;/p&gt;
&lt;h2 id=&#34;刷题网站&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#刷题网站&#34;&gt;❡&lt;/a&gt; 刷题网站&lt;/h2&gt;
&lt;h3 id=&#34;ctfhub&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctfhub&#34;&gt;❡&lt;/a&gt; CTFHub&lt;/h3&gt;
&lt;h4 id=&#34;misc-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#misc-2&#34;&gt;❡&lt;/a&gt; Misc&lt;/h4&gt;
&lt;h5 id=&#34;流量分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流量分析&#34;&gt;❡&lt;/a&gt; 流量分析&lt;/h5&gt;
&lt;h6 id=&#34;数据库流量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库流量&#34;&gt;❡&lt;/a&gt; 数据库流量&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&#34;mysql流量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql流量&#34;&gt;❡&lt;/a&gt; Mysql 流量&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务端回一个 Response OK , 至此，登录验证就算是完成啦～&lt;/p&gt;
&lt;p&gt;后面客户端向服务端发起查询请求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;==select @@version_comment limit 1==
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意得选择&lt;mark&gt;分组字节流&lt;/mark&gt;才行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&#34;redis流量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis流量&#34;&gt;❡&lt;/a&gt; Redis 流量&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;mongodb流量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mongodb流量&#34;&gt;❡&lt;/a&gt; MongoDB 流量&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：搜索时要这样才行 ==ctfhub {== 不然找不到。&lt;/p&gt;
&lt;h6 id=&#34;协议流量分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协议流量分析&#34;&gt;❡&lt;/a&gt; 协议流量分析&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;ICMP-data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：tshark - r 「xxx」 -Y 「相关筛选命令」 -T fields -e data &amp;gt; xxx&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;关键参数&lt;/mark&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-Y 「icmp &amp;amp;&amp;amp; icmp.type==8」：过滤 ICMP 类型为 8（Echo Request）的包 。
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;这边等于 0 和 8 都可以，8 代表请求包，0 代表应答包&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-T fields -e data：仅输出 data 字段的十六进制内容 。&lt;/li&gt;
&lt;li&gt;flag.txt：将结果重定向到文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见 CTF 题型分析&lt;br /&gt;
单向传输（Type 8）：&lt;br /&gt;
Flag 数据通过客户端发送的多个请求包传输（如每个包携带一个字符）。&lt;/p&gt;
&lt;p&gt;​		解法：过滤 Type 8 并提取 data。&lt;br /&gt;
​	双向传输（Type 8 + Type 0）：&lt;br /&gt;
​		Flag 可能分散在请求和响应包中（需同时分析两者）。&lt;/p&gt;
&lt;p&gt;​		解法：过滤 icmp（不限制 Type），再根据包方向（ip.src/ip.dst）分类处理。&lt;/p&gt;
&lt;p&gt;​	隐蔽回传（Type 0）：&lt;br /&gt;
​		恶意程序通过响应包将敏感数据回传给攻击者（如数据外泄）。&lt;/p&gt;
&lt;p&gt;​		解法：过滤 Type 0 并提取 data。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type 8 vs Type 0&lt;/strong&gt;：取决于 Flag 数据的&lt;strong&gt;传输方向&lt;/strong&gt;（谁发送的包）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CTF 经验法则&lt;/strong&gt;： 如果题目提示 “客户端发送了异常 Ping 包”，优先用 &lt;code&gt;Type 8&lt;/code&gt; ；若提示 “服务器返回了异常应答”，则用 &lt;code&gt;Type 0&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼1–&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ICMP-Length&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼2–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;彩蛋&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#彩蛋&#34;&gt;❡&lt;/a&gt; 彩蛋&lt;/h4&gt;
&lt;h5 id=&#34;首页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#首页&#34;&gt;❡&lt;/a&gt; 首页&lt;/h5&gt;
&lt;p&gt;在 FuzzDomain 工具中，{fuzz}.ctfhub.com 的设计核心是自动化生成测试目标。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态占位符作用
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;{fuzz} 是一个动态替换标记，相当于批量操作的 &amp;quot;通配符&amp;quot;&lt;/mark&gt;。工具会从您指定的字典文件（图中路径 Dicwww.txt）中逐行读取内容，将每一行文字替换到 {fuzz} 的位置，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS13d3ctZW84ZXExOWFueTJhLmN0Zmh1Yi5jb20=&#34;&gt;生成如 www.ctfhub.com&lt;/span&gt;、api.ctfhub.com 等完整域名进行探测。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全测试实战场景
&lt;ul&gt;
&lt;li&gt;这种设计特别适用于 CTF 竞赛 / 渗透测试中：假设攻击者想找出目标网站（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1jdGZodWItaGg0ay5jb20=&#34;&gt;如 ctfhub.com&lt;/span&gt;）隐藏的子域名，但无法穷举所有可能性。通过加载包含常见子域名字段的字典（如 admin、test、dev 等），工具可自动化生成并验证数千种组合，快速定位有效域名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扩展性设计
&lt;ul&gt;
&lt;li&gt;界面下方的字符规则 pqrstuvwxyz0123456789 Min 1 Max 3 表明：除了使用预设字典，工具还支持按字符规则自动生成测试内容。例如当勾选该规则时，会自动生成 1-3 位包含指定字符的随机组合（如 p1、2qr 等），与 {fuzz} 配合实现双重探测策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种 {占位符}+ 字典 / 规则的组合方式，在保证测试覆盖率的同时大幅提升效率，是网络安全工具中常见的设计范式&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼3–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;彩蛋-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#彩蛋-2&#34;&gt;❡&lt;/a&gt; 彩蛋&lt;/h5&gt;
&lt;h5 id=&#34;题目入口该题需要之前的题目提交flag后不关闭环境但是我这边提交后自动关闭环境没有办法实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目入口该题需要之前的题目提交flag后不关闭环境但是我这边提交后自动关闭环境没有办法实现&#34;&gt;❡&lt;/a&gt; 题目入口（该题需要之前的题目提交 flag 后不关闭环境，但是我这边提交后自动关闭环境没有办法实现）&lt;/h5&gt;
&lt;h5 id=&#34;writeup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#writeup&#34;&gt;❡&lt;/a&gt; WriteUp&lt;/h5&gt;
&lt;h5 id=&#34;工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具&#34;&gt;❡&lt;/a&gt; 工具&lt;/h5&gt;
&lt;p&gt;在 CTFHub 工具 页面翻到最后发现 egg&lt;/p&gt;
&lt;h5 id=&#34;赛事&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#赛事&#34;&gt;❡&lt;/a&gt; 赛事&lt;/h5&gt;
&lt;h5 id=&#34;真题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#真题&#34;&gt;❡&lt;/a&gt; 真题&lt;/h5&gt;
&lt;h5 id=&#34;投稿提交&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#投稿提交&#34;&gt;❡&lt;/a&gt; 投稿提交&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2d1eW91bmcvQ2FwdGZFbmNvZGVyJUU2JTg4JTk2JUU4JTgwJTg1JUU0JUJEJUJGJUU3JTk0JUE4JUU5JTlBJThGJUU2JUIzJUEyJUU5JTgwJTkwJUU2JUI1JTgxJUU1JThEJUIzJUU1JThGJUFG&#34;&gt;https://github.com/guyoung/CaptfEncoder 或者使用随波逐流即可&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;flag[36:42]：a5f3a8&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93cml0ZXVwLmN0Zmh1Yi5jb20vT3RoZXIvJUU2JThBJTk1JUU3JUE4JUJGJUU4JUFGJUI0JUU2JTk4JThFL2VhZWQzYWJkLmh0bWw=&#34;&gt;https://writeup.ctfhub.com/Other/ 投稿说明 /eaed3abd.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;AES 解密&lt;/mark&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rvb2wuY2hhY3VvLm5ldC9jcnlwdGFlcw==&#34;&gt;http://tool.chacuo.net/cryptaes&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;web-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-2&#34;&gt;❡&lt;/a&gt; Web&lt;/h4&gt;
&lt;h5 id=&#34;目录遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录遍历&#34;&gt;❡&lt;/a&gt; 目录遍历&lt;/h5&gt;
&lt;p&gt;​	&lt;strong&gt;知识点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		目录遍历是 web 中常见的基础操作，我们通常会通过目录的遍历来发现是否存在对我们有用的信息。&lt;/p&gt;
&lt;h5 id=&#34;phpinfo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpinfo&#34;&gt;❡&lt;/a&gt; PHPINFO&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;​	PHPinfo：输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP 环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和 PHP 授权信息 (License)。&lt;/li&gt;
&lt;li&gt;​	phpinfo () 同时是个很有价值的、包含所有 EGPCS (Environment, GET, POST, Cookie, Server) 数据的调试工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;备份文件下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#备份文件下载&#34;&gt;❡&lt;/a&gt; 备份文件下载&lt;/h5&gt;
&lt;h6 id=&#34;网站源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网站源码&#34;&gt;❡&lt;/a&gt; 网站源码&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;知识点&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;常见的网站源码的文件名有：『web』, 『website』, 『backup』, 『back』, 『www』, 『wwwroot』, &#39;temp’等等。&lt;/li&gt;
&lt;li&gt;常见的网站源码备份文件后缀有：『tar』, 『tar.gz』, 『zip』, &#39;rar’等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;先使用 /www.zip 等给的不同来试，发现只有 /www.zip 有东西，而且直接打开还没有信息，只能网站打开才行&lt;/mark&gt;。&lt;/p&gt;
&lt;h6 id=&#34;bak文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bak文件&#34;&gt;❡&lt;/a&gt; bak 文件&lt;/h6&gt;
&lt;p&gt;bak 文件泄露&lt;/p&gt;
&lt;p&gt;​	有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为 xxx.bak。而&lt;mark&gt;大部分 Web Server 对 bak 文件并不做任何处理，导致可以直接下载，从而获取到网站某个文件的源代码&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;得加入 /index.php.bak 尤其是最后面的.bak 才行&lt;/mark&gt;&lt;/p&gt;
&lt;h6 id=&#34;vim缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vim缓存&#34;&gt;❡&lt;/a&gt; vim 缓存&lt;/h6&gt;
&lt;p&gt;​	vim 交换文件名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在使用 vim 时会创建临时缓存文件，关闭 vim 时缓存文件则会被删除，当 vim 异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容&lt;/li&gt;
&lt;li&gt;以 index.php 为例：
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;第一次产生的交换文件名为 .index.php.swp&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再次意外退出后，将会产生名为 &lt;mark&gt;.index.php.swo&lt;/mark&gt; 的交换文件&lt;/li&gt;
&lt;li&gt;第三次产生的交换文件则为 &lt;mark&gt;.index.php.swn&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;vim 一旦异常退出就会生成 swp 文件，且是隐藏文件&lt;/mark&gt;。隐藏文件要加点，首页也说了 flag 在 index.php 源码中 所以 &lt;mark&gt;/.index.php.swp&lt;/mark&gt; 直接下载。&lt;/p&gt;
&lt;h6 id=&#34;ds_store&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ds_store&#34;&gt;❡&lt;/a&gt; .DS_Store&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt;.DS_Store 是 Mac 下 Finder 用来保存如何展示文件 / 文件夹的数据文件，每个文件夹下对应一个&lt;/mark&gt;。&lt;/li&gt;
&lt;li&gt;如果开发 / 设计人员将.DS_Store 上传部署到线上环境，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。&lt;/li&gt;
&lt;li&gt;在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;mark&gt;下载后打开之后得用 linux 中的 cat 查看并且再用 URL 接着执行查看即可&lt;/mark&gt;。&lt;/p&gt;
&lt;h5 id=&#34;git泄露&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git泄露&#34;&gt;❡&lt;/a&gt; Git 泄露&lt;/h5&gt;
&lt;h3 id=&#34;buuctf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#buuctf&#34;&gt;❡&lt;/a&gt; BUUCTF&lt;/h3&gt;
&lt;h4 id=&#34;web-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-3&#34;&gt;❡&lt;/a&gt; Web&lt;/h4&gt;
&lt;h5 id=&#34;极客大挑战-2019easysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#极客大挑战-2019easysql&#34;&gt;❡&lt;/a&gt; [极客大挑战 2019] EasySQL&lt;/h5&gt;
&lt;h6 id=&#34;思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思路&#34;&gt;❡&lt;/a&gt; 思路&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;找输入点、试闭合符、构造万能密码&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;万能密码构造公式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼4–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进阶操作&lt;/strong&gt; 若过滤了空格用 &lt;code&gt;/**/&lt;/code&gt;  代替，过滤 &lt;code&gt;or&lt;/code&gt;  用 &lt;code&gt;||&lt;/code&gt;  连接符等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工具使用&lt;/strong&gt; HackBar 直接修改 URL 参数发送请求（GET 传参用 &lt;code&gt;%23&lt;/code&gt;  代替 &lt;code&gt;#&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;crypto-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crypto-2&#34;&gt;❡&lt;/a&gt; Crypto&lt;/h4&gt;
&lt;h5 id=&#34;一眼就解密&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一眼就解密&#34;&gt;❡&lt;/a&gt; 一眼就解密&lt;/h5&gt;
&lt;h5 id=&#34;md5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#md5&#34;&gt;❡&lt;/a&gt; MD5&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY21kNS5jb20v&#34;&gt;md5 在线解密破解，md5 解密加密&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;url编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url编码&#34;&gt;❡&lt;/a&gt; Url 编码&lt;/h5&gt;
&lt;h5 id=&#34;看我回旋踢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#看我回旋踢&#34;&gt;❡&lt;/a&gt; 看我回旋踢&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;synt=flag&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;摩丝&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#摩丝&#34;&gt;❡&lt;/a&gt; 摩丝&lt;/h5&gt;
&lt;h5 id=&#34;password一开始有点懵算是一种iq题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#password一开始有点懵算是一种iq题&#34;&gt;❡&lt;/a&gt; password（一开始有点懵，算是一种 iq 题）&lt;/h5&gt;
&lt;p&gt;判断出是 10 个数，数字占 8 个，那么就从姓名缩写来看了&lt;/p&gt;
&lt;h5 id=&#34;变异凯撒&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变异凯撒&#34;&gt;❡&lt;/a&gt; 变异凯撒&lt;/h5&gt;
&lt;p&gt;​	上面的 acsii 码值对比表可以看到 == 第一个字符向后移了 5,== 第二个向后移了 6, 第三个向后移了 7, 以此类推，很容易想到变异凯撒即每个向后移的位数是前一个加 1&lt;/p&gt;
&lt;h5 id=&#34;quoted-printable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quoted-printable&#34;&gt;❡&lt;/a&gt; Quoted-printable&lt;/h5&gt;
&lt;p&gt;​	&lt;mark&gt;Quoted-printable 将任何 8-bit 字节值可编码为 3 个字符：一个等号 &amp;quot;=&amp;quot; 后跟随两个十六进制数字 (0–9 或 A–F) 表示该字节的数值。&lt;/mark&gt;&lt;br /&gt;
​	例如，ASCII 码换页符（十进制值为 12）可以表示为 &amp;quot;=0C&amp;quot;， 等号 &amp;quot;=&amp;quot;（十进制值为 61）必须表示为 &amp;quot;=3D&amp;quot;，gb2312 下 “中” 表示为 = D6=D0。除了可打印 ASCII 字符与换行符以外，所有字符必须表示为这种格式。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01pa2VDb2tlL2FydGljbGUvZGV0YWlscy8xMDU4NzczNzM=&#34;&gt;https://blog.csdn.net/MikeCoke/article/details/105877373&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;篱笆墙的影子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#篱笆墙的影子&#34;&gt;❡&lt;/a&gt; 篱笆墙的影子&lt;/h5&gt;
&lt;h5 id=&#34;rabbit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rabbit&#34;&gt;❡&lt;/a&gt; Rabbit&lt;/h5&gt;
&lt;h5 id=&#34;rsa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rsa&#34;&gt;❡&lt;/a&gt; RSA&lt;/h5&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼5–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;丢失的md5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#丢失的md5&#34;&gt;❡&lt;/a&gt; 丢失的 MD5&lt;/h5&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼6–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;alice与bob&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#alice与bob&#34;&gt;❡&lt;/a&gt; Alice 与 Bob&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29scy5qYjUxLm5ldC9qaXN1YW5xaS9mYWN0b3JfY2FsYw==&#34;&gt;在线分解质因数计算器工具 - 在线计算器 - 脚本之家在线工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5oaWVuY29kZS5jb20vaGFzaC5odG1s&#34;&gt;CTF 在线工具 - 哈希计算 | MD5、SHA1、SHA256、SHA384、SHA512、RIPEMD、RIPEMD160&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;大帝的密码武器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大帝的密码武器&#34;&gt;❡&lt;/a&gt; 大帝的密码武器&lt;/h5&gt;
&lt;p&gt;密文发现 C 为大写字母，而 C 移 13 位应该是大写 P，替换后，得到最终 flag。&lt;/p&gt;
&lt;h5 id=&#34;rsarsa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rsarsa&#34;&gt;❡&lt;/a&gt; rsarsa&lt;/h5&gt;
&lt;p&gt;使用 RSA Tool2 工具解题&lt;/p&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼7–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;windows系统密码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows系统密码&#34;&gt;❡&lt;/a&gt; Windows 系统密码&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;两个都用 Md5 试一下。&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;信息化时代的步伐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息化时代的步伐&#34;&gt;❡&lt;/a&gt; 信息化时代的步伐&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;题目说结果为中文，结合 36（4x9）位的纯数字密文，猜测为中文电码解密。&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvZGlhbmJhby5waHA=&#34;&gt;电报码在线翻译（国际摩尔斯电码及中文电码） - 千千秀字&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;凯撒替换呵呵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#凯撒替换呵呵&#34;&gt;❡&lt;/a&gt; 凯撒？替换？呵呵！&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9xdWlwcWl1cC5jb20v&#34;&gt;Quipqiup - Cryptoquip 和 Cryptogram 求解器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/fa5b30ef9a70de0a72aaf87bb44dc655.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/9a56f91a23107e16a1db6ddac5e7ea98.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;萌萌哒的八戒&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#萌萌哒的八戒&#34;&gt;❡&lt;/a&gt; 萌萌哒的八戒&lt;/h5&gt;
&lt;p&gt;binwalk 然后猪圈密码即可&lt;/p&gt;
&lt;h5 id=&#34;权限获得第一步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限获得第一步&#34;&gt;❡&lt;/a&gt; 权限获得第一步&lt;/h5&gt;
&lt;h4 id=&#34;misc-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#misc-3&#34;&gt;❡&lt;/a&gt; Misc&lt;/h4&gt;
&lt;h5 id=&#34;金三胖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#金三胖&#34;&gt;❡&lt;/a&gt; 金三胖&lt;/h5&gt;
&lt;p&gt;使用&lt;mark&gt;随波逐流、StegSolve-FrameBrower&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;你竟然赶我走&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#你竟然赶我走&#34;&gt;❡&lt;/a&gt; 你竟然赶我走&lt;/h5&gt;
&lt;p&gt;使用&lt;mark&gt; strings、随波逐流、010Editor&lt;/mark&gt; 方法&lt;/p&gt;
&lt;h5 id=&#34;二维码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维码&#34;&gt;❡&lt;/a&gt; 二维码&lt;/h5&gt;
&lt;p&gt;可以使用&lt;mark&gt; 010Editor 或者是 strings&lt;/mark&gt; 进行查看，发现里面还有文件，所以采用了修改后缀名为 zip 发现有密码，或者使用 Binwalk 进行也可以，然后使用 archar 或者 ziperllo 进行爆破，出来密码即可。&lt;/p&gt;
&lt;h5 id=&#34;大白&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大白&#34;&gt;❡&lt;/a&gt; 大白&lt;/h5&gt;
&lt;h6 id=&#34;python代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python代码&#34;&gt;❡&lt;/a&gt; python 代码&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼8–&amp;gt;&lt;/p&gt;
&lt;p&gt;使用随波逐流或者&lt;mark&gt; 010Editor&lt;/mark&gt; 进行修改宽高比&lt;/p&gt;
&lt;h5 id=&#34;wireshark&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wireshark&#34;&gt;❡&lt;/a&gt; wireshark&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;http &amp;amp;&amp;amp; http.request.method == 「POST」&lt;/mark&gt;&lt;/p&gt;
&lt;h6 id=&#34;分析图片信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分析图片信息&#34;&gt;❡&lt;/a&gt; 分析图片信息&lt;/h6&gt;
&lt;h5 id=&#34;乌镇峰会种图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#乌镇峰会种图&#34;&gt;❡&lt;/a&gt; 乌镇峰会种图&lt;/h5&gt;
&lt;p&gt;strings 就行&lt;/p&gt;
&lt;h5 id=&#34;n种方法解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#n种方法解决&#34;&gt;❡&lt;/a&gt; N 种方法解决&lt;/h5&gt;
&lt;p&gt;使用随波逐流工具&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90aGUteC5jbi9lbmNvZGluZ3MvQmFzZTY0LmFzcHg=&#34;&gt;https://the-x.cn/encodings/Base64.aspx&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;基础破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础破解&#34;&gt;❡&lt;/a&gt; 基础破解&lt;/h5&gt;
&lt;p&gt;使用 archpr 工具即可，选数字&lt;/p&gt;
&lt;h5 id=&#34;文件中的秘密&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件中的秘密&#34;&gt;❡&lt;/a&gt; 文件中的秘密&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1FWElGLWU3NmZ5MDlmLm9yZw==&#34;&gt;EXIF 信息.org&lt;/span&gt;&lt;/strong&gt;:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9leGlmaW5mby5vcmc=&#34;&gt;https://exifinfo.org&lt;/span&gt;](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9leGlmaW5mby5vcmcv&#34;&gt;https://exifinfo.org/&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;zip伪加密&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zip伪加密&#34;&gt;❡&lt;/a&gt; zip 伪加密&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼9–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;一找 PK 头，二看标志位，奇改偶，伪加密解除&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i-blog.csdnimg.cn/direct/e0d9c37ffa4443cb8126d505954f1545.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将 09 改为 00 即可&lt;/p&gt;
&lt;h5 id=&#34;被嗅探的流量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#被嗅探的流量&#34;&gt;❡&lt;/a&gt; 被嗅探的流量&lt;/h5&gt;
&lt;h5 id=&#34;lsb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lsb&#34;&gt;❡&lt;/a&gt; LSB&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;&lt;em&gt;先单蓝后双红绿，三通道组合最后试&lt;/em&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;em&gt;Alpha 通道碰不得，藏密必选 RGB&lt;/em&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;位平面选择原则三句黄金口诀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位平面选择原则三句黄金口诀&#34;&gt;❡&lt;/a&gt; 位平面选择原则（三句黄金口诀）&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;口诀①&lt;/strong&gt;：「LSB 隐写 0 位藏，9 成题目在此方」 &lt;strong&gt;口诀②&lt;/strong&gt;：「红绿蓝三原色，同步勾选效率强」 &lt;strong&gt;口诀③&lt;/strong&gt;：「高位平面先别慌，特殊变形才要防」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;为何只勾选 0 位？&lt;/strong&gt; LSB 隐写本质是将数据藏在像素值二进制的最低位（第 0 位），如同把字写在纸的最边缘。 &lt;em&gt;示例&lt;/em&gt;：像素值 &lt;code&gt;255&lt;/code&gt;  的二进制是 &lt;code&gt;11111111&lt;/code&gt; ，修改第 0 位后变为 &lt;code&gt;11111110&lt;/code&gt; （差值仅 1，肉眼不可见）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;什么情况要勾选 1/2 位？&lt;/strong&gt; 当题目明确提示 &amp;quot;高位隐写&amp;quot; 或常规 0 位无结果时（约占 CTF 题 10%），按以下优先级排查：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼10–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;rar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rar&#34;&gt;❡&lt;/a&gt; rar&lt;/h5&gt;
&lt;p&gt;使用 archpr 工具即可，选数字&lt;/p&gt;
&lt;h5 id=&#34;qr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#qr&#34;&gt;❡&lt;/a&gt; qr&lt;/h5&gt;
&lt;p&gt;使用 qr serach 工具扫一下即可&lt;/p&gt;
&lt;h5 id=&#34;镜子里面的世界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#镜子里面的世界&#34;&gt;❡&lt;/a&gt; 镜子里面的世界&lt;/h5&gt;
&lt;p&gt;使用 steg 里面的 dataexract 选择三个 0 即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CHelloCTF_OS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250414112403740.png&#34; alt=&#34;image-20250414112403740&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;爱因斯坦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爱因斯坦&#34;&gt;❡&lt;/a&gt; 爱因斯坦&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;binwalk -e 『/mnt/c/Users/HelloCTF_OS/Desktop/ 爱因斯坦 /misc2.jpg』&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼11–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;ningen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ningen&#34;&gt;❡&lt;/a&gt; ningen&lt;/h5&gt;
&lt;h6 id=&#34;安装binwalk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装binwalk&#34;&gt;❡&lt;/a&gt; 安装 Binwalk&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼12–&amp;gt;&lt;/p&gt;
&lt;p&gt;使用 BInwalk 提取，或者使用 010 删除前面保存 rar 然后密码破解即可&lt;/p&gt;
&lt;h5 id=&#34;小明的保险箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小明的保险箱&#34;&gt;❡&lt;/a&gt; 小明的保险箱&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;通过 ff d9 发现 rar&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;easycap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#easycap&#34;&gt;❡&lt;/a&gt; easycap&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;通过追踪流查看&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;隐藏的钥匙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏的钥匙&#34;&gt;❡&lt;/a&gt; 隐藏的钥匙&lt;/h5&gt;
&lt;p&gt;使用 strings 发现 flag 然后 Base64 解密即可&lt;/p&gt;
&lt;h5 id=&#34;另外一个世界&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#另外一个世界&#34;&gt;❡&lt;/a&gt; 另外一个世界&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmFwaWR0YWJsZXMub3JnL3poLUNOL2NvbnZlcnQvbnVtYmVyL2FzY2lpLWhleC1iaW4tZGVjLWNvbnZlcnRlci5odG1s&#34;&gt;ASCII 文本，十六进制，二进制，十进制，Base64 转换器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用二进制解密即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CHelloCTF_OS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250414114853391.png&#34; alt=&#34;image-20250414114853391&#34; /&gt;s&lt;/p&gt;
&lt;h5 id=&#34;数据包中的线索&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据包中的线索&#34;&gt;❡&lt;/a&gt; 数据包中的线索&lt;/h5&gt;
&lt;p&gt;通过追踪流发现有 = 号，判断可能是 base64, 但是过长考虑可能是图片转 base64 那么，需要通过网站并且添加头 ==“data:image/jpeg;base64,” 点击追加 img 标签 ==，&lt;/p&gt;
&lt;p&gt;图片在线转换 base64 编码 - 在线 base64 编码转换成图片工具 (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2pzb25zLmNu&#34;&gt;jsons.cn&lt;/span&gt;)](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5qc29ucy5jbi9pbWcyYmFzZTY0LyVFRiVCQyU4OQ==&#34;&gt;http://www.jsons.cn/img2base64/）&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;神秘龙卷风&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#神秘龙卷风&#34;&gt;❡&lt;/a&gt; 神秘龙卷风&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;BrainFuck 解密&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;flag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#flag&#34;&gt;❡&lt;/a&gt; FLAG&lt;/h5&gt;
&lt;p&gt;使用 stegsolve 进行 rgb 查看，然后保存 1.zip, 因为是&lt;mark&gt; pk 开头&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;假如给我三天光明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#假如给我三天光明&#34;&gt;❡&lt;/a&gt; 假如给我三天光明&lt;/h5&gt;
&lt;p&gt;&amp;lt;img src=「&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvMTI5NDU4OC8yMDE3MTIvMTI5NDU4OC0yMDE3MTIwOTAyMDQxMDcxOC0yMDk3MTczOTI4LnBuZw==&#34;&gt;https://images2017.cnblogs.com/blog/1294588/201712/1294588-20171209020410718-2097173928.png&lt;/span&gt;」 alt=「img」  /&amp;gt;&lt;/p&gt;
&lt;p&gt;得到解压密码是&lt;mark&gt; kmdonowg&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb3JzZWNvZGUud29ybGQvaW50ZXJuYXRpb25hbC9kZWNvZGVyL2F1ZGlvLWRlY29kZXItYWRhcHRpdmUuaHRtbA==&#34;&gt;Morse Code Audio Decoder&lt;/span&gt;&lt;/p&gt;
&lt;p wpei08732?23dz=&#34;&#34;&gt;解码得：CTFWPEI08732?23D 换成 flag 还要换小写 flag&lt;/p&gt;
&lt;h5 id=&#34;后门查杀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后门查杀&#34;&gt;❡&lt;/a&gt; 后门查杀&lt;/h5&gt;
&lt;p&gt;使用&lt;mark&gt; D 盾或者火绒安全&lt;/mark&gt;进行查找然后再找到对应的文件查看即可&lt;/p&gt;
&lt;h5 id=&#34;webshell后门少zp文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webshell后门少zp文件&#34;&gt;❡&lt;/a&gt; webshell 后门 (少 zp 文件)&lt;/h5&gt;
&lt;h5 id=&#34;来首歌吧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#来首歌吧&#34;&gt;❡&lt;/a&gt; 来首歌吧&lt;/h5&gt;
&lt;p&gt;使用在线工具进行解密&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MorseFM&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb3JzZWZtLmNvbS8=&#34;&gt;https://morsefm.com/&lt;/span&gt; （支持 WAV/MP3 等格式，支持多语言，适合快速解码）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Morse Code Magic&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb3JzZWNvZGVtYWdpYy5jb20vbW9yc2UtY29kZS1hdWRpby1kZWNvZGVyLw==&#34;&gt;https://morsecodemagic.com/morse-code-audio-decoder/&lt;/span&gt; （专注 WAV/MP3 解码，4 分钟音频 5 秒完成）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;面具下的flag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面具下的flag&#34;&gt;❡&lt;/a&gt; 面具下的 flag&lt;/h5&gt;
&lt;p&gt;可以先用 strings 提取，但是需要对比两个找不同，发现少两个 + 号再解析不然出错&lt;/p&gt;
&lt;h5 id=&#34;荷兰宽带数据泄露&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#荷兰宽带数据泄露&#34;&gt;❡&lt;/a&gt; 荷兰宽带数据泄露&lt;/h5&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmlyc29mdC5uZXQv&#34;&gt;NirSoft - freeware utilities: password recovery, system utilities, desktop utilities&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;搜索 username 或者 password，这可能是一个&lt;mark&gt;路由器配置文件 (bin)&lt;/mark&gt;，所以用到 RouterPassView 软件&lt;/p&gt;
&lt;h5 id=&#34;九连环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#九连环&#34;&gt;❡&lt;/a&gt; 九连环&lt;/h5&gt;
&lt;p&gt;通过随波逐流发现有伪加密，所以搜索 50 4B 01 02 修改&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;安装命令&lt;/mark&gt;：sudo apt update &amp;amp;&amp;amp; sudo apt install steghide&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;执行命令&lt;/mark&gt;:steghide extract -sf 『/mnt/c/Users/HelloCTF_OS/Desktop/389a0c11-d0df-4180-829a-b529e6b0a1bc/_123456cry.jpg.extracted/asd/good - 已合并.jpg』&lt;/p&gt;
&lt;h5 id=&#34;认真你就输了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认真你就输了&#34;&gt;❡&lt;/a&gt; 认真你就输了&lt;/h5&gt;
&lt;p&gt;随波逐流发现文件头是 zip 文件，要么修改文件要么 binwalk 就行&lt;/p&gt;
&lt;h5 id=&#34;被偷走的文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#被偷走的文件&#34;&gt;❡&lt;/a&gt; 被偷走的文件&lt;/h5&gt;
&lt;p&gt;pcap 文件用 wireshark 并且发现 ftp-data 有 rar 文件进行到处对象导出即可。&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;导出文件三种方法：&lt;/mark&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到处对象&lt;/li&gt;
&lt;li&gt;追踪流然后原始数据导出即可&lt;/li&gt;
&lt;li&gt;导出字节流&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;被劫持的神秘礼物&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#被劫持的神秘礼物&#34;&gt;❡&lt;/a&gt; 被劫持的神秘礼物&lt;/h5&gt;
&lt;p&gt;使用 wireshark 发现 ==(application/x-www-form-urlencoded)==，之后根据题意找到账号密码拼接，使用如下命令即可。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼13–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;藏藏藏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#藏藏藏&#34;&gt;❡&lt;/a&gt; 藏藏藏&lt;/h5&gt;
&lt;p&gt;打开 010 发现 pk 删除前面所有内容保存 zip 解压后扫码即可&lt;/p&gt;
&lt;h5 id=&#34;佛系青年&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#佛系青年&#34;&gt;❡&lt;/a&gt; 佛系青年&lt;/h5&gt;
&lt;p&gt;伪加密修改后查看 fo.txt 底下那句话使用随波逐流解密即可&lt;/p&gt;
&lt;h5 id=&#34;你猜我是个啥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#你猜我是个啥&#34;&gt;❡&lt;/a&gt; 你猜我是个啥&lt;/h5&gt;
&lt;p&gt;使用 strings 查看即可&lt;/p&gt;
&lt;h5 id=&#34;秘密文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#秘密文件&#34;&gt;❡&lt;/a&gt; 秘密文件&lt;/h5&gt;
&lt;p&gt;筛选后发现有&lt;mark&gt; ftp 优先查看&lt;/mark&gt;，发现里面有 rar 文件，还有一点其实随波逐流里面也可以直接查看并且通过分离破解即可获取 flag.&lt;/p&gt;
&lt;h5 id=&#34;刷新过的图片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#刷新过的图片&#34;&gt;❡&lt;/a&gt; 刷新过的图片&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼14–&amp;gt;&lt;/p&gt;
&lt;p&gt;题目说 “刷新过的图片”，结合键盘上刷新键为 F5 可判断此题为 F5 隐写，运用工具&lt;mark&gt; F5-steganography&lt;/mark&gt; 可以对其中的内容进行提取&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRjb2RlLmNvbS9naF9taXJyb3JzL2Y1L0Y1LXN0ZWdhbm9ncmFwaHk/dXRtX3NvdXJjZT1jc2RuX2dpdGh1Yl9hY2NlbGVyYXRvciZhbXA7aXNMb2dpbj0x&#34;&gt;项目首页 - F5-steganography:F5 steganography - GitCode&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;cd F5-steganography-master&lt;/p&gt;
&lt;p&gt;java Extract 『/mnt/c/Use&lt;br /&gt;
rs/HelloCTF_OS/Desktop/a05ed035-b476-49d6-9b32-462ff13c5944/Misc.jpg』&lt;/p&gt;
&lt;h5 id=&#34;鸡你太美&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#鸡你太美&#34;&gt;❡&lt;/a&gt; 鸡你太美&lt;/h5&gt;
&lt;p&gt;发现缺少 gif 头，&lt;mark&gt;47 49 46 38&lt;/mark&gt;.&lt;/p&gt;
&lt;h5 id=&#34;just_a_rar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#just_a_rar&#34;&gt;❡&lt;/a&gt; just_a_rar&lt;/h5&gt;
&lt;p&gt;破解密码然后查看 exif 信息即可&lt;/p&gt;
&lt;h5 id=&#34;snake原先的网站没有了所以解析不了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#snake原先的网站没有了所以解析不了&#34;&gt;❡&lt;/a&gt; snake (原先的网站没有了，所以解析不了)&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼15–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlcnBlbnQub25saW5lLWRvbWFpbi10b29scy5jb20v&#34;&gt;Serpent Encryption – Easily encrypt or decrypt strings or files&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pLWJsb2cuY3NkbmltZy5jbi9ibG9nX21pZ3JhdGUvNTkzYmU3NmQwMzhkZmVjZTBmY2VlMGVkMDUyMDU2MWEucG5n&#34;&gt;https://i-blog.csdnimg.cn/blog_migrate/593be76d038dfece0fcee0ed0520561a.png&lt;/span&gt;」 alt=「img」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;菜刀666&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#菜刀666&#34;&gt;❡&lt;/a&gt; 菜刀 666&lt;/h5&gt;
&lt;p&gt;菜刀使用 http.request.method&lt;mark&gt;POST，并且查看 z1 和 z2，发现 z2 有 FF D8 是 jpg 导入 010 发现密码&lt;/mark&gt;，然后解压即可&lt;/p&gt;
&lt;h5 id=&#34;一叶障目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一叶障目&#34;&gt;❡&lt;/a&gt; 一叶障目&lt;/h5&gt;
&lt;p&gt;可以使用之前的 Python 脚本或者随波逐流即可&lt;/p&gt;
&lt;h5 id=&#34;纳尼&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#纳尼&#34;&gt;❡&lt;/a&gt; 纳尼&lt;/h5&gt;
&lt;p&gt;如果 git 分帧查看不了，那么就用&lt;mark&gt; stegsolve 的 framebrower&lt;/mark&gt; 来查看即可。&lt;/p&gt;
&lt;h5 id=&#34;神奇的二维码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#神奇的二维码&#34;&gt;❡&lt;/a&gt; 神奇的二维码&lt;/h5&gt;
&lt;p&gt;Python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼16–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;粗线条是 &lt;code&gt;-&lt;/code&gt; , 细线条是 &lt;code&gt;.&lt;/code&gt; &lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;excel破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#excel破解&#34;&gt;❡&lt;/a&gt; excel 破解&lt;/h5&gt;
&lt;p&gt;使用 strings 或者随波逐流查看即可&lt;/p&gt;
&lt;h5 id=&#34;来题中等的吧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#来题中等的吧&#34;&gt;❡&lt;/a&gt; 来题中等的吧&lt;/h5&gt;
&lt;p&gt;粗细记录摩斯密码即可&lt;/p&gt;
&lt;h5 id=&#34;谁赢了比赛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#谁赢了比赛&#34;&gt;❡&lt;/a&gt; 谁赢了比赛？&lt;/h5&gt;
&lt;p&gt;使用 Binwalk 进行分离并且破解密码，之后使用 qcr 进行二维码解析&lt;/p&gt;
&lt;h5 id=&#34;actf新生赛2020outguess&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#actf新生赛2020outguess&#34;&gt;❡&lt;/a&gt; [ACTF 新生赛 2020] outguess&lt;/h5&gt;
&lt;p&gt;发现 exif 再通过社会主义解密，然后通过题目猜测发现是 outguess，通过一下密码解密&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼17–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;outguess -k 『abc』 -r 『/mnt/c/Users/HelloCTF_OS/Desktop/attachment/tmp/huhuhu/mmm.jpg』 『/mnt/c/Users/HelloCTF_OS/Desktop/attachment/tmp/huhuhu/flag.txt』&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;梅花香之苦寒来&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#梅花香之苦寒来&#34;&gt;❡&lt;/a&gt; 梅花香之苦寒来&lt;/h5&gt;
&lt;p&gt;使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1nbnVwbG90JmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==&#34;&gt; gnuplot&lt;/span&gt; 画图即可&lt;/p&gt;
&lt;p&gt;生成文本后使用 plot xxx.&lt;/p&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼18–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;wustctf2020find_me在线网站打不开&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wustctf2020find_me在线网站打不开&#34;&gt;❡&lt;/a&gt; [WUSTCTF2020] find_me（在线网站打不开）&lt;/h5&gt;
&lt;p&gt;使用 exiftool xxx，然后&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvd2VuYmVuamlhbWkucGhwP3M9bWFuZ3dlbg==&#34;&gt;盲文在线加解密：https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼19–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/4ff6c936f2b993b6adf9ed29d0f06748.png#pic_center&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;穿越时空的思念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#穿越时空的思念&#34;&gt;❡&lt;/a&gt; 穿越时空的思念&lt;/h5&gt;
&lt;p&gt;之前使用静音删除左声道，单声道导出右声道 wav 使用在线网站但是解析有些许错误，所以使用手动解析&lt;/p&gt;
&lt;h5 id=&#34;guet-ctf2019ko&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#guet-ctf2019ko&#34;&gt;❡&lt;/a&gt; [GUET-CTF2019]KO&lt;/h5&gt;
&lt;p&gt;使用 brainfuck 解密即可&lt;/p&gt;
&lt;h5 id=&#34;actf新生赛2020base64隐写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#actf新生赛2020base64隐写&#34;&gt;❡&lt;/a&gt; [ACTF 新生赛 2020] base64 隐写&lt;/h5&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼20–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;swpu2019我有一只马里奥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#swpu2019我有一只马里奥&#34;&gt;❡&lt;/a&gt; [SWPU2019] 我有一只马里奥&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/470b5a3cf4221c8ae78e537ab080d524.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/227814f4d8ae4900b77417b09ad5b617.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;notepad 1.txt:flag.txt&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;使用工具 NtfsStreamsEditor 或 AlternateStreamView 打开存放 1.txt 文件的文件夹，扫描出现隐藏文件文件，导出后打开，得到 flag。&lt;/p&gt;
&lt;p&gt;​		&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmlyc29mdC5uZXQvdXRpbHMvYWx0ZXJuYXRlX2RhdGFfc3RyZWFtcy5odG1sP3NwbT1hMmM2aC4xMjg3MzYzOS5hcnRpY2xlLWRldGFpbC42LjY5YWU0MjQ1UkIyQ2pL&#34;&gt;AlternateStreamView (跳转页面后，向下滑动，下载对应的 32 或 64 位软件)&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;mrctf2020ezmisc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mrctf2020ezmisc&#34;&gt;❡&lt;/a&gt; [MRCTF2020]ezmisc&lt;/h5&gt;
&lt;p&gt;修改宽高&lt;/p&gt;
&lt;h5 id=&#34;gxyctf2019gakki&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gxyctf2019gakki&#34;&gt;❡&lt;/a&gt; [GXYCTF2019]gakki&lt;/h5&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼21–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;hbnis218caesar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hbnis218caesar&#34;&gt;❡&lt;/a&gt; [HBNIS218]caesar&lt;/h5&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼22–&amp;gt;&lt;/p&gt;
&lt;p&gt;随波逐流&lt;/p&gt;
&lt;h5 id=&#34;suctf2018single-dog&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#suctf2018single-dog&#34;&gt;❡&lt;/a&gt; [SUCTF2018]single dog&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;aaencode 编码&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;黑客帝国&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#黑客帝国&#34;&gt;❡&lt;/a&gt; 黑客帝国&lt;/h5&gt;
&lt;p&gt;导入十六进制，然后发现打开不了，换成 jpg 头，也就是&lt;mark&gt; FF D8 4A46&lt;/mark&gt; 之前的删除掉&lt;/p&gt;
&lt;h5 id=&#34;hbnis2018低个头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hbnis2018低个头&#34;&gt;❡&lt;/a&gt; [HBNIS2018] 低个头&lt;/h5&gt;
&lt;p&gt;键盘按键&lt;/p&gt;
&lt;h5 id=&#34;swpu2019伟大的侦探&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#swpu2019伟大的侦探&#34;&gt;❡&lt;/a&gt; [SWPU2019] 伟大的侦探&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;使用 010 Editor 打开密码.txt 文件，选择编辑方式为 EBCDIC (B)，找到明文密码&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;之后对照跳舞的小人即可&lt;/p&gt;
&lt;p&gt;[BUUCTF &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzE0MDQxMjQ=&#34;&gt;SWPU2019] 伟大的侦探 1 - 阿里云开发者社区&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;mrctf2020你能看懂音符吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mrctf2020你能看懂音符吗&#34;&gt;❡&lt;/a&gt; [MRCTF2020] 你能看懂音符吗&lt;/h5&gt;
&lt;p&gt;修改 62 51 为 51 62 然后保存解压，之后发现 Binwalk 有文件，之后 document.xml 里查到音符，使用芊芊秀字（但是失效了）就可以了。&lt;/p&gt;
&lt;h5 id=&#34;我吃三明治&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#我吃三明治&#34;&gt;❡&lt;/a&gt; 我吃三明治&lt;/h5&gt;
&lt;p&gt;&lt;mark&gt;foremost -i /mnt/c/Users/HelloCTF_OS/Desktop/attachment/flag.jpg&lt;/mark&gt;, 发现有两张图片，但是打开还是之前的那张，通过题解发现 FF D8 是开头，FF D9 是结尾，在 FF D8 和 FF D9 之间有信息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CHelloCTF_OS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250414132629896.png&#34; alt=&#34;image-20250414132629896&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;actf新生赛2020ntfs数据流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#actf新生赛2020ntfs数据流&#34;&gt;❡&lt;/a&gt; [ACTF 新生赛 2020] NTFS 数据流&lt;/h5&gt;
&lt;p&gt;跟之前的一道题类似使用 alternatestreamview-x64 打开文件在导出即可。&lt;/p&gt;
&lt;h5 id=&#34;swpu2019你有没有好好看网课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#swpu2019你有没有好好看网课&#34;&gt;❡&lt;/a&gt; [SWPU2019] 你有没有好好看网课？&lt;/h5&gt;
&lt;p&gt;使用数字发现四位不够，一位位加到 6 位即可，&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250414133454939.png」 alt=「image-20250414133454939」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;使用 kinovea 软件，根据图片说的 5.20 和 7.11 其实是 5.67 左右在灯上出现内容&lt;/mark&gt;，然后第一处为敲击码&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5oaWVuY29kZS5jb20vdGFwY29kZS5odG1s&#34;&gt;CTF 在线工具 - 在线敲击码 | 敲击码编码 | 敲击码算法 | tap code&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;基于 5×5 方格波利比奥斯方阵来实现的，不同点是是用 K 字母被整合到 C 中，因此密文的特征为 1-5 的两位一组的数字，编码的范围是 A-Z 字母字符集，字母不区分大小写。&lt;br /&gt;
 &lt;code&gt;..... ../... ./... ./... ../&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解码方法&lt;/strong&gt;： 每组  &lt;code&gt;/&lt;/code&gt;  分隔的符号对应一个字母，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark&gt; &lt;code&gt;..... ..&lt;/code&gt;  → 第 5 行第 2 列 → &lt;strong&gt;W&lt;/strong&gt;&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;... .&lt;/code&gt;  → 第 3 行第 1 列 → &lt;strong&gt;L&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;完整密文  &lt;code&gt;WLLM&lt;/code&gt;  → 转为小写  &lt;code&gt;wllm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2023/png/8395640/1675319712830-f36e439d-6d04-46cb-8e6f-2b00729fdbd2.png#averageHue=%23e8e8e8&amp;amp;clientId=uf8fd4f20-b975-4&amp;amp;from=drop&amp;amp;id=uec020910&amp;amp;name=vta8io4tvs.png&amp;amp;originHeight=281&amp;amp;originWidth=331&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=13988&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u3aae15bd-604d-484b-ae31-ce85fd125dd&amp;amp;title=&#34; alt=&#34;vta8io4tvs.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250414230545542.png」 alt=「image-20250414230545542」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250414135800024.png」 alt=「image-20250414135800024」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;p&gt;也可以通过 52313132 来解码，就是数点即可。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250414230944212.png」 alt=「image-20250414230944212」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;然后根据 7.37 时候发现编码&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CHelloCTF_OS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250414230821026.png&#34; alt=&#34;image-20250414230821026&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250414231107859.png」 alt=「image-20250414231107859」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;p&gt;之后拼接起来两个解码信息进行解压，然后使用 strings 或者随波逐流即可查看信息.&lt;/p&gt;
&lt;p&gt;扩展知识：&lt;/p&gt;
&lt;p&gt;​	查询多个信息&lt;/p&gt;
&lt;p&gt;​		逻辑或&lt;/p&gt;
&lt;p&gt;​	 		strings xxx | grep -iE 「flag|ctf」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; ：忽略大小写&lt;/li&gt;
&lt;li&gt;&lt;mark&gt; &lt;code&gt;-E&lt;/code&gt; ：启用扩展正则表达式，允许使用  &lt;code&gt;|&lt;/code&gt;  符号分隔多个模式&lt;/mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		逻辑与&lt;/p&gt;
&lt;p&gt;​			strings xxx | grep -i 「flag」 | grep -i 「ctf」&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;查找并显示头尾匹配结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼23–&amp;gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;结合十六进制查看工具&lt;/strong&gt; 如果需要分析二进制文件的特定偏移：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼24–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;xxd：生成十六进制和 ASCII 表示&lt;/mark&gt;&lt;br /&gt;
&lt;mark&gt; hexdump -C：经典格式的十六进制转储&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;sqltest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqltest&#34;&gt;❡&lt;/a&gt; sqltest&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼25–&amp;gt;&lt;/p&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼26–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;utctf2020docx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#utctf2020docx&#34;&gt;❡&lt;/a&gt; [UTCTF2020]docx&lt;/h5&gt;
&lt;p&gt;进行 Binwalk 然后再 media 一张张图 png 查看信息&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250415005201083.png」 alt=「image-20250415005201083」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;john-in-the-middle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#john-in-the-middle&#34;&gt;❡&lt;/a&gt; john-in-the-middle&lt;/h5&gt;
&lt;p&gt;先用导出对象发现很多图片，逐个使用 stegsolve 发现有信息&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250415010713381.png」 alt=「image-20250415010713381」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;p&gt;扩展知识：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;zsteg 功能&lt;/strong&gt;：&lt;mark&gt;支持 LSB 隐写&lt;/mark&gt;、zlib 压缩数据、OpenStego 等检测，常用于 CTF 比赛的图片隐写分析&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼27–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;actf新生赛2020swp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#actf新生赛2020swp&#34;&gt;❡&lt;/a&gt; [ACTF 新生赛 2020] swp&lt;/h5&gt;
&lt;p&gt;发现 zip 文件导出然后使用 strings 查看即可&lt;/p&gt;
&lt;h5 id=&#34;gxyctf2019sxmgdghpcybiyxnlpw&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gxyctf2019sxmgdghpcybiyxnlpw&#34;&gt;❡&lt;/a&gt; [GXYCTF2019]SXMgdGhpcyBiYXNlPw==&lt;/h5&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼28–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;间谍启示录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#间谍启示录&#34;&gt;❡&lt;/a&gt; 间谍启示录&lt;/h5&gt;
&lt;p&gt;使用 foremost 然后用 tree 发现文件，&lt;mark&gt;重要的是开启隐藏的文件&lt;/mark&gt;，机密文件查看即可。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250415014559922.png」 alt=「image-20250415014559922」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;小易的u盘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小易的u盘&#34;&gt;❡&lt;/a&gt; 小易的 U 盘&lt;/h5&gt;
&lt;p&gt;使用修改后缀名或者是 foremost 查看，然后根据 strings 或者使用 IDA 查看也行。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼29–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CHelloCTF_OS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250415015843942.png&#34; alt=&#34;image-20250415015843942&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=「C:\Users\HelloCTF_OS\AppData\Roaming\Typora\typora-user-images\image-20250415015624829.png」 alt=「image-20250415015624829」 style=「zoom:50%;」 /&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;喵喵喵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#喵喵喵&#34;&gt;❡&lt;/a&gt; 喵喵喵&lt;/h5&gt;
&lt;p&gt;使用 zsteg 查看然后使用 stegsolve 进行 lsb 隐写保存图片之后修改宽高，使用 QR 进行查看链接下载，&lt;mark&gt;注意的是得用 winrar 解压才行&lt;/mark&gt;，不然 NTFS 查看不到，然后使用 pyc 反编译，使用脚本。&lt;/p&gt;
&lt;p&gt;pyc 反编译：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90b29sLmx1L3B5Yy8=&#34;&gt;https://tool.lu/pyc/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;python 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼30–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;wustctf2020爬&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wustctf2020爬&#34;&gt;❡&lt;/a&gt; [WUSTCTF2020] 爬&lt;/h5&gt;
&lt;p&gt;使用 file 文件查看后缀名，然后转换 word 删除图片，&lt;mark&gt;使用十六进制转字符查看即可&lt;/mark&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9jb252ZXJ0L294MnN0ci8=&#34;&gt;https://www.bejson.com/convert/ox2str/&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="网络安全" scheme="http://whw-colab.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" />
        <category term="CTF学习" scheme="http://whw-colab.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/CTF%E5%AD%A6%E4%B9%A0/" />
        <updated>2025-04-17T04:12:57.000Z</updated>
    </entry>
    <entry>
        <id>http://whw-colab.github.io/2025/04/17/CSharp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
        <title>C#学习笔记</title>
        <link rel="alternate" href="http://whw-colab.github.io/2025/04/17/CSharp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;h1 id=&#34;语法篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法篇&#34;&gt;❡&lt;/a&gt; 语法篇&lt;/h1&gt;
&lt;h2 id=&#34;基础背景知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础背景知识&#34;&gt;❡&lt;/a&gt; 基础背景知识&lt;/h2&gt;
&lt;p&gt;c# 编写的应用程序必须放置于.NET 环境中才能正常允许。C# 代码最终会被编译为 **” 中间语言 “（MSIL）**。&lt;/p&gt;
&lt;p&gt;类库是以.dll 结尾，不能直接运行，而启动项目是以.exe 结尾可以直接运行。&lt;/p&gt;
&lt;p&gt;c++&lt;/p&gt;
&lt;p&gt;&amp;lt;br&amp;gt;using System;&lt;/p&gt;
&lt;p&gt;namespace MyApp&lt;br /&gt;
{&lt;br /&gt;
class Test1&lt;br /&gt;
{&lt;br /&gt;
static void Main(string[] args)&lt;br /&gt;
{&lt;br /&gt;
Console.Write (「入口点 A。」);&lt;br /&gt;
Console.Read();&lt;br /&gt;
}&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;class Test2&lt;br /&gt;
{&lt;br /&gt;
static void Main(string[] args)&lt;br /&gt;
{&lt;br /&gt;
Console.Write (「入口点 B。」);&lt;br /&gt;
Console.Read();&lt;br /&gt;
}&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;}&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;主项目也叫&lt;strong&gt;启动项目&lt;/strong&gt;，可以通过该设置方式设置启动项目。&lt;/p&gt;
&lt;h2 id=&#34;基本语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本语法&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;基本语法&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id=&#34;面向过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向过程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;面向过程&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;debug类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#debug类&#34;&gt;❡&lt;/a&gt; Debug 类&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼0–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;变量与常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量与常量&#34;&gt;❡&lt;/a&gt; 变量与常量&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼1–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释&#34;&gt;❡&lt;/a&gt; 注释&lt;/h3&gt;
&lt;p&gt;summary 注释:ctrl+m&lt;/p&gt;
&lt;p&gt;多行注释：ctrl+/&lt;/p&gt;
&lt;p&gt;单行注释：ctrl+k&lt;/p&gt;
&lt;h3 id=&#34;小驼峰和大驼峰&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小驼峰和大驼峰&#34;&gt;❡&lt;/a&gt; 小驼峰和大驼峰&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼2–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;as-和-is&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#as-和-is&#34;&gt;❡&lt;/a&gt; As 和 is&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼3–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型转换&#34;&gt;❡&lt;/a&gt; 类型转换&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼4–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;自定义转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义转换&#34;&gt;❡&lt;/a&gt; 自定义转换&lt;/h4&gt;
&lt;p&gt;implicit 和 explicit 不能重复&lt;/p&gt;
&lt;h5 id=&#34;implicit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#implicit&#34;&gt;❡&lt;/a&gt; implicit&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼5–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;explicit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#explicit&#34;&gt;❡&lt;/a&gt; explicit&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼6–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;创建对象的三种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建对象的三种方式&#34;&gt;❡&lt;/a&gt; 创建对象的三种方式&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼7–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法&#34;&gt;❡&lt;/a&gt; 方法&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼8–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;out-ref-使用元组组合多个返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#out-ref-使用元组组合多个返回值&#34;&gt;❡&lt;/a&gt; Out 、ref、使用元组组合多个返回值&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼9–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;params&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#params&#34;&gt;❡&lt;/a&gt; Params&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼10–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;switch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#switch&#34;&gt;❡&lt;/a&gt; Switch&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼11–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;字符串输出转义符-字符和字符串转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串输出转义符-字符和字符串转换&#34;&gt;❡&lt;/a&gt; 字符串 @输出转义符、字符和字符串转换&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼12–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;字符串null&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串null&#34;&gt;❡&lt;/a&gt; 字符串 Null&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼13–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;typeof和sizeof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typeof和sizeof&#34;&gt;❡&lt;/a&gt; typeof 和 sizeof&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼14–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;和合并运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和合并运算符&#34;&gt;❡&lt;/a&gt; ？和？？（合并运算符）&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼15–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串&#34;&gt;❡&lt;/a&gt; 字符串&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼16–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;区域性相关的信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区域性相关的信息&#34;&gt;❡&lt;/a&gt; 区域性相关的信息&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼17–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串格式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串格式化&#34;&gt;❡&lt;/a&gt; 字符串格式化&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼18–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串复合格式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串复合格式化&#34;&gt;❡&lt;/a&gt; 字符串复合格式化&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼19–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;生成随机数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成随机数&#34;&gt;❡&lt;/a&gt; 生成随机数&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼20–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;常见的时间计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的时间计算&#34;&gt;❡&lt;/a&gt; 常见的时间计算&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼21–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;日期格式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日期格式化&#34;&gt;❡&lt;/a&gt; 日期格式化&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼22–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合&#34;&gt;❡&lt;/a&gt; 集合&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼23–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;hashset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hashset&#34;&gt;❡&lt;/a&gt; HashSet&lt;/h4&gt;
&lt;h5 id=&#34;issubsetof子集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#issubsetof子集&#34;&gt;❡&lt;/a&gt; IsSubsetOf–子集&lt;/h5&gt;
&lt;h5 id=&#34;issupersetof父集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#issupersetof父集&#34;&gt;❡&lt;/a&gt; IsSupersetOf–父集&lt;/h5&gt;
&lt;h5 id=&#34;overlaps交集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#overlaps交集&#34;&gt;❡&lt;/a&gt; Overlaps–交集&lt;/h5&gt;
&lt;h5 id=&#34;unionwith并集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unionwith并集&#34;&gt;❡&lt;/a&gt; UnionWith–并集&lt;/h5&gt;
&lt;h5 id=&#34;removewherenew-predicatetxxx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#removewherenew-predicatetxxx&#34;&gt;❡&lt;/a&gt; RemoveWhere(new Predicate&amp;lt;T&amp;gt;(xxx))&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼24–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;字典&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典&#34;&gt;❡&lt;/a&gt; 字典&lt;/h4&gt;
&lt;h5 id=&#34;hashtable与dictionary&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hashtable与dictionary&#34;&gt;❡&lt;/a&gt; HashTable 与 Dictionary&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼25–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义排序&#34;&gt;❡&lt;/a&gt; 自定义排序&lt;/h3&gt;
&lt;h4 id=&#34;两种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两种方式&#34;&gt;❡&lt;/a&gt; 两种方式&lt;/h4&gt;
&lt;p&gt;Comparer&amp;lt;T&amp;gt; 类派生，有静态 Default 属性，默认排序方式&lt;/p&gt;
&lt;p&gt;IComparer&amp;lt;T&amp;gt; 接口，必须实现 Compare 方法。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼26–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;控制台应用程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制台应用程序&#34;&gt;❡&lt;/a&gt; 控制台应用程序&lt;/h3&gt;
&lt;h4 id=&#34;获取文本信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取文本信息&#34;&gt;❡&lt;/a&gt; 获取文本信息&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼27–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;获取键盘输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取键盘输入&#34;&gt;❡&lt;/a&gt; 获取键盘输入&lt;/h4&gt;
&lt;h5 id=&#34;read&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#read&#34;&gt;❡&lt;/a&gt; Read&lt;/h5&gt;
&lt;p&gt;Read (), 每次只读入一个字符，Ctrl+Z 返回 - 1&lt;/p&gt;
&lt;h5 id=&#34;readkey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#readkey&#34;&gt;❡&lt;/a&gt; ReadKey&lt;/h5&gt;
&lt;p&gt;ReadKey ()，读取用户输入的字符&lt;br /&gt;
 ReadKey 返回 ConsoleKeyInfo 实例， 包含三个属性:&lt;strong&gt;Key&lt;/strong&gt;（返回 ConsoleKey 枚举）、keyChar（直接返回 Unicode 字符）、&lt;strong&gt;Modifiers&lt;/strong&gt; (返回 ConsoleModifiers 枚举值，表示用户是否按下了&lt;strong&gt; Ctrl、Alt、Shift)&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;readline&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#readline&#34;&gt;❡&lt;/a&gt; ReadLine&lt;/h5&gt;
&lt;p&gt;ReadLine () 如果按下&lt;strong&gt; Ctrl+Z+Enter 键会返回 Null&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令行参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令行参数&#34;&gt;❡&lt;/a&gt; 命令行参数&lt;/h4&gt;
&lt;h5 id=&#34;两种方式-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两种方式-2&#34;&gt;❡&lt;/a&gt; 两种方式&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼28–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;控制台窗口的外观&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制台窗口的外观&#34;&gt;❡&lt;/a&gt; 控制台窗口的外观&lt;/h4&gt;
&lt;h5 id=&#34;三个属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三个属性&#34;&gt;❡&lt;/a&gt; 三个属性&lt;/h5&gt;
&lt;h6 id=&#34;title&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#title&#34;&gt;❡&lt;/a&gt; Title&lt;/h6&gt;
&lt;h6 id=&#34;backgroundcolor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#backgroundcolor&#34;&gt;❡&lt;/a&gt; BackgroundColor&lt;/h6&gt;
&lt;h6 id=&#34;foregroundcolor文本颜色也就是前置颜色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#foregroundcolor文本颜色也就是前置颜色&#34;&gt;❡&lt;/a&gt; ForegroundColor–文本颜色也就是前置颜色&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼29–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;控制台窗口的大小和位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制台窗口的大小和位置&#34;&gt;❡&lt;/a&gt; 控制台窗口的大小和位置&lt;/h4&gt;
&lt;h5 id=&#34;注意点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意点&#34;&gt;❡&lt;/a&gt; 注意点：&lt;/h5&gt;
&lt;p&gt;缓冲区大小比窗口大小要大，要先设置窗口大小为 1，1 之后再重新设置。&lt;/p&gt;
&lt;p&gt;WindowTop 以行为单位，WindowLeft 以列为单位。&lt;/p&gt;
&lt;p&gt;ConsoleKey.RightArrow// 右边&lt;/p&gt;
&lt;p&gt;Console.WindowLeft &amp;lt; (Console.BufferWidth - Console.WindowWidth)&lt;/p&gt;
&lt;p&gt;Console.SetWindowPosition(Console.WindowLeft + 1, Console.WindowTop);&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼30–&amp;gt;&lt;/p&gt;
&lt;p&gt;响应 CancelKeyPress 事件&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼31–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组&#34;&gt;❡&lt;/a&gt; 数组&lt;/h3&gt;
&lt;h4 id=&#34;定义方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义方式&#34;&gt;❡&lt;/a&gt; 定义方式&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼32–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;复制数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复制数组&#34;&gt;❡&lt;/a&gt; 复制数组&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼33–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;查找元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找元素&#34;&gt;❡&lt;/a&gt; 查找元素&lt;/h4&gt;
&lt;h5 id=&#34;查找元素索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找元素索引&#34;&gt;❡&lt;/a&gt; 查找元素索引&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼34–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;查找元素本身&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找元素本身&#34;&gt;❡&lt;/a&gt; 查找元素本身&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼35–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;反转数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反转数组&#34;&gt;❡&lt;/a&gt; 反转数组&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼36–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;更改数组大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更改数组大小&#34;&gt;❡&lt;/a&gt; 更改数组大小&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼37–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;多维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多维数组&#34;&gt;❡&lt;/a&gt; 多维数组&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼38–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;交错数组数组的数组嵌套数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交错数组数组的数组嵌套数组&#34;&gt;❡&lt;/a&gt; 交错数组 / 数组的数组 / 嵌套数组&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼39–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;array类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#array类&#34;&gt;❡&lt;/a&gt; Array 类&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼40–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;动态数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态数组&#34;&gt;❡&lt;/a&gt; 动态数组&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼41–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构体&#34;&gt;❡&lt;/a&gt; 结构体&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼42–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#枚举&#34;&gt;❡&lt;/a&gt; 枚举&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼43–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;常用api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用api&#34;&gt;❡&lt;/a&gt; 常用 API&lt;/h3&gt;
&lt;h4 id=&#34;stringbuilder&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stringbuilder&#34;&gt;❡&lt;/a&gt; StringBuilder&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼44–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;正则表达式需要再次学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正则表达式需要再次学习&#34;&gt;❡&lt;/a&gt; 正则表达式（需要再次学习）&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼45–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;格式化字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化字符串&#34;&gt;❡&lt;/a&gt; 格式化字符串&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼46–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;补充知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补充知识&#34;&gt;❡&lt;/a&gt; 补充知识&lt;/h3&gt;
&lt;h4 id=&#34;泛型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛型&#34;&gt;❡&lt;/a&gt; 泛型&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼47–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;顶级语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶级语句&#34;&gt;❡&lt;/a&gt; 顶级语句&lt;/h4&gt;
&lt;h5 id=&#34;注意点-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意点-2&#34;&gt;❡&lt;/a&gt; 注意点：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;一个项目中，&lt;strong&gt;只允许一个代码文件&lt;/strong&gt;使用顶层语句。&lt;/li&gt;
&lt;li&gt;由于顶层语句在编译时自动生成入口点方法 Main，所以在同一个项目中&lt;strong&gt;不能再选择其他入口点方法&lt;/strong&gt;（即编译器选项中不能使用 /main 或 - main 开头）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼48–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;record&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#record&#34;&gt;❡&lt;/a&gt; record&lt;/h4&gt;
&lt;p&gt;record 与 class 的区别在于相等比较的计算不同，如果&lt;strong&gt;相同的属性 class 在相等比较运算符上会给出 false&lt;/strong&gt;, 而 record 会给出 true.&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼49–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;global&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#global&#34;&gt;❡&lt;/a&gt; Global&lt;/h4&gt;
&lt;p&gt;​	global using System;&lt;/p&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常处理&#34;&gt;❡&lt;/a&gt; 异常处理&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼50–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名空间&#34;&gt;❡&lt;/a&gt; 命名空间&lt;/h3&gt;
&lt;p&gt;作用：避免名称冲突&lt;/p&gt;
&lt;p&gt;不是本项目的需要先引用目标命名空间所在程序集&lt;/p&gt;
&lt;h4 id=&#34;namespace&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#namespace&#34;&gt;❡&lt;/a&gt; NameSpace&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼51–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;using&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#using&#34;&gt;❡&lt;/a&gt; using&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;起别名&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼52–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入命名空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;释放空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态成员访问&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼53–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;预处理器指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预处理器指令&#34;&gt;❡&lt;/a&gt; 预处理器指令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;#region #endregion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;#warning 和 #error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;#lines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;#pragma&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件的输入和输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件的输入和输出&#34;&gt;❡&lt;/a&gt; 文件的输入和输出&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼54–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;不安全代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不安全代码&#34;&gt;❡&lt;/a&gt; 不安全代码&lt;/h3&gt;
&lt;h4 id=&#34;设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置&#34;&gt;❡&lt;/a&gt; 设置&lt;/h4&gt;
&lt;h4 id=&#34;使用指针检索数据值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用指针检索数据值&#34;&gt;❡&lt;/a&gt; 使用指针检索数据值&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼55–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;传递指针作为方法的参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传递指针作为方法的参数&#34;&gt;❡&lt;/a&gt; 传递指针作为方法的参数&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼56–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;使用指针访问数组元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用指针访问数组元素&#34;&gt;❡&lt;/a&gt; 使用指针访问数组元素&lt;/h4&gt;
&lt;p&gt;fixed (int *ptr = list), 指针变量在数组中内存固定，其余地方不固定，需要使用 fixed () 来固定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C# 中声明的变量在内存中的存储受垃圾回收器管理&lt;/strong&gt;；因此一个变量（例如一个大数组）有可能在运行过程中被移动到内存中的其他位置。&lt;strong&gt;如果一个变量的内存地址会变化，那么指针也就没有意义了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼57–&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;面向对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象&#34;&gt;❡&lt;/a&gt; 面向对象&lt;/h2&gt;
&lt;h3 id=&#34;类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类&#34;&gt;❡&lt;/a&gt; 类&lt;/h3&gt;
&lt;h4 id=&#34;基础使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础使用&#34;&gt;❡&lt;/a&gt; 基础使用&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼58–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;抽象类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象类&#34;&gt;❡&lt;/a&gt; 抽象类&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼59–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;密封类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#密封类&#34;&gt;❡&lt;/a&gt; 密封类&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼60–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;静态类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态类&#34;&gt;❡&lt;/a&gt; 静态类&lt;/h4&gt;
&lt;h5 id=&#34;单例模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单例模式&#34;&gt;❡&lt;/a&gt; 单例模式&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼61–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;静态构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态构造方法&#34;&gt;❡&lt;/a&gt; 静态构造方法&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼62–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;只读字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#只读字段&#34;&gt;❡&lt;/a&gt; 只读字段&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼63–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;字段和属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字段和属性&#34;&gt;❡&lt;/a&gt; 字段和属性&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼64–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;init初始化器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#init初始化器&#34;&gt;❡&lt;/a&gt; Init 初始化器&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼65–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装&#34;&gt;❡&lt;/a&gt; 封装&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;images/image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;protected&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#protected&#34;&gt;❡&lt;/a&gt; Protected&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼66–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;internal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#internal&#34;&gt;❡&lt;/a&gt; Internal&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;一个项目就是一个程序集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;可以通过创建类库，保护级别为 internal，然后在&lt;strong&gt;主函数的解决方案那边添加类库的引用&lt;/strong&gt;，从而验证是错误的。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼67–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;protected-internal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#protected-internal&#34;&gt;❡&lt;/a&gt; Protected Internal&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼68–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;多态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多态&#34;&gt;❡&lt;/a&gt; 多态&lt;/h3&gt;
&lt;h4 id=&#34;virtual和override-new&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#virtual和override-new&#34;&gt;❡&lt;/a&gt; virtual 和 override、new&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼69–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;静态多态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态多态&#34;&gt;❡&lt;/a&gt; 静态多态&lt;/h4&gt;
&lt;h5 id=&#34;方法重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法重载&#34;&gt;❡&lt;/a&gt; 方法重载&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼70–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;运算符重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符重载&#34;&gt;❡&lt;/a&gt; 运算符重载&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼71–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;动态多态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态多态&#34;&gt;❡&lt;/a&gt; 动态多态&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼72–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承&#34;&gt;❡&lt;/a&gt; 继承&lt;/h3&gt;
&lt;p&gt;派生类的可访问性不应该比基类高。这样会避免访问冲突。&lt;/p&gt;
&lt;h4 id=&#34;定义接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义接口&#34;&gt;❡&lt;/a&gt; 定义接口&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼73–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;接口继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口继承&#34;&gt;❡&lt;/a&gt; 接口继承&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼74–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;显示接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示接口&#34;&gt;❡&lt;/a&gt; 显示接口&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼75–&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;高级语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高级语法&#34;&gt;❡&lt;/a&gt; 高级语法&lt;/h2&gt;
&lt;h3 id=&#34;单元测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单元测试&#34;&gt;❡&lt;/a&gt; 单元测试&lt;/h3&gt;
&lt;h4 id=&#34;安装包以及引入的包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包以及引入的包&#34;&gt;❡&lt;/a&gt; 安装包以及引入的包&lt;/h4&gt;
&lt;h5 id=&#34;安装包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;NUnit&lt;/li&gt;
&lt;li&gt;Microsoft.NET.Test.Sdk&lt;/li&gt;
&lt;li&gt;NUnit3TestAdapter&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;引入包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引入包&#34;&gt;❡&lt;/a&gt; 引入包&lt;/h5&gt;
&lt;p&gt;​	    using NUnit.Framework;&lt;/p&gt;
&lt;h4 id=&#34;项目属性修改不然会显示main入口不对&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目属性修改不然会显示main入口不对&#34;&gt;❡&lt;/a&gt; 项目属性修改，不然会显示 Main 入口不对&lt;/h4&gt;
&lt;h4 id=&#34;基础使用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础使用-2&#34;&gt;❡&lt;/a&gt; 基础使用&lt;/h4&gt;
&lt;p&gt;onetimesetup 不输出结果，&lt;strong&gt;断言.that (4,Is.equalto (2+3)) 错误会显示结果&lt;/strong&gt;，正确没有结果。&lt;/p&gt;
&lt;p&gt;test 的话需要&lt;strong&gt;先运行所有测试&lt;/strong&gt;，之后才会有√进行单独的单元测试。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼76–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;断言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#断言&#34;&gt;❡&lt;/a&gt; 断言&lt;/h3&gt;
&lt;p&gt;作用：检验代码的执行是否符合预期的结果。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼77–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;使用日志文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用日志文件&#34;&gt;❡&lt;/a&gt; 使用日志文件&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼78–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射&#34;&gt;❡&lt;/a&gt; 反射&lt;/h3&gt;
&lt;p&gt;GetMethod、GetConstructor 都与 invoke 有关&lt;/p&gt;
&lt;p&gt;var Obj = assembly.CreateInstance(「MyStudyProcess_C#Senior.MyTest」,false);&lt;a href=&#34;//xn--eqrzj591h57w.xn--eqrt45g&#34;&gt;// 命名空间。类名&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼79–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼80–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼81–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;扩展知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展知识&#34;&gt;❡&lt;/a&gt; 扩展知识&lt;/h3&gt;
&lt;h4 id=&#34;扩展方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展方法&#34;&gt;❡&lt;/a&gt; 扩展方法&lt;/h4&gt;
&lt;p&gt;自定义扩展方法&lt;/p&gt;
&lt;p&gt;1、静态类&lt;/p&gt;
&lt;p&gt;2、静态方法&lt;/p&gt;
&lt;p&gt;3、参数列表前加上 this&lt;/p&gt;
&lt;p&gt;扩展方法向现有类型 “添加” 方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。&lt;/p&gt;
&lt;p&gt;扩展方法是一种静态方法，但可以像扩展类型上的实例方法一样进行调用。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼82–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特性&#34;&gt;❡&lt;/a&gt; 特性&lt;/h4&gt;
&lt;h5 id=&#34;自定义特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义特性&#34;&gt;❡&lt;/a&gt; 自定义特性&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼83–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;预定义特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预定义特性&#34;&gt;❡&lt;/a&gt; 预定义特性&lt;/h5&gt;
&lt;p&gt;.Net 框架提供了三种预定义特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttributeUsage&lt;/li&gt;
&lt;li&gt;Conditional–条件，#define xxx&lt;/li&gt;
&lt;li&gt;Obsolete–可以用旧的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼84–&amp;gt;&lt;/p&gt;
&lt;p&gt;创建并使用自定义特性包含四个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明自定义特性&lt;/li&gt;
&lt;li&gt;构建自定义特性&lt;/li&gt;
&lt;li&gt;在目标程序元素上应用自定义特性&lt;/li&gt;
&lt;li&gt;通过反射访问特性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼85–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;索引器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引器&#34;&gt;❡&lt;/a&gt; 索引器&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼86–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#序列化&#34;&gt;❡&lt;/a&gt; 序列化&lt;/h4&gt;
&lt;h5 id=&#34;二进制序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二进制序列化&#34;&gt;❡&lt;/a&gt; 二进制序列化&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼87–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼88–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;xml序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xml序列化&#34;&gt;❡&lt;/a&gt; XML 序列化&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼89–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;自定义xml文档的节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义xml文档的节点&#34;&gt;❡&lt;/a&gt; 自定义 xml 文档的节点&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼90–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼91–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;数据协定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据协定&#34;&gt;❡&lt;/a&gt; 数据协定&lt;/h5&gt;
&lt;p&gt;数据交互过程对象不一定相同类型，必须遵循数据协定来定义。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼92–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;json序列化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#json序列化&#34;&gt;❡&lt;/a&gt; JSon 序列化&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼93–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;jsonserializer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsonserializer&#34;&gt;❡&lt;/a&gt; JsonSerializer&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼94–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;自定义转换器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义转换器&#34;&gt;❡&lt;/a&gt; 自定义转换器&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼95–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;自定义属性名称&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义属性名称&#34;&gt;❡&lt;/a&gt; 自定义属性名称&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼96–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmVqc29uLmNvbS8=&#34;&gt;在线 JSON 校验格式化工具（Be JSON）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼97–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;泛型-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛型-2&#34;&gt;❡&lt;/a&gt; 泛型&lt;/h3&gt;
&lt;p&gt;由于泛型委托 xxx&amp;lt;T&amp;gt; 的类型参数 T 是固定的，也就是不可变体，所以无法隐式转换.&lt;/p&gt;
&lt;p&gt;public delegate TResult Func&amp;lt;in T1,in T2,out TResult&amp;gt;(T1 arg1,T2 arg2);&lt;/p&gt;
&lt;h4 id=&#34;协变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#协变&#34;&gt;❡&lt;/a&gt; 协变&lt;/h4&gt;
&lt;p&gt;out 只能用于接口&lt;/p&gt;
&lt;p&gt;父类 = 子类&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼98–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;逆变&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逆变&#34;&gt;❡&lt;/a&gt; 逆变&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼99–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;泛型的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛型的应用&#34;&gt;❡&lt;/a&gt; 泛型的应用&lt;/h4&gt;
&lt;h5 id=&#34;手写orm框架很难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手写orm框架很难&#34;&gt;❡&lt;/a&gt; 手写 ORM 框架（很难）&lt;/h5&gt;
&lt;p&gt;ORM 框架，对象关系映射。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从老师提供 utils 文件夹中将 DbHelper 拷贝至当前你的项目中&lt;/li&gt;
&lt;li&gt;nuget 引用：
&lt;ul&gt;
&lt;li&gt;1：Microsoft.Extensions.Configuration，&lt;/li&gt;
&lt;li&gt;2：System.Data.SqlClient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;封装 ORM 框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼100–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;datatable-转-list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datatable-转-list&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;DataTable&lt;/strong&gt; &lt;strong&gt;转&lt;/strong&gt; &lt;strong&gt;List&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;DataTable 转换成 List&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼101–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;泛型集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛型集合&#34;&gt;❡&lt;/a&gt; 泛型集合&lt;/h3&gt;
&lt;h4 id=&#34;存在的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存在的问题&#34;&gt;❡&lt;/a&gt; 存在的问题&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼102–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;性能对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#性能对比&#34;&gt;❡&lt;/a&gt; 性能对比&lt;/h4&gt;
&lt;h5 id=&#34;非泛型集合性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非泛型集合性能&#34;&gt;❡&lt;/a&gt; 非泛型集合性能&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼103–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;泛型集合性能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛型集合性能&#34;&gt;❡&lt;/a&gt; 泛型集合性能&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼104–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;io文件流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io文件流&#34;&gt;❡&lt;/a&gt; I/O 文件流&lt;/h3&gt;
&lt;h4 id=&#34;stream流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stream流&#34;&gt;❡&lt;/a&gt; Stream 流&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼105–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;内存映射文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存映射文件&#34;&gt;❡&lt;/a&gt; 内存映射文件&lt;/h4&gt;
&lt;p&gt;内存映射文件可以单独存放于内存中，也可以把磁盘上的文件映射为内存文件来进行处理.&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼106–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼107–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;独立存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#独立存储&#34;&gt;❡&lt;/a&gt; 独立存储&lt;/h4&gt;
&lt;p&gt;独立存储也叫隔离存储，是一个由操作系统提供的、可以存储文件和目录的一个特殊区域。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼108–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;委托&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#委托&#34;&gt;❡&lt;/a&gt; 委托&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、委托的本质就是一个 Sealed 类&lt;/li&gt;
&lt;li&gt;2、继承自 System.MulticastDelegate:Delegate&lt;/li&gt;
&lt;li&gt;3、委托里面内置了 3 个方法：Invoke (),BeginInvoke (),EndInvoke ()。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要结论&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;参数列表和返回值称为&lt;strong&gt;方法签名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;委托的签名要与方法的签名保持一致&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!–code￼109–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;弃元-匿名方法与-lambda-表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#弃元-匿名方法与-lambda-表达式&#34;&gt;❡&lt;/a&gt; 弃元、匿名方法与 Lambda 表达式&lt;/h4&gt;
&lt;h5 id=&#34;弃元&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#弃元&#34;&gt;❡&lt;/a&gt; 弃元&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼110–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;匿名方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#匿名方法&#34;&gt;❡&lt;/a&gt; 匿名方法&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼111–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;lambda-表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lambda-表达式&#34;&gt;❡&lt;/a&gt; Lambda 表达式&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Lambda 表达式是一个匿名函数，用它可以高效简化代码，常用作委托，回调&lt;/li&gt;
&lt;li&gt;Lambda 表达式都使用运算符 =&amp;gt; ，所以当你见到这个符号，基本上就是一个 Lambda 表达式&lt;/li&gt;
&lt;li&gt;Lambda 运算符的左边是输入参数 ()， =&amp;gt; ，右边是表达式或语句块&lt;/li&gt;
&lt;li&gt;Lambda 表达式，是可以访问到外部变量的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼112–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;系统内置委托&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统内置委托&#34;&gt;❡&lt;/a&gt; 系统内置委托&lt;/h4&gt;
&lt;h5 id=&#34;action&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#action&#34;&gt;❡&lt;/a&gt; Action&lt;/h5&gt;
&lt;p&gt;Action 无返回值的内置委托，有 16 个重载方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Action 声明无参数委托&lt;/li&gt;
&lt;li&gt;Action 声明有一个参数委托&lt;/li&gt;
&lt;li&gt;Action  声明有 2 个参数委托&lt;/li&gt;
&lt;li&gt;Action  声明有 3 个参数委托&lt;/li&gt;
&lt;li&gt;Action  委托输入参数个数最多 16 个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;备注&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、它有 16 重载方法&lt;/p&gt;
&lt;p&gt;2、有 16 个输入参数&lt;/p&gt;
&lt;p&gt;3、 Action 的返回类型是 Void&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!–code￼113–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;functtresult&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#functtresult&#34;&gt;❡&lt;/a&gt; Func&amp;lt;T,TResult&amp;gt;&lt;/h5&gt;
&lt;p&gt;Func 有返回值的内置委托，有 17 个重载方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、Func&lt;/li&gt;
&lt;li&gt;2、Func&amp;lt;T,TResult&amp;gt;&lt;/li&gt;
&lt;li&gt;3、 Func&amp;lt;T1,T2,TResult&amp;gt;&lt;/li&gt;
&lt;li&gt;4、 Func&amp;lt;T1,T2,T3,TResult&amp;gt;&lt;/li&gt;
&lt;li&gt;5 、Func&amp;lt;T1,…,TResult&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;备注&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、它有 17 个重载方法&lt;/p&gt;
&lt;p&gt;2、有 T1 到 T16 个输入参数&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;最后一个参数 Tresult 代表返回类型&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!–code￼114–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;委托异步调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#委托异步调用&#34;&gt;❡&lt;/a&gt; 委托异步调用&lt;/h4&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步调用，即在线程池分配的子线程中执行委托，因此执行时不会阻塞调用委托的线程，该线程在 调用后不等委托结束继续向下执行。&lt;/li&gt;
&lt;li&gt;委托结束时，如果有返回值，子线程将返回值传递给调用线程；&lt;/li&gt;
&lt;li&gt;委托方法执行结束后，如果有回调函数，则在子线程中继续执行回调函数，直到回调函数结束委托 才结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼115–&amp;gt;&lt;/p&gt;
&lt;p&gt;但是上述代码会抛出异常&lt;strong&gt; System.PlatformNotSupportedException : Operation is not supported on this platform.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原因如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;异步编程模型 (APM)(使用 IAsyncResult 和 BeginInvoke) 不再是异步调用的优选方法。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS0wbXEuTkVU&#34;&gt;从.NET&lt;/span&gt; Framework 4.5 开始，推荐的异步模型是基于任务的异步模式 (TAP)。因此，而且由于异步委托的 实现取决于远程处理，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1ncXEuTkVU&#34;&gt;但.NET&lt;/span&gt; Core 中 是不存在的功能，BeginInvoke 和 EndInvoke 委托调用不支 持 .NET Core&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;使用任务实现异步调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用任务实现异步调用&#34;&gt;❡&lt;/a&gt; 使用任务实现异步调用&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼116–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;event-事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#event-事件&#34;&gt;❡&lt;/a&gt; event 事件&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼117–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;事件的本质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件的本质&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;事件的本质&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;通过&lt;strong&gt;反射&lt;/strong&gt;我们可以得出结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IsClass: true&lt;/li&gt;
&lt;li&gt;父类是 MulticastDelegate，成员方法 Invoke，BeginInvoke，EndInvoke&lt;/li&gt;
&lt;li&gt;IsSealed: true&lt;/li&gt;
&lt;li&gt;结论：事件是一个委托，并且还是一个特殊的密封类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;事件与委托的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件与委托的区别&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;事件与委托的区别&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;事件只能在类的内部进行触发，不能在类的外部进行触发。而委托在类的内部和外部都可触发；&lt;/li&gt;
&lt;li&gt;委托一般用于回调，而事件一般用于外部接口。在观察者模式中，被观察者可在内部声明一个事件&lt;/li&gt;
&lt;li&gt;作为外部观察者注册的接口。&lt;/li&gt;
&lt;li&gt;事件只能通过 +=，-= 方式 绑定 / 解绑方式&lt;/li&gt;
&lt;li&gt;事件是一个特殊的委托，查看反编译工具之后的代码，发现&lt;strong&gt;事件是一个 private 委托&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;观察者模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#观察者模式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;观察者模式&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;错误写法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#错误写法&#34;&gt;❡&lt;/a&gt; 错误写法&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼118–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;正确写法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正确写法&#34;&gt;❡&lt;/a&gt; 正确写法&lt;/h4&gt;
&lt;p&gt;Observer 设计模式中主要包括如下两类对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Subject：监视对象（被观察者）&lt;/strong&gt;，它往往包含着其他对象所感兴趣的内容。在本范例中，&lt;strong&gt;热水器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是一个监视对象，它包含的其他对象所感兴趣的内容，就是 temprature 字段，当这个字段的值&lt;/p&gt;
&lt;p&gt;快到 100 时，会不断把数据发给监视它的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Observer：观察者&lt;/strong&gt;，它监视 Subject，当 Subject 中的某件事发生的时候，会告知 Observer，而&lt;/p&gt;
&lt;p&gt;Observer 则会采取相应的行动。在本范例中，&lt;strong&gt;Observer 有警报器和显示器&lt;/strong&gt;，它们采取的行动分别&lt;/p&gt;
&lt;p&gt;是发出警报和显示水温。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在本例中，事情发生的顺序应该是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;警报器和显示器告诉热水器，它对它的温度比较感兴趣 (注册)。&lt;/li&gt;
&lt;li&gt;热水器知道后保留对警报器和显示器的引用。&lt;/li&gt;
&lt;li&gt;热水器进行烧水这一动作，当水温超过 95 度时，通过对警报器和显示器的引用，自动调用警报器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;的 MakeAlert () 方法、显示器的 ShowMsg () 方法。&lt;/p&gt;
&lt;p&gt;类似这样的例子是很多的，GOF (设计模式) 对它进行了抽象，称为 Observer 设计模式：&lt;strong&gt;Observer**** 设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模式是为了定义对象间的一种一对多的依赖关系，以便于当一个对象的状态改变时，其他依赖于它的对&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;象会被自动告知并更新。&lt;strong&gt;&lt;strong&gt;Observer&lt;/strong&gt;&lt;/strong&gt; 模式是一种松耦合的设计模式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;观察者模式，也叫&lt;strong&gt;发布订阅模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼119–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;表达式树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式树&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;表达式树&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;expression-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#expression-类&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Expression&lt;/strong&gt; &lt;strong&gt;类&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	提供一种基类，表示表达式树节点的类派生自该基类。 它还包含用来创建各种节点类型 (表达式类型) 的&lt;/p&gt;
&lt;p&gt;static 工厂方法。 这是一个 abstract 类。&lt;/p&gt;
&lt;h5 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用场景&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;应用场景：&lt;/strong&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;自定义 ORM 框架查询条件 (用来检查用户信息合法性)&lt;/li&gt;
&lt;li&gt;规则引擎&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;常用表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用表达式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;常用表达式&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;1-常量表达式-constantexpression&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-常量表达式-constantexpression&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;常量表达式&lt;/strong&gt; **-ConstantExpression**&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼120–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;2-参数表达式-parameterexpression&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-参数表达式-parameterexpression&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;参数表达式&lt;/strong&gt; **-ParameterExpression**&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼121–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;3-二叉二元表达式-binaryexpression&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-二叉二元表达式-binaryexpression&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;二叉（二元）表达式&lt;/strong&gt; **-BinaryExpression**&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼122–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;4-lambda表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-lambda表达式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;4. Lambda**** 表达式&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼123–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;5-成员表达式-memberexpression&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-成员表达式-memberexpression&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;成员表达式&lt;/strong&gt; **-MemberExpression**&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼124–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;6-方法表达式-methodcallexpression&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-方法表达式-methodcallexpression&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;6.&lt;/strong&gt; &lt;strong&gt;方法表达式&lt;/strong&gt; **-MethodCallExpression**&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼125–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;7-成员初始化表达式-memberbinding&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-成员初始化表达式-memberbinding&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;7.&lt;/strong&gt; &lt;strong&gt;成员初始化表达式&lt;/strong&gt; **-MemberBinding**&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼126–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;表达式实战很难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表达式实战很难&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;表达式实战&lt;/strong&gt;（很难）&lt;/h5&gt;
&lt;h6 id=&#34;mytest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mytest&#34;&gt;❡&lt;/a&gt; MyTest&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼127–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;1-automap-自动映射框架&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-automap-自动映射框架&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;1. AutoMap&lt;/strong&gt; &lt;strong&gt;自动映射框架&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼128–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼129–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;2-orm-条件表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-orm-条件表达式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;2. ORM&lt;/strong&gt; &lt;strong&gt;条件表达式&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;EF 框架中 一般可以将 Expression 表达式作为查询条件，但如果是自定义的 ORM 框架，我们该如何将&lt;/p&gt;
&lt;p&gt;Expression 表达式生成可执行的 SQL 呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1Bc3AtZTgyZjg5MGEubmV0&#34;&gt;新建 Asp.net&lt;/span&gt; Mvc 项目，搭建 EF 框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（1）Nuget 安装： microsoft.entityframeworkcore，&lt;/p&gt;
&lt;p&gt;microsoft.entityframeworkcore.sqlserver&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼130–&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 Program 中加下如下代码：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼131–&amp;gt;&lt;/p&gt;
&lt;p&gt;appsettings.json 配置如下：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼132–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义类 CustomerVisitor 继承至 ExpressionVisitor&lt;/p&gt;
&lt;p&gt;假设你要执行的表达式如下：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼133–&amp;gt;&lt;/p&gt;
&lt;p&gt;ExpressionVisitor 可以解析 Expression 表达式中每一个节点的执行过程&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼134–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试调用&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼135–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统信息管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统信息管理&#34;&gt;❡&lt;/a&gt; 系统信息管理&lt;/h3&gt;
&lt;h4 id=&#34;管理服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管理服务&#34;&gt;❡&lt;/a&gt; 管理服务&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼136–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;wmi查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wmi查询&#34;&gt;❡&lt;/a&gt; WMI 查询&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼137–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;读取系统参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读取系统参数&#34;&gt;❡&lt;/a&gt; 读取系统参数&lt;/h4&gt;
&lt;h5 id=&#34;environment类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#environment类&#34;&gt;❡&lt;/a&gt; Environment 类&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼138–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;systeminformation类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#systeminformation类&#34;&gt;❡&lt;/a&gt; SystemInformation 类&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼139–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;写入事件日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写入事件日志&#34;&gt;❡&lt;/a&gt; 写入事件日志&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼140–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;进程与线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程与线程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;进程与线程&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;进程操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程操作&#34;&gt;❡&lt;/a&gt; 进程操作&lt;/h4&gt;
&lt;h5 id=&#34;process类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#process类&#34;&gt;❡&lt;/a&gt; Process 类&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼141–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;获取进程列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取进程列表&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;获取进程列表&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼142–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;重定向输入输出流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重定向输入输出流&#34;&gt;❡&lt;/a&gt; 重定向输入 / 输出流&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼143–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;多线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;多线程&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;net-中如何实现多线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#net-中如何实现多线程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;.net&lt;/strong&gt; &lt;strong&gt;中如何实现多线程&lt;/strong&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;线程肯定也是要执行一段代码的。所以要产生一个线程，必须要先为这个线程写一段它即将要执行的一段代码（方法），&lt;strong&gt;相当于是找个人来帮忙做事&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;线程启动时，通过&lt;strong&gt;委托&lt;/strong&gt;来调用该方法（委托的好处），&lt;/li&gt;
&lt;li&gt;线程启动时，调用传过来的委托，委托就会执行相应的方法，实现线程执行方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;多线程开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程开发&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;多线程开发&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1-单线程带来的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-单线程带来的问题&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;单线程带来的问题&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​	如果主线程需要执行某个占时很多的任务，如果此时再想对这个 UI 操作其他任务，就需要排队等待或者&lt;/p&gt;
&lt;p&gt;出现无响应的情况。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼144–&amp;gt;&lt;/p&gt;
&lt;p&gt;​	在点击按钮的之后，UI 线程已经处于阻塞状态，界面无法拖动，只有当循环结束之后，我们才可以对界&lt;/p&gt;
&lt;p&gt;面进行下一步操作。&lt;/p&gt;
&lt;h5 id=&#34;2-使用多线程解决问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-使用多线程解决问题&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;使用多线程解决问题&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼145–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;3-前后台线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-前后台线程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;前后台线程&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​	Thread 对象在创建时，默认为&lt;strong&gt;前台线程&lt;/strong&gt;，也就是&lt;strong&gt; IsBackground = false&lt;/strong&gt; 。前端线程的特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有当所有的前台线程都关闭，程序才会真正的退出。&lt;/li&gt;
&lt;li&gt;即使主线程关了，前台线程也要将它所执行的任务执行完成才会退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼146–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;4-线程之间参数传递&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-线程之间参数传递&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;线程之间参数传递&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼147–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;线程安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程安全&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;线程安全&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;跨线程控件调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跨线程控件调用&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;跨线程控件调用&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题&#34;&gt;❡&lt;/a&gt; 问题&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼148–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;解决方案1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案1&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;解决方案&lt;strong&gt;&lt;strong&gt; 1&lt;/strong&gt;&lt;/strong&gt;：&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼149–&amp;gt;&lt;/p&gt;
&lt;p&gt;​	CheckForIllegalCrossThreadCalls =true; 的时候 .net 会对程序使用 UI 控件进行安全检查 ，避免跨线程&lt;/p&gt;
&lt;p&gt;导致的死锁、状态不对的 bug 。而 CheckForIllegalCrossThreadCalls =false;.net 不会对程序使用 UI 控件&lt;/p&gt;
&lt;p&gt;进行安全检查，全靠程序员自己避免以上 bug，&lt;strong&gt;实际上还是多个线程对界面控件操作&lt;/strong&gt; 。&lt;/p&gt;
&lt;h6 id=&#34;解决方案2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决方案2&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;解决方案&lt;strong&gt;&lt;strong&gt; 2&lt;/strong&gt;&lt;/strong&gt;：&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼150–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;线程并发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程并发&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;线程并发&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;抛出问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抛出问题&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;抛出问题&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼151–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;lock-关键字解决并发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lock-关键字解决并发&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;lock&lt;/strong&gt; &lt;strong&gt;关键字解决并发&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt; lock 关键字可以用来确保代码块完成运行，而不会被其他线程中断。它可以把一段代码定义为&lt;/p&gt;
&lt;p&gt;互斥段（critical section），互斥段在一个时刻内只允许一个线程进入执行，而其他线程必须等待。这&lt;/p&gt;
&lt;p&gt;是通过在代码块运行期间为给定对象获取互斥锁来实现的。在多线程中，每个线程都有自己的资源，但&lt;/p&gt;
&lt;p&gt;是代码区是共享的，即每个线程都可以执行相同的函数。这可能带来的问题就是几个线程同时执行一个&lt;/p&gt;
&lt;p&gt;函数，导致数据的混乱，产生不可预料的结果，因此我们必须避免这种情况的发生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 多线程中频繁使用 lock 会造成性能损耗。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼152–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;注意事项及原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意事项及原理&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;注意事项及原理&lt;/strong&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2.1**** 注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当同步对共享资源的线程访问时，请锁定专用对象实例（例如，private static readonly object Lock =&lt;/p&gt;
&lt;p&gt;new ();）或另一个不太可能被代码无关部分用作 lock 对象的实例。 避免对不同的共享资源使用相同的&lt;/p&gt;
&lt;p&gt;lock 对象实例，因为这可能导致死锁或锁争用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体而言，&lt;strong&gt;避免将以下对象用作&lt;/strong&gt; &lt;strong&gt;lock&lt;/strong&gt; &lt;strong&gt;对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this（调用方可能将其用作 lock）。&lt;/li&gt;
&lt;li&gt;Type 实例（可以通过 typeof 运算符或反射获取）。&lt;/li&gt;
&lt;li&gt;字符串实例，包括字符串文本，（这些可能是暂存的）。&lt;/li&gt;
&lt;li&gt;尽可能缩短持有锁的时间，以减少锁争用。&lt;/li&gt;
&lt;li&gt;在 lock 语句的正文中不能使用 await 运算符。&lt;/li&gt;
&lt;li&gt;特别要注意，不要用值类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2.2**** 原理&lt;/strong&gt; (以下内容比较浅显，太深究内容一篇文章写不完)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q1&lt;/strong&gt;**：** 大家会注意到，为什么要在 lock 的圆括号里放一个引用类型 object？为什么不可以放一个值类型如 int？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A1&lt;/strong&gt;**：** 因为如果使用了值类型例如 int 作为 lock 锁定的对象，lock 圆括号中的入参是 object 类型当传入了值类型会对传入的对象类型进行转换，那么在 IL 层面会对值类型进行一次装箱（box）操作。那么这种情况下就不具备 lock 锁定需要用到专用对象的稳定性了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;​					IL_0002:ldloc.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;​					IL_0003:box [mscorlib]System.Int32&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A2&lt;/strong&gt;**：** 值类型 一般都在线程函数自己的栈里，每个线程局部栈是不一样的，互相之间不会有影响，所以不用锁定一个特例，引用类型值类型字段在堆里，但可以通过 lock 那个引用类型对象就可以实现了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;monitor-监视器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#monitor-监视器&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Monitor&lt;/strong&gt; &lt;strong&gt;监视器&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​		&lt;strong&gt;首先&lt;strong&gt;&lt;strong&gt; lock&lt;/strong&gt;&lt;/strong&gt; 和&lt;strong&gt;&lt;strong&gt; Minitor&lt;/strong&gt;&lt;/strong&gt; 有什么区别呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​			其实 lock 在 IL 代码中会被翻译成 Monitor。也就是 Monitor.Enter (obj) 和 Monitor.Exit (obj).&lt;/p&gt;
&lt;p&gt;​			微软很照护我们，给了我们语法糖 Lock, 对的，语言糖确实减少了我们不必要的劳动并且让代码更可观，但是如果我们要精细的控制，则必须使用原生类，这里要注意一个问题就是 “锁住什么” 的问题，一般情况下我们锁住的都是静态对象，我们知道静态对象属于类级别，当有很多线程共同访问的时候，那个静态对象对多个线程来说是一个，不像实例字段会被认为是多个。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼153–&amp;gt;&lt;/p&gt;
&lt;p&gt;等价于：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼154–&amp;gt;&lt;/p&gt;
&lt;p&gt;所以 lock 能做的，Monitor 肯定能做，Monitor 能做的，lock 不一定能做。那么 Monitor 额外的功能呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Monitor.TryEnter (obj,timespan)----timeout 之后，就不执行这段代码了。lock 可是一直会死等的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还有 Monitor.Wait () 和 Monitor.Pulse ()。在 lock 代码里面如果调用了 Monitor.Wait ()，会放弃对资源的所有权，让别的线程 lock 进来。然后别的线程代码里 Pulse 一下（让原线程进入到等待队列），然后在 Wait 一下释放资源，这样原线程的就可以继续执行了（代码还堵塞在 wait 那句话呢）。也就是说，必须两个或多个线程共同调用 Wait 和 Pulse，把资源的所有权抛来抛去，才不会死锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;生产者消费者模式需要反复学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生产者消费者模式需要反复学习&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;生产者消费者模式&lt;/strong&gt;（需要反复学习）&lt;/h6&gt;
&lt;p&gt;​	请用线程结合队列模拟生产者 - 消费者模式，需求描述如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生产者只在仓库未满时进行生产苹果手（最多生产 10 部）并放入队列，仓库满时生产者进程被阻塞&lt;/li&gt;
&lt;li&gt;消费者只在仓库非空时进行消费，仓库为空时消费者进程被阻塞&lt;/li&gt;
&lt;li&gt;当消费者发现仓库为空时通知生产者生产&lt;/li&gt;
&lt;li&gt;当生产者发现仓库满时通知消费者&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;!–code￼155–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;semaphore-信号量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#semaphore-信号量&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Semaphore&lt;/strong&gt; &lt;strong&gt;信号量&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;案例&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;需求描述，某公共厕所共有 3 个蹲位 (3 个信号量)，突然来了 10 个人，请使用 Semaphore 来模拟此场景。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼156–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;线程等待挂起唤醒终止&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程等待挂起唤醒终止&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;线程等待，挂起，唤醒，终止&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;1-线程等待join&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-线程等待join&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;线程等待 ****Join&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻止调用线程，直到由该实例表示的线程&lt;/p&gt;
&lt;p&gt;终止。&lt;/p&gt;
&lt;p&gt;大白话就是，将执行权交给当前的实例线程，直到该线程的任务完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼157–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Join**** 等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼158–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;2-挂起唤醒终止&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-挂起唤醒终止&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;挂起，唤醒，终止&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼159–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;线程池&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼160–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;异步编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步编程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;异步编程&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;task-类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#task-类&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Task&lt;/strong&gt; &lt;strong&gt;类&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;创建任务的三种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建任务的三种方式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;创建任务的三种方式：&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼161–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;任务等待的四种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务等待的四种方式&#34;&gt;❡&lt;/a&gt; 任务等待的四种方式&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼162–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;执行延续任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行延续任务&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;执行延续任务&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼163–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;任务取消&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任务取消&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;任务取消&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Task 中有一个专门的类 CancellationTokenSource 来取消任务执行 。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼164–&amp;gt;&lt;/p&gt;
&lt;p&gt;​	CancellationTokenSource 的功能不仅仅是取消任务执行，我们可以使用 source.CancelAfter (5000) 实现 5 秒后自动取消任务，也可以通过 source.Token.Register (Action action) 注册取消任务触发的回调函数，即任务被取消时注册的 action 会被执行 .&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼165–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;await-与-async&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#await-与-async&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;await&lt;/strong&gt; &lt;strong&gt;与&lt;/strong&gt; &lt;strong&gt;async&lt;/strong&gt;&lt;/h5&gt;
&lt;h4 id=&#34;异步方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步方法&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;异步方法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;异步方法必须用 async 修饰，方法名一般以 Async 结尾，这是一种命名规范&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼166–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;异步等待&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步等待&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;异步等待&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;如果某些方法的返回值，你需要立马得到结果才可以进行下一步操作时，可以使用 await 完成异步方法的完成。&lt;/p&gt;
&lt;h5 id=&#34;等待结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#等待结果&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;等待结果&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼167–&amp;gt;&lt;/p&gt;
&lt;p&gt;也可以这样拿结果&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼168–&amp;gt;&lt;/p&gt;
&lt;p&gt;productTask.Result 其实也是等待结果的作用。&lt;/p&gt;
&lt;h4 id=&#34;thread-与-task的区别面试点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#thread-与-task的区别面试点&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Thread&lt;/strong&gt; &lt;strong&gt;与&lt;/strong&gt; &lt;strong&gt;Task**** 的区别（面试点）&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Task 是基于 Thread 的，是比较高层级的封装（它是在线程池的基础之上）， Task 最终还是需要 Thread 来执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task 默认使用后台线程执行， Thread 默认使用前台线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task 可以有返回值， Thread 没有返回值 ， 虽然 Thread 可以通过 Start 方法参数来进行返回值处理，但十分不便。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task 可以执行后续操作， Thread 不能执行后续操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task 可取消任务执行， Thread 不行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常传播 ， Thread 在父方法上获取不到异常，而 Task 可以。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;并行任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并行任务&#34;&gt;❡&lt;/a&gt; 并行任务&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼169–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼170–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;threadlocalt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#threadlocalt&#34;&gt;❡&lt;/a&gt; Threadlocal&amp;lt;T&amp;gt;&lt;/h3&gt;
&lt;p&gt;多个线程共享一个变量，但每个线程都希望具有独立的数据版本。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼171–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;asynclocalt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#asynclocalt&#34;&gt;❡&lt;/a&gt; AsyncLocal&amp;lt;T&amp;gt;&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼172–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通道&#34;&gt;❡&lt;/a&gt; 通道&lt;/h3&gt;
&lt;p&gt;通道内部自动维护者一个线程安全的队列，数据的写入与读取可以在不同的线程上完成。&lt;/p&gt;
&lt;h4 id=&#34;channelt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#channelt&#34;&gt;❡&lt;/a&gt; Channel&amp;lt;T&amp;gt;&lt;/h4&gt;
&lt;h5 id=&#34;createunboundedt没有容量限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#createunboundedt没有容量限制&#34;&gt;❡&lt;/a&gt; CreateUnbounded&amp;lt;T&amp;gt;–没有容量限制&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼173–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;createboundedt有容量限制背压模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#createboundedt有容量限制背压模式&#34;&gt;❡&lt;/a&gt; CreateBounded&amp;lt;T&amp;gt;–有容量限制，背压模式&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼174–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;网络编程已经操作过一遍后续还需要学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络编程已经操作过一遍后续还需要学习&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;网络编程&lt;/strong&gt;（已经操作过一遍，后续还需要学习）&lt;/h3&gt;
&lt;h4 id=&#34;socket&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socket&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Socket&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;客户端代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端代码&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;客户端代码&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼175–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;服务端代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端代码&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;服务端代码&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼176–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;常用工具类还没完整学习后续还需要学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用工具类还没完整学习后续还需要学习&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;常用工具类&lt;/strong&gt;（还没完整学习，后续还需要学习）&lt;/h3&gt;
&lt;h4 id=&#34;1-压缩与解压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-压缩与解压缩&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;压缩与解压缩&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;将老师提供的 utils 文件夹 中的 ZipHelper.cs 类 复制到当前你的项目中&lt;/li&gt;
&lt;li&gt;ZipHelper 依赖于&lt;strong&gt; ICSharpCode.SharpZipLib.dll&lt;/strong&gt; ，通过 Nuget 可将其引用进来&lt;/li&gt;
&lt;li&gt;创建一个 winform 项目，布局如下&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;选择单文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择单文件&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;选择单文件&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼177–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;压缩单文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#压缩单文件&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;压缩单文件&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼178–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;选择多文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#选择多文件&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;选择多文件&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼179–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;压缩多文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#压缩多文件&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;压缩多文件&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼180–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;解压文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解压文件&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;解压文件&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼181–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;全部压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全部压缩&#34;&gt;❡&lt;/a&gt; 全部压缩&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼182–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼183–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;2-图片处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-图片处理&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;图片处理&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;从老师提供的 utils 文件夹中将 ImageHelper 类拷贝至当前你的项目中&lt;/li&gt;
&lt;li&gt;创建一个 winform 项目，布局如下&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;生成验证码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成验证码&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;生成验证码&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;布局：&lt;/p&gt;
&lt;p&gt;选择 tabcontrol，然后选择 pictureBox，PlaceholderText 进行输入内嵌文本&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼184–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;生成文字水印&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成文字水印&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;生成文字水印&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼185–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;生成图片水印&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成图片水印&#34;&gt;❡&lt;/a&gt; 生成图片水印&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼186–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;生成缩略图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成缩略图&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;生成缩略图&lt;/strong&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义好枚举，表示若干缩略图大小&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼187–&amp;gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;从老师提供的 utils 文件夹将 EnumHelper 文件拷贝至当前你的项目中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成缩略图&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼188–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3-npoi-操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-npoi-操作&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;3. NPOI&lt;/strong&gt; &lt;strong&gt;操作&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	NPOI，顾名思义，就是 POI 的.NET 版本。 那 POI 又是什么呢？ POI 是一套用 Java 写成的库，能够帮助开&lt;/p&gt;
&lt;p&gt;发者在没有安装微软 Office 的情况下读写 Office 97-2007 的文件， 支持的文件格式包括 xls，xlsx,&lt;/p&gt;
&lt;p&gt;doc,docx, ppt 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;读写速度快（有个国外的兄弟回复说，他原来用 ExcelPackage 生成用了 4-5 个小时，现在只需要 4-5 分钟）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;稳定性好（相对于用 Office OIA 而言，毕竟那东西是基于 Automation 做的，在 Server 上跑个 Automation 的东西， 想想都觉得可怕），跑过了将近 1000 个测试用例（来自于 POI 的 testcase 目录）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API 简单易用，当然这得感谢 POI 的设计师们 第五，完美支持 Excel 2003 格式（据说 myxls 无法正确读取 xls 模板，但 NPOI 可以），以后也许是所有 Office 2003 格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	大文件操作占内存，对于数据量较大的文件导入操作可能不太支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	Nuget 引用包：NPOI，microsoft.entityframeworkcore，microsoft.entityframeworkcore.sqlserver&lt;/p&gt;
&lt;h5 id=&#34;excel导入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#excel导入&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Excel**** 导入&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​	Html 代码&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼189–&amp;gt;&lt;/p&gt;
&lt;p&gt;第一种实现方式：&lt;/p&gt;
&lt;p&gt;注意点：id 得是 primary key 主键才行，不然会有很多问题。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼190–&amp;gt;&lt;/p&gt;
&lt;p&gt;第二种实现方式 （使用工具类）:&lt;/p&gt;
&lt;p&gt;​	从 utils 文件夹中拷贝 ExcelHelper 工具类至当前项目中，ExcelHelper 中对 IWorkBook 接口扩展了 Import 方法&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼191–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;excel-导出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#excel-导出&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Excel&lt;/strong&gt; &lt;strong&gt;导出&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​	ExcelHelper 中对 IWorkBook 接口扩展了 Export 方法&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼192–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;4-easyexcel-操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-easyexcel-操作&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;4. EasyExcel&lt;/strong&gt; &lt;strong&gt;操作&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;EasyExcel是一个简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	官网地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lYXN5ZXhjZWwub3BlbnNvdXJjZS5hbGliYWJhLmNvbS8lRUYlQkMlODglRTklOTglQkYlRTklODclOEMlRTUlODclQkElRTUlOTMlODElRUYlQkMlODk=&#34;&gt;https://easyexcel.opensource.alibaba.com/（阿里出品）&lt;/span&gt; ， UP 主也推荐使用 EasyExcel。&lt;/p&gt;
&lt;p&gt;​	Nuget 引用包： Rong.EasyExcel&lt;/p&gt;
&lt;p&gt;​	up 主试过使用 EasyExcel 对 100 万条数据的 excel 进行操作过，并无性能瓶颈。&lt;/p&gt;
&lt;h5 id=&#34;导入操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导入操作&#34;&gt;❡&lt;/a&gt; **	导入操作 **&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备实例类&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼193–&amp;gt;&lt;/p&gt;
&lt;p&gt;IgnoreColumn: 设置忽略某字段&lt;/p&gt;
&lt;p&gt;Display: 与 Excel 表头形成映射关系，Name 属性值必须要与表头的列名保持一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Program 类中将 EasyExcel 相关服务进行注册&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼194–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注入服务&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼195–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成导入&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼196–&amp;gt;&lt;/p&gt;
&lt;p&gt;注意：需要把多余的 sheet 删掉&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;导出操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导出操作&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;导出操作&lt;/strong&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;注入导出服务&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼197–&amp;gt;&lt;/p&gt;
&lt;p&gt;注意：需要把多余的 sheet 删掉&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;导出操作&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;注入导出服务&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼198–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现导出&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼199–&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;5-雪花算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-雪花算法&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;雪花算法&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;1-传统的主键策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-传统的主键策略&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;传统的主键策略&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;主键自增&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	传统的主键自增在分布式系统中极易出现主键重复情况，特别是在高并发的情况下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GUID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	 GUID 的主要目的是产生完全唯一的数字。在理想情况下，任何计算机和计算机集群都不会生成两个相&lt;/p&gt;
&lt;p&gt;同的 GUID。GUID 的总数也足够大，达到了 2&lt;sup&gt;128（3.4×10&lt;/sup&gt;38）个，所以随机生成两个相同 GUID 的可&lt;/p&gt;
&lt;p&gt;能性是非常小的，但并不为 0。所以，用于生成 GUID 的算法通常都加入了非随机的参数（如时间），以&lt;/p&gt;
&lt;p&gt;保证这种重复的情况不会发生。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;1、存储空间大（16 byte），因此它将会占用更多的磁盘大小。 如果你建的索引越多， 影响越严重。&lt;/p&gt;
&lt;p&gt;2、很难记忆。join 操作性能比整数要低。&lt;/p&gt;
&lt;p&gt;3、没有内置的函数获取最新产生的 guid 主键。&lt;/p&gt;
&lt;p&gt;4、GUID 做主键将会添加到表上的其他索引中，因此会降低性能，影响插入速度。&lt;/p&gt;
&lt;p&gt;5、GUID 之间比较大小相对数字慢不少， 影响查询速度&lt;/p&gt;
&lt;h5 id=&#34;2-snowflake算法-分布式id&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-snowflake算法-分布式id&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;2. SnowFlake&lt;strong&gt;&lt;strong&gt; 算法&lt;/strong&gt;&lt;/strong&gt; -&lt;strong&gt;&lt;strong&gt; 分布式&lt;/strong&gt;&lt;/strong&gt; ID&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;SnowFlake算法生成id的结果是一个64bit大小的整数 ,它是一个分布式ID,分布式ID 具有以下特点：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;毫秒数在高位，自增序列在低位，整个 ID 都是趋势递增的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作为 DB 表的主键，索引效率高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成 ID 的性能也是非常高的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高性能高可用：生成时不依赖于数据库，完全在内存中生成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容量大，每秒中能生成数百万的自增 ID。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以根据自身业务特性分配 bit 位，非常灵活。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。&lt;/li&gt;
&lt;li&gt;不是严格全局递增的 (有点像莫须有的罪名，也不算是缺点)。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3-原理结构图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-原理结构图&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;原理结构图&lt;/strong&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;1bit，不用，因为二进制中最高位是符号位，1 表示负数，0 表示正数。生成的 id 一般都是用整数，所以最高位固定为 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;41bit 时间戳，毫秒级。可以表示的数值范围是 （2^41-1），转换成单位年则是 69 年。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10bit 工作机器 ID，用来表示工作机器的 ID，包括 5 位 datacenterId 和 5 位 workerId。也就是最多可以部署 1024 台雪花机器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12bit 序列号，用来记录同毫秒内产生的不同 id，12 位可以表示的最大整数为 4095，来表示同一机器同一时间截（毫秒) 内产生的 4095 个 ID 序号。 如果超过这个数字，则会等下一毫秒再生成&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;服务一定需要开启才有用，而且端口号得用开启后的端口 6379 才行不然连接不上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redis-server.exe redis.windows.conf 执行该命令&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;4-net-实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-net-实现&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;4. .Net&lt;/strong&gt; &lt;strong&gt;实现&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;在提供的 utils 文件夹中拷贝 Snowflake 文件夹至当前项目中，里面包含了 IdWorker（雪花语法的具体实现）&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼200–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;5-雪花算法常见问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-雪花算法常见问题&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;雪花算法常见问题&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​	其实我们之前有提到工作机器 Id 的作用，就是用于解决分布式 Id 重复的问题，这个 workerId 是通过构造&lt;/p&gt;
&lt;p&gt;方法传入的，如果我们用 10 位来存储这个值，那就是最多支持 1024 个节点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WorkerId&lt;/strong&gt; &lt;strong&gt;重复问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	如果 workerId 相同，意味着在同一毫秒内，生成的雪花 Id 是有非常大的机率重复。虽然雪花 Id 共 64 位，但是同一毫秒，同一个 workerId ，意味着前 42+10 = 52 位 都是相同的数字，仅靠 剩下的 12 位序列号是很难保证分布式系统中雪花 ID 不重复。&lt;strong&gt;所以不同的服务器，它所用的&lt;strong&gt;&lt;strong&gt; WorkerId&lt;/strong&gt;&lt;/strong&gt; 必须不同&lt;/strong&gt;，这样才能尽可能的避免并发情况下 Id 重复问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 redis 中存储一个当前 workerId 的最大值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次生成 workerId 时，从 redis 中获取到当前 workerId 最大值，并 + 1 作为当前 workerId，并存入 redis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 workerId 为 1023，自增为 1024，则重置 0，作为当前 workerId，并存入 redis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IdWorker 这个类必须设置为单例模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目中添加 Nuget 包，搜索&lt;strong&gt; Microsoft.Extensions.Caching.StackExchangeRedis&lt;/strong&gt;（版本一定要比 redis 的版本低才行）&lt;/li&gt;
&lt;li&gt;优化雪花算法工具包封装类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;!–code￼201–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;linq-高级查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linq-高级查询&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Linq&lt;/strong&gt; &lt;strong&gt;高级查询&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;延迟执行与强制立即执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#延迟执行与强制立即执行&#34;&gt;❡&lt;/a&gt; 延迟执行与强制立即执行&lt;/h4&gt;
&lt;p&gt;LinQ 查询是延迟执行，运行到 foreach 语句处会跳回 select 语句处。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼202–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;linq实现的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linq实现的方式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Linq**** 实现的方式&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼203–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;联合查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#联合查询&#34;&gt;❡&lt;/a&gt; 联合查询&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼204–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;嵌套查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#嵌套查询&#34;&gt;❡&lt;/a&gt; 嵌套查询&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼205–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;linq-标准语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linq-标准语法&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Linq -&lt;/strong&gt; &lt;strong&gt;标准语法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼206–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼207–&amp;gt;&lt;/p&gt;
&lt;h1 id=&#34;技术篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术篇&#34;&gt;❡&lt;/a&gt; 技术篇&lt;/h1&gt;
&lt;h2 id=&#34;数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库&#34;&gt;❡&lt;/a&gt; 数据库&lt;/h2&gt;
&lt;h3 id=&#34;关系数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关系数据库&#34;&gt;❡&lt;/a&gt; 关系数据库&lt;/h3&gt;
&lt;h4 id=&#34;mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql&#34;&gt;❡&lt;/a&gt; MySQL&lt;/h4&gt;
&lt;p&gt;windows 身份验证&lt;/p&gt;
&lt;p&gt;SqlServer 身份验证&lt;/p&gt;
&lt;p&gt;127.0.0.1、localhost、查询 ip 地址是本地&lt;/p&gt;
&lt;p&gt;数据库操作：&lt;mark&gt;1、使用 SSMS 方式，2、T-SQL 方式&lt;/mark&gt;&lt;/p&gt;
&lt;h5 id=&#34;数据库的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的操作&#34;&gt;❡&lt;/a&gt; 数据库的操作&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼208–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;创建表操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建表操作&#34;&gt;❡&lt;/a&gt; 创建表操作&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼209–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;表约束&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表约束&#34;&gt;❡&lt;/a&gt; 表约束&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼210–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;表数据操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表数据操作&#34;&gt;❡&lt;/a&gt; 表数据操作&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼211–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;简单查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单查询&#34;&gt;❡&lt;/a&gt; 简单查询&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼212–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;条件查询-分组查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#条件查询-分组查询&#34;&gt;❡&lt;/a&gt; 条件查询、分组查询&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼213–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;嵌套查询操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#嵌套查询操作&#34;&gt;❡&lt;/a&gt; 嵌套查询操作&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼214–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;连接查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接查询&#34;&gt;❡&lt;/a&gt; 连接查询&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼215–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;oracle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oracle&#34;&gt;❡&lt;/a&gt; Oracle&lt;/h4&gt;
&lt;h4 id=&#34;sqlserver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlserver&#34;&gt;❡&lt;/a&gt; SqlServer&lt;/h4&gt;
&lt;h4 id=&#34;sqlite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlite&#34;&gt;❡&lt;/a&gt; SQLite&lt;/h4&gt;
&lt;h4 id=&#34;db2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#db2&#34;&gt;❡&lt;/a&gt; DB2&lt;/h4&gt;
&lt;h4 id=&#34;mariadb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mariadb&#34;&gt;❡&lt;/a&gt; MariaDB&lt;/h4&gt;
&lt;h4 id=&#34;postgresql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#postgresql&#34;&gt;❡&lt;/a&gt; PostgreSQL&lt;/h4&gt;
&lt;h3 id=&#34;非关系数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非关系数据库&#34;&gt;❡&lt;/a&gt; 非关系数据库&lt;/h3&gt;
&lt;h4 id=&#34;mongodb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mongodb&#34;&gt;❡&lt;/a&gt; MongoDb&lt;/h4&gt;
&lt;h4 id=&#34;redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;❡&lt;/a&gt; Redis&lt;/h4&gt;
&lt;h4 id=&#34;nosql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nosql&#34;&gt;❡&lt;/a&gt; NoSql&lt;/h4&gt;
&lt;h4 id=&#34;litedb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#litedb&#34;&gt;❡&lt;/a&gt; LiteDB&lt;/h4&gt;
&lt;h4 id=&#34;apache-cassandra&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache-cassandra&#34;&gt;❡&lt;/a&gt; Apache Cassandra&lt;/h4&gt;
&lt;h4 id=&#34;ravendb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ravendb&#34;&gt;❡&lt;/a&gt; RavenDB&lt;/h4&gt;
&lt;h4 id=&#34;couchdb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#couchdb&#34;&gt;❡&lt;/a&gt; CouchDB&lt;/h4&gt;
&lt;h3 id=&#34;搜索引擎&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索引擎&#34;&gt;❡&lt;/a&gt; 搜索引擎&lt;/h3&gt;
&lt;h4 id=&#34;elasticsearch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#elasticsearch&#34;&gt;❡&lt;/a&gt; ElasticSearch&lt;/h4&gt;
&lt;h4 id=&#34;solr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#solr&#34;&gt;❡&lt;/a&gt; Solr&lt;/h4&gt;
&lt;h4 id=&#34;sphinx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sphinx&#34;&gt;❡&lt;/a&gt; Sphinx&lt;/h4&gt;
&lt;h3 id=&#34;云数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云数据库&#34;&gt;❡&lt;/a&gt; 云数据库&lt;/h3&gt;
&lt;h4 id=&#34;azure-cosmosdb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#azure-cosmosdb&#34;&gt;❡&lt;/a&gt; Azure CosmosDB&lt;/h4&gt;
&lt;h4 id=&#34;amazon-dynamodb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#amazon-dynamodb&#34;&gt;❡&lt;/a&gt; Amazon DynamoDB&lt;/h4&gt;
&lt;h2 id=&#34;桌面篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#桌面篇&#34;&gt;❡&lt;/a&gt; 桌面篇&lt;/h2&gt;
&lt;h3 id=&#34;wpf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wpf&#34;&gt;❡&lt;/a&gt; WPF&lt;/h3&gt;
&lt;h3 id=&#34;winform&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#winform&#34;&gt;❡&lt;/a&gt; WinForm&lt;/h3&gt;
&lt;h2 id=&#34;linux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux&#34;&gt;❡&lt;/a&gt; Linux&lt;/h2&gt;
&lt;h2 id=&#34;rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq&#34;&gt;❡&lt;/a&gt; RabbitMq&lt;/h2&gt;
&lt;h2 id=&#34;web-开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-开发&#34;&gt;❡&lt;/a&gt; Web 开发&lt;/h2&gt;
&lt;h3 id=&#34;aspnet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aspnet&#34;&gt;❡&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FzcC5OZXQ=&#34;&gt;Asp.Net&lt;/span&gt; Core&lt;/h3&gt;
&lt;h4 id=&#34;mvc学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc学习&#34;&gt;❡&lt;/a&gt; MVC 学习&lt;/h4&gt;
&lt;h5 id=&#34;快速入门学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#快速入门学习&#34;&gt;❡&lt;/a&gt; 快速入门学习&lt;/h5&gt;
&lt;h6 id=&#34;mvc约定大于配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc约定大于配置&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Mvc&lt;/strong&gt;**：约定大于配置 **&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;控制器类加 Controller 后缀，而且都放在 Web 项目下的 Controllers 文件夹中，控制器类继承 Controller 基类。&lt;/li&gt;
&lt;li&gt;视图文件必须放在名称为 Views/Pages 的文件夹下的名称为控制器名称的文件夹中。&lt;/li&gt;
&lt;li&gt;_ViewStart.cshtml 执行任何 Action (控制器中以 IActionResult 为返回类型的方法叫 Action 方法) 之前，&lt;strong&gt;都会先执行它.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以下划线命名开头的视图一般作为布局 / ViewCompenent 视图，放在 shared 文件夹下面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;_ViewImport.cshtm 为全局视图文件公共命名空间的引用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;net5环境测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#net5环境测试&#34;&gt;❡&lt;/a&gt; .net5 环境测试&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼216–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼217–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼218–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;homehellocshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homehellocshtml&#34;&gt;❡&lt;/a&gt; Home/Hello.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼219–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentstudentlistcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentstudentlistcshtml&#34;&gt;❡&lt;/a&gt; Student/StudentList.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼220–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;homecontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homecontrollercs&#34;&gt;❡&lt;/a&gt; HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼221–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentcontrollercs&#34;&gt;❡&lt;/a&gt; StudentController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼222–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;_viewstartcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_viewstartcshtml&#34;&gt;❡&lt;/a&gt; _ViewStart.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼223–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;_viewimportscshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_viewimportscshtml&#34;&gt;❡&lt;/a&gt; _ViewImports.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼224–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;shared_layoutcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shared_layoutcshtml&#34;&gt;❡&lt;/a&gt; Shared/_Layout.cshtml&lt;/h6&gt;
&lt;p&gt;这是共享的文件，类似于导航栏，可用可不用，区分于_ViewStart.cshtml 的公共文件&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼225–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsstudentviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsstudentviewmodelcs&#34;&gt;❡&lt;/a&gt; Models/StudentViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼226–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;mvc项目结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc项目结构&#34;&gt;❡&lt;/a&gt; MVC 项目结构&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Dependencies：项目所依赖的组件&lt;/li&gt;
&lt;li&gt;launchSettings.json : 项目发布设置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼227–&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controllers: 存放所有的控制器&lt;/li&gt;
&lt;li&gt;Models： 存放所有的 ViewModel 文件&lt;/li&gt;
&lt;li&gt;Views: 存放所有的视图文件&lt;/li&gt;
&lt;li&gt;Views/Shared ： 存放公共的视图文件&lt;/li&gt;
&lt;li&gt;Views/Shared/_Layout.cshtml : 公共布局文件&lt;/li&gt;
&lt;li&gt;Views/Shared/Error.cshtml: 错误提示视图&lt;/li&gt;
&lt;li&gt;Views/_ViewImports.cshtml: 公共导入命名空间，引用公共的标签助手&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼228–&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views/_ViewStart.cshtml: 视图起始文件，所有视图在加载时，都会先加载此视图文件&lt;/li&gt;
&lt;li&gt;wwwroot： 存放所有的静态资源文件（css/js/html）&lt;/li&gt;
&lt;li&gt;wwwroot/favicon.ico : 应用程序的图标&lt;/li&gt;
&lt;li&gt;appsetting.json: 当前应用程序的配置文件&lt;/li&gt;
&lt;li&gt;appsetting.Development.json: 当前环境的配置文件，如果在此文件中未找到想要的配置，则会去 appsetting.json 文件中去寻找。&lt;/li&gt;
&lt;li&gt;Program：程序的主入口，用于初始化系统的相关配置，注册服务，配置中间件与注册管道。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;控制器动作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制器动作&#34;&gt;❡&lt;/a&gt; 控制器动作&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼229–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;action方法与普通方法的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#action方法与普通方法的区别&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Action**** 方法与普通方法的区别&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	Action 方法是由 Mvc 框架管理，&lt;strong&gt;Mvc 框架可以对 Action 方法进行处理与渲染（例如渲染视图，拦截请求等等），而普通则不受 mvc 控制&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	举个例子，ContentResult 通常的作用也是直接返回一个字符串，当我们执行 Content (「hello, 任我行码农场」) 时，我们只是告诉 Mvc 框架，我们需要返回 “hello, 任我行码农场” ，而&lt;strong&gt;并非立即返回&lt;/strong&gt;，Mvc 框架在此之后可能还会做很多的处理，或许在中间的某个环节，有可能请求被拦截，导致我们可能得到不同的结果（日后要讲的 AOPA 思想）。而 return 「hello, 任我行码农场」 则是立即返回。&lt;/p&gt;
&lt;h5 id=&#34;razor视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#razor视图&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Razor**** 视图&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;注释-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释-2&#34;&gt;❡&lt;/a&gt; 注释&lt;/h6&gt;
&lt;p&gt;ctrl+? 是所有注释，ctrl+/ 是每行都有注释&lt;/p&gt;
&lt;p&gt;viewmodel 是跟视图模型有关的数据，其他三个是无关的数据。&lt;/p&gt;
&lt;p&gt;既可以使用四种传值方式或者建立 Model 的方式。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼230–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼231–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentindexhellocshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentindexhellocshtml&#34;&gt;❡&lt;/a&gt; Student/IndexHello.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼232–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentaddcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentaddcshtml&#34;&gt;❡&lt;/a&gt; Student/Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼233–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersstudentcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersstudentcontrollercs&#34;&gt;❡&lt;/a&gt; Controllers/StudentController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼234–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;❡&lt;/a&gt; 总结&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼235–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;四种传值方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四种传值方式&#34;&gt;❡&lt;/a&gt; 四种传值方式：&lt;/h5&gt;
&lt;h5 id=&#34;视图传值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视图传值&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;视图传值&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;1-tempdataxxx-xxx需要强制转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-tempdataxxx-xxx需要强制转换&#34;&gt;❡&lt;/a&gt; 1、TempData [“xxx”] = xxx; 需要强制转换&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼236–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼237–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TempData 保存在 Session 中&lt;/strong&gt;，Controller 每次执行请求的时候，会从 Session 中先获取 TempData，而后清除 Session，获取完 TempData 数据，虽然保存在内部字典对象中，但是其集合中的每个条目访问一次后就从字典表中删 除。具体代码层面，TempData 获取过程是通过&lt;strong&gt; SessionStateTempDataProvider.LoadTempData 方法从 ControllerContext 的 Session 中读取数据，而后清除 Session&lt;/strong&gt;，故&lt;strong&gt; TempData 只能跨 Controller 传递一次&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼238–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewbag-与-viewdata&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewbag-与-viewdata&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;ViewBag&lt;/strong&gt; &lt;strong&gt;与&lt;/strong&gt; &lt;strong&gt;ViewData&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;ViewData:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ViewData 只在当前 Action 中有效，生命周期和 View 相同；&lt;/p&gt;
&lt;h6 id=&#34;2-viewdataxxx-xxx需要强制转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-viewdataxxx-xxx需要强制转换&#34;&gt;❡&lt;/a&gt; 2、ViewData [「xxx」] = xxx; 需要强制转换&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼239–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼240–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼241–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ViewBag&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ViewBag 其实本质就是 ViewData，只是&lt;strong&gt;多了层 Dynamic 控制&lt;/strong&gt;。所以，使用何种方式完全取决于你的个人爱好。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼242–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼243–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;3-viewbagxxx-xxx不需要强制转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-viewbagxxx-xxx不需要强制转换&#34;&gt;❡&lt;/a&gt; 3、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1ZpZXdCYWcueHh4&#34;&gt;ViewBag.xxx&lt;/span&gt; = xxx; 不需要强制转换&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼244–&amp;gt;&lt;/p&gt;
&lt;p&gt;两者区别如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、ViewData 和 TempData 是&lt;strong&gt;字典类型&lt;/strong&gt;，赋值方式用字典方式，ViewData [「myName」]&lt;/p&gt;
&lt;p&gt;2、ViewBag 是动态类型，使用时直接添加属性赋值即可 ViewBag.myName&lt;/p&gt;
&lt;p&gt;3、ViewBag 和 ViewData&lt;strong&gt; 只在当前 Action 中有效&lt;/strong&gt;，等同于 View&lt;/p&gt;
&lt;p&gt;4、TempData 可以通过转向继续使用 (Server.Tranfer ())，因为它的值保存在 Session 中。但 TempData 只能经过一次传递，之后会被系统自动清除 (Framework)&lt;/p&gt;
&lt;p&gt;5、ViewData 和 ViewBag 中的值可以互相访问，因为 ViewBag 的实现中包含了 ViewData&lt;/p&gt;
&lt;h6 id=&#34;4-viewmodel&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-viewmodel&#34;&gt;❡&lt;/a&gt; 4、ViewModel&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼245–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http&#34;&gt;❡&lt;/a&gt; Http&lt;/h4&gt;
&lt;h5 id=&#34;前置知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前置知识&#34;&gt;❡&lt;/a&gt; 前置知识&lt;/h5&gt;
&lt;p&gt;客户端与服务端之间的通讯是否也需要某种协议？&lt;/p&gt;
&lt;p&gt;答：http 协议. http 协议是一种未进行加密处理，由服务器传输超文本到本地浏览器传输协议。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 TCP/IP 的高级协议 (Socket)&lt;/li&gt;
&lt;li&gt;默认端口号：80&lt;/li&gt;
&lt;li&gt;基于请求 / 响应模型的:&lt;strong&gt; 一次请求对应一次响应&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;无状态的：&lt;strong&gt;每次请求之间相互独立，不能交互数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HTTP 协议在应用层&lt;/li&gt;
&lt;li&gt;最初的目的是为了提供一种发布和接收 HTML 页面的方法&lt;/li&gt;
&lt;li&gt;规定了客户端和服务器之间通信格式&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;http-的通信流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-的通信流程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Http&lt;/strong&gt; &lt;strong&gt;的通信流程&lt;/strong&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;建立 TCP 连接&lt;/li&gt;
&lt;li&gt;客户端向服务端发送命令&lt;/li&gt;
&lt;li&gt;客户端发送请求头信息&lt;/li&gt;
&lt;li&gt;服务器应答&lt;/li&gt;
&lt;li&gt;服务器发送应答头信息&lt;/li&gt;
&lt;li&gt;服务器向客户端发送数据（静态资源，html/css/js）&lt;/li&gt;
&lt;li&gt;服务器关闭 TCP 连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码：&lt;strong&gt;Connection:keep-alive&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP 连接在发送后将仍然保持打开状态&lt;/strong&gt;，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。&lt;/p&gt;
&lt;h5 id=&#34;url与uri的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url与uri的区别&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;URL&lt;strong&gt;&lt;strong&gt; 与&lt;/strong&gt;&lt;/strong&gt; URI**** 的区别&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;什么是uri&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是uri&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;什么是 ****URI&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;URI 统一资源标识符（Uniform Resource Identifiers, URI），用来唯一识别一个资源，可以把它理解为你的身份证号。&lt;/p&gt;
&lt;p&gt;作用：Web 上可用的资源如 HTML 文档，图像，视频等都是以 URI 来定位的。&lt;/p&gt;
&lt;h6 id=&#34;什么是url&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是url&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;什么是 ****URL&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;URL 统一资源定位符（ Uniform Resource Locator ），可以把它理解为你身份证上地址。&lt;/p&gt;
&lt;p&gt;是互联网上用来标识某一处资源的地址。&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可以用来标识一个资源，而且还指明了如果定位这个资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URL 是 internel 上用来描述信息资源的字符串，主要用在各种 www 程序上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;URI 是一种抽象的，高层次概念定义统一资源标识&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个 URL 都是一个 URI，但每一个 URI 并不一定是 URL，因为 URI 还包括另外一个子类 URN（统一资源命名），它命名资源但不负责定位资源（姓名 + 你的地址 = 你的身份证号）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URL 就是通过定位的方式来实现 URI 的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;消息数据格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消息数据格式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;消息数据格式&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;请求消息格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#请求消息格式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;请求消息格式&lt;/strong&gt;&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;!–code￼246–&amp;gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;请求方式：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HTTP 协议有 8 中请求方式：&lt;/p&gt;
&lt;p&gt;① GET：请求获取 Request-URI 所标识的资源。&lt;/p&gt;
&lt;p&gt;② POST：在 Request-URI 所标识的资源后附加新的数据。&lt;/p&gt;
&lt;p&gt;③ HEAD：请求获取由 Request-URI 所标识的资源的响应消息报头。&lt;/p&gt;
&lt;p&gt;④ PUT：请求服务器存储一个资源，并用 Request-URI 作为其标识。&lt;/p&gt;
&lt;p&gt;⑤ DELETE：请求服务器删除 Request-URI 所标识的资源。&lt;/p&gt;
&lt;p&gt;⑥ TRACE：请求服务器回送收到的请求信息，主要用于测试或诊断。&lt;/p&gt;
&lt;p&gt;⑦ CONNECT：HTTP 1.1 协议中预留给能够将连接改为管道方式的代理服务器。&lt;/p&gt;
&lt;p&gt;⑧ OPTIONS：请求查询服务器的性能，或者查询与资源相关的选项和需求。&lt;/p&gt;
&lt;p&gt;常用的有 2 种&lt;/p&gt;
&lt;p&gt;GET：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求参数在请求行中，在 url 后。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求的 url 长度有限制的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不太安全&lt;/li&gt;
&lt;li&gt;可被收藏到书签，也可被缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求参数在请求体中&lt;/li&gt;
&lt;li&gt;请求的 url 长度没有限制的&lt;/li&gt;
&lt;li&gt;相对安全&lt;/li&gt;
&lt;li&gt;请求头：客户端浏览器告诉服务器一些信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;!–code￼247–&amp;gt;&lt;/p&gt;
&lt;p&gt;常见的请求头：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作用： 可以在服务器端获取该头的信息，解决浏览器的兼容性问题&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Referer：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdC9sb2dpbi5odG1s&#34;&gt;http://localhost/login.html&lt;/span&gt; ，告诉服务器，我 (当前请求) 从哪里来。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防盗链：&lt;/li&gt;
&lt;li&gt;统计工作：&lt;/li&gt;
&lt;li&gt;请求空行 ：就是用于分割 POST 请求的请求头，和请求体的。&lt;/li&gt;
&lt;li&gt;请求体 (正文)： 封装 POST 请求消息的请求参数的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字符串格式：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼248–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;响应数据格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#响应数据格式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;响应数据格式&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;响应消息：服务器端发送给客户端的数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼249–&amp;gt;&lt;/p&gt;
&lt;p&gt;响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态，状态码都是 3 位数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1xx：服务器接收客户端消息，但没有接受完成，等待一段时间后，发送 1xx 状态码&lt;/p&gt;
&lt;p&gt;2xx：成功。代表：200&lt;/p&gt;
&lt;p&gt;3xx：重定向。代表：302 (重定向)，304 (访问缓存)&lt;/p&gt;
&lt;p&gt;4xx：客户端错误。代表：404（请求路径没有对应的资源）405：请求方式没有对应的方法， 401 未授权，403?&lt;/p&gt;
&lt;p&gt;5xx：服务器端错误。代表：500 (服务器内部出现异常)，503：网关出现问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应头&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼250–&amp;gt;&lt;/p&gt;
&lt;p&gt;常见的响应头：&lt;/p&gt;
&lt;p&gt;Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式&lt;/p&gt;
&lt;p&gt;Content-disposition：服务器告诉客户端以什么格式打开响应体数据值&lt;/p&gt;
&lt;p&gt;attachment;filename=xxx：以附件形式打开响应体。文件下载&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器返回的数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应字符串格式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼251–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;http-各版本简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-各版本简介&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;HTTP&lt;/strong&gt; &lt;strong&gt;各版本简介&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;HTTP 1.0 : 规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个 TCP 连接，服务器完成请求处理后立即断&lt;/p&gt;
&lt;p&gt;开 TCP 连接，服务器不跟踪每个客户也不记录过去的请求 。连接无法复用&lt;/p&gt;
&lt;p&gt;HTTP1.1 :&lt;/p&gt;
&lt;p&gt;复用连接（keep-alive）&lt;/p&gt;
&lt;p&gt;缓存处理&lt;/p&gt;
&lt;p&gt;身份认证， 状态管理&lt;/p&gt;
&lt;h6 id=&#34;http-11状态代码及其含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-11状态代码及其含义&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;HTTP 1.1**** 状态代码及其含义&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：&lt;/p&gt;
&lt;p&gt;1xx ：指示信息–表示请求已接收，继续处理&lt;/p&gt;
&lt;p&gt;2xx ：成功–表示请求已被成功接收、理解、接受&lt;/p&gt;
&lt;p&gt;3xx ：重定向–要完成请求必须进行更进一步的操作&lt;/p&gt;
&lt;p&gt;4xx ：客户端错误–请求有语法错误或请求无法实现&lt;/p&gt;
&lt;p&gt;5xx ：服务器端错误–服务器未能实现合法的请求&lt;/p&gt;
&lt;p&gt;HTTP2.0 :&lt;/p&gt;
&lt;h6 id=&#34;多路复用-multiplexing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多路复用-multiplexing&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;多路复用&lt;/strong&gt; &lt;strong&gt;(Multiplexing)&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;即连接共享，即每一个 request 都是是用作连接共享机制的。一个 request 对应一个 id，这样一个连接上可以有多个 request，每个连接&lt;/p&gt;
&lt;p&gt;的 request 可以随机的混杂在一起，&lt;strong&gt;接收方可以根据 request 的 id 将 request 再归属到各自不同的服务端请求里面&lt;/strong&gt;。多路复用原理和 keepalive 区别如下图:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二进制分帧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP1.x 的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 的组合。基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首部压缩（&lt;strong&gt;&lt;strong&gt;Header Compression&lt;/strong&gt;&lt;/strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上文中所言，对前面提到过 HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 headerfields 表，既避免了重复 header 的传输，又减小了需要传输的大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务端推送（&lt;strong&gt;&lt;strong&gt;Server Push&lt;/strong&gt;&lt;/strong&gt;）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务端推送是一种在客户端请求之前发送数据的机制。在 HTTP/2 中，服务器可以对客户端的一个请求发送多个响应。Server Push 让 HTTP1.x 时代使用内嵌资源的优化手段变得没有意义；如果一个请求是由你的主页发起的，服务器很可能会响应主页内容、logo 以及样式表，因为它知道客户端会用到这些东西。这相当于在一个 HTML 文档内集合了所有的资源，不过与之相比，服务器推送还有一个很大的优势：可以缓存！也让在遵循同源的情况下，不同页面之间可以共享缓存资源成为可能。&lt;/p&gt;
&lt;h6 id=&#34;http-30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-30&#34;&gt;❡&lt;/a&gt; HTTP 3.0&lt;/h6&gt;
&lt;p&gt;HTTP3.0，也称作 HTTP over QUIC。HTTP3.0 的核心是 QUIC (读音 quick) 协议，由 Google 在 2015 年提出的 SPDY v3 演化而来的新协议，传统的 HTTP 协议是基于传输层 TCP 的协议，而 QUIC 是基于传输层 UDP 上的协议，可以定义成：HTTP3.0 基于 UDP 的安全可靠的 HTTP2.0 协议。&lt;/p&gt;
&lt;p&gt;QUIC 协议针对基于 TCP 和 TLS 的 HTTP2.0 协议解决了下面的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1&lt;/strong&gt; &lt;strong&gt;减少了&lt;strong&gt;&lt;strong&gt; TCP&lt;/strong&gt;&lt;/strong&gt; 三次握手及&lt;strong&gt;&lt;strong&gt; TLS&lt;/strong&gt;&lt;/strong&gt; 握手时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不管是 HTTP1.0/1.1 还是 HTTPS，HTTP2.0，都使用了 TCP 进行传输。HTTPS 和 HTTP2 还需要使用 TLS 协议来进行安全传输。这就出现了两个握手延迟，而基于 UDP 协议的 QUIC，因为 UDP 本身没有连接的概念，连接建立时只需要一次交互，半个握手的时间。区别如下图:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2&lt;/strong&gt; &lt;strong&gt;多路复用丢包的线头阻塞问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;QUIC 保留了 HTTP2.0 多路复用的特性，在之前的多路复用过程中，同一个 TCP 连接上有多个 stream，假如其中一个 stream 丢包，在重传前后的 stream 都会受到影响，而 QUIC 中一个连接上的多个 stream 之间没有依赖。所以当发生丢包时，只会影响当前的 stream，也就避免了线头阻塞问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3&lt;/strong&gt; &lt;strong&gt;优化重传策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以往的 TCP 丢包重传策略是：在发送端为每一个封包标记一个编号 (sequence number)，接收端在收到封包时，就会回传一个带有对应编号的 ACK 封包给发送端，告知发送端封包已经确实收到。当发送端在超过一定时间之后还没有收到回传的 ACK，就会认为封包已经丢失，启动重新传送的机制，复用与原来相同的编号重新发送一次封包，确保在接收端这边没有任何封包漏接。这样的机制就会带来一些问题，假设发送端总共对同一个封包发送了两次 (初始＋重传)，使用的都是同一个 sequence number: 编号 N。之后发送端在拿到编号 N 封包的回传 ACK 时，将无法判断这个带有编号 N 的 ACK，是接收端在收到初始封包后回传的 ACK。这就会加大后续的重传计算的耗时。QUIC 为了避免这个问题，发送端在传送封包时，初始与重传的每一个封包都改用一个新的编号，unique packet number，每一个编号都唯一而且严格递增，这样每次在收到 ACK 时，就可以依据编号明确的判断这个 ACK 是来自初始封包或者是重传封包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.4&lt;/strong&gt; &lt;strong&gt;流量控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过流量控制可以限制客户端传输资料量的大小，有了流量控制后，接收端就可以只保留相对应大小的接收 buffer , 优化记忆体被占用的空间。但是如果存在一个流量极慢的 stream ，光一个 stream 就有可能估用掉接收端所有的资源。QUIC 为了避免这个潜在的 HOLBlocking，采用了连线层 (connection flow control) 和 Stream 层的 (streamflow control) 流量控制，限制单一 Stream 可以占用的最大 buffer size。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.5&lt;/strong&gt; &lt;strong&gt;连接迁移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP 连接基于四元组（源 IP、源端口、目的 IP、目的端口)，切换网络时至少会有一个因素发生变化，导致连接发生变化。当连接发生变化时，如果还使用原来的 TCP 连接，则会导致连接失败，就得等原来的连接超时后重新建立连接，所以我们有时候发现切换到一个新网络时，即使新网络状况良好，但内容还是需要加载很久。如果实现得好，当检测到网络变化时立刻建立新的 TCP 连接，即使这样，建立新的连接还是需要几百毫秒的时间。QUIC 的连接不受四元组的影响，当这四个元素发生变化时，原连接依然维持。QUIC 连接不以四元组作为标识，而是使用一个 64 位的随机数，这个随机数被称为 Connection lD，对应每个 stream，即使 IP 或者端口发生变化，只要 Connection ID 没有变化，那么连接依然可以维持。&lt;/p&gt;
&lt;h5 id=&#34;什么是https&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是https&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;什么是 ****HTTPS&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;HTTP 协议传输的数据都是未加密的。为了保证这些隐私数据能加密传输，于是网景公司设计了 SSL （Secure Sockets Layer）协议用于对 HTTP 协议传输的数据进行加密，从而就诞生了 HTTPS 。现在的 HTTPS 都是用的 TLS 协议，但是由于 SSL 出现的时间比较早，并且依旧被现在浏览器所支持，因此 SSL 依然是 HTTPS 的代名词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPS 默认端口号是 443.（http 协议默认端口号是 80）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPS&lt;strong&gt;&lt;strong&gt; 与&lt;/strong&gt;&lt;/strong&gt; HTTP**** 的一些区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTPS 协议需要到&lt;strong&gt; CA 申请证书&lt;/strong&gt;，一般免费证书很少，需要交费。&lt;/li&gt;
&lt;li&gt;HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 TLS 加密传输协议。&lt;/li&gt;
&lt;li&gt;HTTP 和 HTTPS 使用的是完全不同的连接方式，用的默认端口也不一样，前者是 80，后者是 443.&lt;/li&gt;
&lt;li&gt;HTTPS 的连接很简单，HTTPS 协议是由 TLS+HTTP 协议构建的 可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;httpcontext上下文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#httpcontext上下文&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;HttpContext**** 上下文&lt;/strong&gt;&lt;/h5&gt;
&lt;h5 id=&#34;1-请求案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-请求案例&#34;&gt;❡&lt;/a&gt; 1、请求案例&lt;/h5&gt;
&lt;p&gt;首先需要先跳转到 requesttest/search 下的页面进行搜索提交，然后断点处才会出现结果，否则为 null。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼252–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼253–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;2-httpcontext&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-httpcontext&#34;&gt;❡&lt;/a&gt; 2、HttpContext&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼254–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;错误写法1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#错误写法1&#34;&gt;❡&lt;/a&gt; 错误写法 1&lt;/h6&gt;
&lt;p&gt;显示不出结果为空&lt;/p&gt;
&lt;h6 id=&#34;homecontrollerindex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homecontrollerindex&#34;&gt;❡&lt;/a&gt; homeController/index&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼255–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;serviceistudentservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serviceistudentservicecs&#34;&gt;❡&lt;/a&gt; Service/IStudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼256–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicestudentservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicestudentservicecs&#34;&gt;❡&lt;/a&gt; Service/StudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼257–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;错误写法2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#错误写法2&#34;&gt;❡&lt;/a&gt; 错误写法 2&lt;/h6&gt;
&lt;p&gt;可以显示出输入的参数，但是如果多个方法的话需要传参多次，不方便也很麻烦。&lt;/p&gt;
&lt;h6 id=&#34;homecontrollerindex-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homecontrollerindex-2&#34;&gt;❡&lt;/a&gt; homeController/index&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼258–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;serviceistudentservicecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serviceistudentservicecs-2&#34;&gt;❡&lt;/a&gt; Service/IStudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼259–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicestudentservicecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicestudentservicecs-2&#34;&gt;❡&lt;/a&gt; Service/StudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼260–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;正确写法-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正确写法-2&#34;&gt;❡&lt;/a&gt; 正确写法&lt;/h6&gt;
&lt;h6 id=&#34;homecontrollerindex-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homecontrollerindex-3&#34;&gt;❡&lt;/a&gt; homeController/index&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼261–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;serviceistudentservicecs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serviceistudentservicecs-3&#34;&gt;❡&lt;/a&gt; Service/IStudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼262–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicestudentservicecs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicestudentservicecs-3&#34;&gt;❡&lt;/a&gt; Service/StudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼263–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;startupcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#startupcs&#34;&gt;❡&lt;/a&gt; Startup.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼264–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;❡&lt;/a&gt; 总结&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼265–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼266–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;3-httprequest&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-httprequest&#34;&gt;❡&lt;/a&gt; 3、HttpRequest&lt;/h5&gt;
&lt;h6 id=&#34;requestcontrolleradd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requestcontrolleradd&#34;&gt;❡&lt;/a&gt; RequestController/add&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼267–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;requestaddcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requestaddcshtml&#34;&gt;❡&lt;/a&gt; Request/Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼268–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;4-httpresponse&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-httpresponse&#34;&gt;❡&lt;/a&gt; 4、HttpResponse&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼269–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;5-http响应体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-http响应体&#34;&gt;❡&lt;/a&gt; 5、Http 响应体&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼270–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;中间件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中间件&#34;&gt;❡&lt;/a&gt; 中间件&lt;/h4&gt;
&lt;p&gt;概念：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1BU1AtbHA2ZS5ORVQ=&#34;&gt;在 ASP.NET&lt;/span&gt; Core 中，&lt;strong&gt;中间件 (Middleware) 是一个可以处理 HTTP 请求或响应的软件管道&lt;/strong&gt;。 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FTUC5ORVQ=&#34;&gt;ASP.NET&lt;/span&gt; Core 中给中间件组件的定位是具有非常特定的用途。例如，我们可能有需要一个中间件组件验证用户，另一个中间件来处理错误，另一个中间件来提供静态文件，如 JavaScript 文件，CSS 文件，图片等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中间件就是用于组成应用程序管道来处理请求和响应的组件 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中间件可以认为有两个基本的职责：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择是否将请求传递给管道中的下一个中间件。&lt;/li&gt;
&lt;li&gt;可以在管道中的下一个中间件前后执行一些工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1BU1AtdTY4ZHJ0ZnBrY2EzNGpvNjhidm4xYXY0MWMyZDBhZDgzYzZldC5ORVQ=&#34;&gt;我们使用这些中间件组件在 ASP.NET&lt;/span&gt; Core 中设置请求处理管道，而正是这管道决定了如何处理请求。 而请求管道是由 &lt;strong&gt;Startup.cs 文件中的 Configure（） 方法进行配置&lt;/strong&gt;，它也是应用程序启动的一个重要部分。&lt;/p&gt;
&lt;p&gt;误区：&lt;strong&gt;面试官说的中间件是指第三方组件&lt;/strong&gt;，而这边学习的是中间件 (Middleware) 是一个可以处理 HTTP 请求或响应的软件管道。&lt;/p&gt;
&lt;h5 id=&#34;net5以上&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#net5以上&#34;&gt;❡&lt;/a&gt; .net5 以上&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼271–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;net5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#net5&#34;&gt;❡&lt;/a&gt; .net5&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼272–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;管道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道&#34;&gt;❡&lt;/a&gt; 管道&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;.Net Core**** 管道（&lt;strong&gt;&lt;strong&gt;pipeline&lt;/strong&gt;&lt;/strong&gt;）是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单来说，就是&lt;strong&gt;从发起请求到返回结果的一个过程&lt;/strong&gt;，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS0zZHMuTmV0&#34;&gt;在.Net&lt;/span&gt; Core 中这里面的处理是由中间件（middleware）来完成。 管道机制解释 用户在发起请求后，系统会自动生成一个请求管道（request pipeline），在这个请求管道中，可以通过 run、map 和 use 方法来配置请求委托 (RequestDelegate)，而在单独的请求委托中定义的可重用的类和并行的匿名方法即为中间件，也叫做中间件组件。当发起请求后，系统会创建一个请求管道，在这个管道中，每一个中间件都会按顺序处理（可能会执行，也可能不会被执行，取决于具体的业务逻辑），等最后一个中间件处理完后，又会&lt;strong&gt;按照相反的方向返回最终的处理结果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，如果您有一个日志记录中间件，它可能只是记录请求的时间，它处理完毕后将请求传递给下一个中间件以进行进一步处理。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼273–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;中间件顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中间件顺序&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;中间件顺序&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;下图显示了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FTUC5ORVQ=&#34;&gt;ASP.NET&lt;/span&gt; Core MVC 和 Razor Pages 应用的完整请求处理管道。 你可以在典型应用中了解现有中间件的顺序，以及&lt;strong&gt;在哪里添加自定义中间件&lt;/strong&gt;。 你可以完全控制如何重新排列现有中间件，或根据场景需要注入新的自定义中间件。&lt;/p&gt;
&lt;h5 id=&#34;短路方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#短路方式&#34;&gt;❡&lt;/a&gt; 短路方式&lt;/h5&gt;
&lt;p&gt;​	中间件组件可以处理请求，并决定不调用管道中的下一个中间件，从而使管道短路，官方微软给了一个英文的名字叫 “terminalmiddleware” , 翻译为 “终端中间件”。短路通常是被允许的，因为它&lt;strong&gt;可以避免一些不必要的工作&lt;/strong&gt;。 例如，如果请求的是像图像或 css 文件这样的静态文件，则 StaticFiles 中间件可以处理和服务该请求并使管道中的其余部分短路。这个意思就是说，在我们的示例中，如果请求是针对静态文件，则 Staticile 中间件不会调用 MVC 中间件，避免一些无谓的操作&lt;/p&gt;
&lt;p&gt;1、注释方式&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼274–&amp;gt;&lt;/p&gt;
&lt;p&gt;2、app.run 方式&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼275–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;appuse-与-apprun-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appuse-与-apprun-的区别&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;app.Use&lt;/strong&gt; &lt;strong&gt;与&lt;/strong&gt; &lt;strong&gt;app.Run&lt;/strong&gt; &lt;strong&gt;的区别&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;它俩都可以添加一个中间件至请求管道中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use 有权决定是否执行下一个中间件，如果不执行，则出现短路情况&lt;/li&gt;
&lt;li&gt;Run 是直接短路，不会执行后面的中间件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;终端节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#终端节点&#34;&gt;❡&lt;/a&gt; 终端节点&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼276–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;路由中间件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由中间件&#34;&gt;❡&lt;/a&gt; 路由中间件&lt;/h5&gt;
&lt;h6 id=&#34;路由模板&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由模板&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;路由模板：&lt;/strong&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;在启动时 Program.cs 或在属性中定义。&lt;/li&gt;
&lt;li&gt;描述 URL 路径如何与操作相匹配。&lt;/li&gt;
&lt;li&gt;用于生成链接的 URL。 生成的链接通常在响应中返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作既支持传统路由，也支持属性路由。 通过在控制器或操作上放置路由可实现属性路由。 有关详细信息，请参阅混合路由。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼277–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;设置传统路由&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置传统路由&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;设置传统路由&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼278–&amp;gt;&lt;/p&gt;
&lt;p&gt;路由模板 「{controller=Home}/{action=Index}/{id?}」 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配 URL 路径，例如 /Products/Details/5&lt;/li&gt;
&lt;li&gt;通过标记路径来提取路由值 {controller = Products, action = Details, id = 5} 。 如果应用有一个名为 ProductsController 的控制器和一个 Details 操作，则提取路由值会导致匹配：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!–code￼279–&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/Products/Details/5 模型绑定 id = 5 的值，以将 id 参数设置为 5 。 有关更多详细信息，请参阅模型绑定。&lt;/li&gt;
&lt;li&gt;{controller=Home} 将 Home 定义为默认 controller 。&lt;/li&gt;
&lt;li&gt;{action=Index} 将 Index 定义为默认 action 。&lt;/li&gt;
&lt;li&gt;{id?} 中的？字符将 id 定义为可选。&lt;/li&gt;
&lt;li&gt;默认路由参数和可选路由参数不必包含在 URL 路径中进行匹配。 有关路由模板语法的详细说明，请参阅路由模板参考。&lt;/li&gt;
&lt;li&gt;匹配 URL 路径 / 。&lt;/li&gt;
&lt;li&gt;生成路由值 {controller = Home, action = Index} 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;controller 和 action 的值使用默认值。 id 不会生成值，因为 URL 路径中没有相应的段。 / 仅在存在 HomeController 和 Index 操作时匹配：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼280–&amp;gt;&lt;/p&gt;
&lt;p&gt;使用前面的控制器定义和路由模板，为以下 URL 路径运行 HomeController.Index 操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/Home/Index/17&lt;/li&gt;
&lt;li&gt;/Home/Index&lt;/li&gt;
&lt;li&gt;/Home&lt;/li&gt;
&lt;li&gt;/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;URL 路径 / 使用路由模板默认 Home 控制器和 Index 操作。 URL 路径 /Home 使用路由模板默认 Index 操作。&lt;/p&gt;
&lt;p&gt;简便方法 MapDefaultControllerRoute：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼281–&amp;gt;&lt;/p&gt;
&lt;p&gt;替代：&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼282–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼283–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;属性路由&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性路由&#34;&gt;❡&lt;/a&gt; 属性路由&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼284–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;路由约束&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由约束&#34;&gt;❡&lt;/a&gt; 路由约束&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼285–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;疑惑解答&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#疑惑解答&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;疑惑解答：&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;当访问一个 ****Web&lt;/strong&gt; ** 应用地址时，**&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FzcC5OZXQ=&#34;&gt;Asp.Net&lt;/span&gt; Core&lt;/strong&gt; &lt;strong&gt;是怎么执行到&lt;/strong&gt; Controller &lt;strong&gt;的&lt;/strong&gt; Action &lt;strong&gt;的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：程序启动的时候会把所有的 Controller 中的 Action 映射存储到 routeOptions 的集合中，Action 映射成 Endpoint 终结者 的 RequestDelegate 委托属性，最后通过 UseEndPoints 添加 EndpointMiddleware 中间件进行执行，同时这个中间件中的 Endpoint 终结者路由已经是通过 Rouing 匹配后的路由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; EndPoint &lt;strong&gt;跟普通路由又存在着什么样的关系？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答： Ednpoint 终结者路由是普通路由 map 转换后的委托路由，里面包含了路由方法的所有元素信息 EndpointMetadataCollection 和 RequestDelegate 委托。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; UseRouing() &lt;strong&gt;、&lt;/strong&gt; UseAuthorization() &lt;strong&gt;、&lt;/strong&gt; UseEndpoints() &lt;strong&gt;这三个中间件的关系是什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答： UseRouing 中间件主要是路由匹配，找到匹配的终结者路由 Endpoint ； UseEndpoints 中间件主要针对 UseRouing 中间件匹配到的路由进行 委托方法的执行等操作。 UseAuthorization 中间件主要针对 UseRouing 中间件中匹配到的路由进行拦截 做授权验证操作等，通过则执行下一个中间件 UseEndpoints () , 具体的关系可以看下面的流程图：&lt;/p&gt;
&lt;p&gt;上面流程图中省略了一些部分，主要是把 UseRouing 、UseAuthorization 、UseEndpoint 这三个中间件的关系突显出来。&lt;/p&gt;
&lt;h5 id=&#34;异常中间件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常中间件&#34;&gt;❡&lt;/a&gt; 异常中间件&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼286–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼287–&amp;gt;&lt;/p&gt;
&lt;p&gt;这个页面的出现是选择了选择调试才出现的.&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼288–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;launchsettingsjson&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#launchsettingsjson&#34;&gt;❡&lt;/a&gt; launchSettings.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼289–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼290–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;静态资源中间件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态资源中间件&#34;&gt;❡&lt;/a&gt; 静态资源中间件&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼291–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session&#34;&gt;❡&lt;/a&gt; Session&lt;/h5&gt;
&lt;p&gt;这里的问题是没有加入 httpcontext… 上下文服务所导致的&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼292–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;session相关属性与配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session相关属性与配置&#34;&gt;❡&lt;/a&gt; Session 相关属性与配置&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼293–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;session存储序列化对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session存储序列化对象&#34;&gt;❡&lt;/a&gt; Session 存储序列化对象&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼294–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;session扩展方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#session扩展方法&#34;&gt;❡&lt;/a&gt; Session 扩展方法&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼295–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;扩展方法需要放在utils文件下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展方法需要放在utils文件下&#34;&gt;❡&lt;/a&gt; 扩展方法需要放在 Utils 文件下&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼296–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;对象序列化-protobuf-net&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象序列化-protobuf-net&#34;&gt;❡&lt;/a&gt; 对象序列化 - ProtoBuf-Net&lt;/h5&gt;
&lt;p&gt;nuget 安装 protobuf-net&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼297–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;视图与模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视图与模型&#34;&gt;❡&lt;/a&gt; 视图与模型&lt;/h4&gt;
&lt;h5 id=&#34;背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景&#34;&gt;❡&lt;/a&gt; 背景&lt;/h5&gt;
&lt;p&gt;有一个基于数据库的原始数据实体，但是后面再创建一个基于这个数据实体进行按需所给。&lt;/p&gt;
&lt;h6 id=&#34;使用视图模型的好处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用视图模型的好处&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;使用视图模型的好处：&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;面对那些业务场景不需要的字段我们不应该返回给前端，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;方便此业务场景的维护，就算将来当前业务场景发生变化，也不至于影响到其他同学的调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字段太多，对于其他调用者来说不太友好，别人不知道这个字段是干嘛用的，特别是现在流行微服务开发，当我们给别人提供接口时，切记要记得 “&lt;strong&gt;按需所给&lt;/strong&gt;” ，否则别人可能会为了你这些 “没用的字段” 而 去大费周章的去东挪西凑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更符合当前的 DDD 开发模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;adonet实现数据的显示与添加功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adonet实现数据的显示与添加功能&#34;&gt;❡&lt;/a&gt; Ado.net 实现数据的显示与添加功能&lt;/h5&gt;
&lt;h6 id=&#34;sqlserver创建数据库mvcunit4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlserver创建数据库mvcunit4&#34;&gt;❡&lt;/a&gt; SQLServer 创建数据库 MvcUnit4&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼298–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;创建datamodel文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建datamodel文件夹&#34;&gt;❡&lt;/a&gt; 创建 DataModel 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;basebocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#basebocs&#34;&gt;❡&lt;/a&gt; BaseBo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼299–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;baseentitycs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#baseentitycs&#34;&gt;❡&lt;/a&gt; BaseEntity.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼300–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;productcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productcs&#34;&gt;❡&lt;/a&gt; Product.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼301–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;userinfocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userinfocs&#34;&gt;❡&lt;/a&gt; UserInfo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼302–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;创建model文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建model文件夹&#34;&gt;❡&lt;/a&gt; 创建 Model 文件夹&lt;/h5&gt;
&lt;h6 id=&#34;productcreatebocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productcreatebocs&#34;&gt;❡&lt;/a&gt; ProductCreateBo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼303–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;productviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productviewmodelcs&#34;&gt;❡&lt;/a&gt; ProductViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼304–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;修改appsettingsjson&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改appsettingsjson&#34;&gt;❡&lt;/a&gt; 修改 appsettings.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼305–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;创建services服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建services服务&#34;&gt;❡&lt;/a&gt; 创建 Services 服务&lt;/h5&gt;
&lt;h6 id=&#34;iproductservicecs接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iproductservicecs接口&#34;&gt;❡&lt;/a&gt; IProductService.cs 接口&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼306–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;productservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productservicecs&#34;&gt;❡&lt;/a&gt; ProductService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼307–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;修改views文件夹-添加product文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改views文件夹-添加product文件夹&#34;&gt;❡&lt;/a&gt; 修改 views 文件夹、添加 Product 文件夹&lt;/h5&gt;
&lt;h6 id=&#34;addcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addcshtml&#34;&gt;❡&lt;/a&gt; Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼308–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;searchcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#searchcshtml&#34;&gt;❡&lt;/a&gt; Search.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼309–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;添加utils文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加utils文件夹&#34;&gt;❡&lt;/a&gt; 添加 Utils 文件夹&lt;/h5&gt;
&lt;h6 id=&#34;dbhelpercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dbhelpercs&#34;&gt;❡&lt;/a&gt; DbHelper.cs&lt;/h6&gt;
&lt;p&gt;需要导入对应的包&lt;strong&gt; system.data.sqlclient&lt;/strong&gt; (得是 4.8.3) 如果是 4.9 的化就会被弃用。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼310–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;添加snowfalke文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加snowfalke文件夹&#34;&gt;❡&lt;/a&gt; 添加 SnowFalke 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;idworkercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#idworkercs&#34;&gt;❡&lt;/a&gt; IdWorker.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼311–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;snowflakeutilcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#snowflakeutilcs&#34;&gt;❡&lt;/a&gt; SnowflakeUtil.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼312–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;创建profiles文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建profiles文件夹&#34;&gt;❡&lt;/a&gt; 创建 Profiles 文件夹&lt;/h5&gt;
&lt;h6 id=&#34;productprofilecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productprofilecs&#34;&gt;❡&lt;/a&gt; ProductProfile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼313–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;添加productcontroller文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加productcontroller文件&#34;&gt;❡&lt;/a&gt; 添加 ProductController 文件&lt;/h5&gt;
&lt;h6 id=&#34;productcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productcontrollercs&#34;&gt;❡&lt;/a&gt; ProductController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼314–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;修改programcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改programcs&#34;&gt;❡&lt;/a&gt; 修改 Program.cs&lt;/h5&gt;
&lt;h6 id=&#34;programcs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-2&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼315–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;automap-组件-自动映射下划线的还有点问题后续解决问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#automap-组件-自动映射下划线的还有点问题后续解决问题&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;AutoMap&lt;/strong&gt; &lt;strong&gt;组件&lt;/strong&gt; **-**&lt;strong&gt; 自动映射&lt;/strong&gt; (下划线的还有点问题后续解决问题)&lt;/h5&gt;
&lt;h6 id=&#34;添加包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加包&#34;&gt;❡&lt;/a&gt; 添加包&lt;/h6&gt;
&lt;p&gt;AutoMapper.Extensions.Microsoft.DependencyInjection (11.0 版本还在，12 的版本已经弃用)&lt;/p&gt;
&lt;h6 id=&#34;创建profile文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建profile文件夹&#34;&gt;❡&lt;/a&gt; 创建 Profile 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;customerprofilecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#customerprofilecs&#34;&gt;❡&lt;/a&gt; CustomerProfile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼316–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;修改programcs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改programcs-2&#34;&gt;❡&lt;/a&gt; 修改 Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼317–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;productservicecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productservicecs-2&#34;&gt;❡&lt;/a&gt; ProductService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼318–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;创建automapmodels文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建automapmodels文件夹&#34;&gt;❡&lt;/a&gt; 创建 AutomapModels 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;命名方式-camelcasepascalcase&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名方式-camelcasepascalcase&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;命名方式&lt;/strong&gt; &lt;strong&gt;camelCase/PascalCase&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;作用：驼峰命名与 Pascal 命名的兼容。&lt;/p&gt;
&lt;p&gt;以下全局配置会映射 property_name 到 PropertyName&lt;/p&gt;
&lt;h6 id=&#34;product_1_2cs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#product_1_2cs&#34;&gt;❡&lt;/a&gt; Product_1_2.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼319–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;映射时匹配前缀或后缀&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#映射时匹配前缀或后缀&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;映射时匹配前缀或后缀&lt;/strong&gt;&lt;/h6&gt;
&lt;h6 id=&#34;customerprofile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#customerprofile&#34;&gt;❡&lt;/a&gt; CustomerProfile&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼320–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-3&#34;&gt;❡&lt;/a&gt; program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼321–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;product_1_4cs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#product_1_4cs&#34;&gt;❡&lt;/a&gt; Product_1_4.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼322–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;testautomapcontroller&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#testautomapcontroller&#34;&gt;❡&lt;/a&gt; TestAutoMapController&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼323–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;测试集合映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试集合映射&#34;&gt;❡&lt;/a&gt; 测试集合映射&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼324–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;手动控制某些成员的映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手动控制某些成员的映射&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;手动控制某些成员的映射&lt;/strong&gt;&lt;/h6&gt;
&lt;h6 id=&#34;testautomapcontroller-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#testautomapcontroller-2&#34;&gt;❡&lt;/a&gt; testautomapcontroller&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼325–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;userinfo2_1cs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userinfo2_1cs&#34;&gt;❡&lt;/a&gt; userinfo2_1.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼326–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;userprofilecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userprofilecs&#34;&gt;❡&lt;/a&gt; userprofile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼327–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;嵌套nested类和继承类映射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#嵌套nested类和继承类映射&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;嵌套（&lt;strong&gt;&lt;strong&gt;Nested&lt;/strong&gt;&lt;/strong&gt;）类和继承类映射&lt;/strong&gt;&lt;/h6&gt;
&lt;h6 id=&#34;嵌套类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#嵌套类&#34;&gt;❡&lt;/a&gt; 嵌套类&lt;/h6&gt;
&lt;h6 id=&#34;product2_2cs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#product2_2cs&#34;&gt;❡&lt;/a&gt; Product2_2.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼328–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;customerprofilecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#customerprofilecs-2&#34;&gt;❡&lt;/a&gt; CustomerProfile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼329–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;testautomapcontroller-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#testautomapcontroller-3&#34;&gt;❡&lt;/a&gt; TestAutoMapController&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼330–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;继承类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承类&#34;&gt;❡&lt;/a&gt; 继承类&lt;/h6&gt;
&lt;h6 id=&#34;parentsourcecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#parentsourcecs&#34;&gt;❡&lt;/a&gt; ParentSource.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼331–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;testautomapcontroller-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#testautomapcontroller-4&#34;&gt;❡&lt;/a&gt; TestAutoMapController&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼332–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;userprofilecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#userprofilecs-2&#34;&gt;❡&lt;/a&gt; UserProfile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼333–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;html-辅助标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html-辅助标签&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Html&lt;/strong&gt; &lt;strong&gt;辅助标签&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;作用：可以用于模型校验，虽然前端有一套，但是后端也有一套的话会更好。&lt;/p&gt;
&lt;h6 id=&#34;studentcontrollercs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentcontrollercs-2&#34;&gt;❡&lt;/a&gt; StudentController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼334–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;addcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addcshtml-2&#34;&gt;❡&lt;/a&gt; Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼335–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;searchcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#searchcshtml-2&#34;&gt;❡&lt;/a&gt; Search.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼336–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;标签补充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标签补充&#34;&gt;❡&lt;/a&gt; 标签补充&lt;/h6&gt;
&lt;h6 id=&#34;addcshtml-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#addcshtml-3&#34;&gt;❡&lt;/a&gt; Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼337–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;shared_studentviewcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shared_studentviewcshtml&#34;&gt;❡&lt;/a&gt; Shared/_StudentView.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼338–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsstudentbocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsstudentbocs&#34;&gt;❡&lt;/a&gt; Models/StudentBo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼339–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;dapper实现增删改查&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dapper实现增删改查&#34;&gt;❡&lt;/a&gt; Dapper 实现增删改查&lt;/h5&gt;
&lt;h6 id=&#34;sql-server创建表并添加数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-server创建表并添加数据&#34;&gt;❡&lt;/a&gt; SQL Server 创建表并添加数据&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼340–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;添加包-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加包-2&#34;&gt;❡&lt;/a&gt; 添加包&lt;/h6&gt;
&lt;p&gt;Dapper&lt;/p&gt;
&lt;h6 id=&#34;profile文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#profile文件夹&#34;&gt;❡&lt;/a&gt; Profile 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;studentprofilecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentprofilecs&#34;&gt;❡&lt;/a&gt; StudentProfile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼341–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;datamodel文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datamodel文件夹&#34;&gt;❡&lt;/a&gt; DataModel 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;studentinfocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentinfocs&#34;&gt;❡&lt;/a&gt; StudentInfo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼342–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentcontrollercs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentcontrollercs-3&#34;&gt;❡&lt;/a&gt; StudentController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼343–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;models文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#models文件夹&#34;&gt;❡&lt;/a&gt; Models 文件夹&lt;/h6&gt;
&lt;p&gt;一个表维护三个类，一个跟数据库打交道的类 studentinfo.cs，一个添加修改的类 studentbo.cs，一个数据显示的类 studentviewmodel.cs&lt;/p&gt;
&lt;h6 id=&#34;studentbocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentbocs&#34;&gt;❡&lt;/a&gt; StudentBo.cs&lt;/h6&gt;
&lt;p&gt;这不是跟数据库打交道的类，也就是充当传输的作用&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼344–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentviewmodelcs&#34;&gt;❡&lt;/a&gt; StudentViewModel.cs&lt;/h6&gt;
&lt;p&gt;好处是这边发生更改不影响 bo 也不影响实体类也就是 studentinfo，这是用于给用户展示的&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼345–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;services文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#services文件夹&#34;&gt;❡&lt;/a&gt; Services 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;istudentservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#istudentservicecs&#34;&gt;❡&lt;/a&gt; IStudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼346–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentservicecs&#34;&gt;❡&lt;/a&gt; StudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼347–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-4&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼348–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;views文件夹&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#views文件夹&#34;&gt;❡&lt;/a&gt; Views 文件夹&lt;/h6&gt;
&lt;h6 id=&#34;studentsearchcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentsearchcshtml&#34;&gt;❡&lt;/a&gt; /Student/Search.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼349–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studenteditcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studenteditcshtml&#34;&gt;❡&lt;/a&gt; /Student/Edit.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼350–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;mvc-core分页查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc-core分页查询&#34;&gt;❡&lt;/a&gt; Mvc Core 分页查询&lt;/h5&gt;
&lt;h6 id=&#34;添加包-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加包-3&#34;&gt;❡&lt;/a&gt; 添加包&lt;/h6&gt;
&lt;p&gt;PagedList.Mvc–framwork&lt;/p&gt;
&lt;p&gt;X.PagedList.Mvc.Core–.net6.0&lt;/p&gt;
&lt;h6 id=&#34;sql-server页面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-server页面&#34;&gt;❡&lt;/a&gt; SQL Server 页面&lt;/h6&gt;
&lt;h6 id=&#34;studentsearchcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentsearchcshtml-2&#34;&gt;❡&lt;/a&gt; /Student/Search.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼351–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;istudentservicecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#istudentservicecs-2&#34;&gt;❡&lt;/a&gt; IStudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼352–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentservicecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentservicecs-2&#34;&gt;❡&lt;/a&gt; StudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼353–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentcontrollercs-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentcontrollercs-4&#34;&gt;❡&lt;/a&gt; StudentController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼354–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;强类型辅助方法及分布视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强类型辅助方法及分布视图&#34;&gt;❡&lt;/a&gt; 强类型辅助方法及分布视图&lt;/h5&gt;
&lt;h6 id=&#34;studentaddcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentaddcshtml-2&#34;&gt;❡&lt;/a&gt; /Student/Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼355–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;shared_studentviewcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shared_studentviewcshtml-2&#34;&gt;❡&lt;/a&gt; /Shared/_StudentView.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼356–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentsearchcshtml-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentsearchcshtml-3&#34;&gt;❡&lt;/a&gt; /Student/Search.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼357–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;使用html辅助方法载入分部视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用html辅助方法载入分部视图&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;使用&lt;strong&gt;&lt;strong&gt; HTML&lt;/strong&gt;&lt;/strong&gt; 辅助方法载入分部视图&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;使用 Html.Partial 载入分布视图&lt;/p&gt;
&lt;p&gt;@Html.Partial(「Page」)&lt;/p&gt;
&lt;p&gt;@Html.Partial(「Page」,Model)&lt;/p&gt;
&lt;p&gt;@Html.Partial(「Page」,ViewData[「Model」])&lt;/p&gt;
&lt;p&gt;@Html.Partial (「Page」,Model,ViewData [「Model」])// 两个参数使用&lt;/p&gt;
&lt;p&gt;RenderPartial 辅助方法与 Partial 非常相似，但 RenderPartial 不是返回字符串，而是直接写入响应输出流。出于这个原因，必须把 RenderPartial 放入代码块中，而不能放在代码表达式中，为了说明这一点，下面两行代码向输出流写入相同的内容：&lt;/p&gt;
&lt;p Html.RenderPartial(Page);=&#34;&#34;&gt;@&lt;/p&gt;
&lt;p&gt;@Html.Partial(「Page」)&lt;/p&gt;
&lt;p&gt;一般情况下，因为 Partial 相对于 RenderPartial 来说更方便，所以应该选择 Partial。然而，RenderPartial 拥有较好的性能，因为它是直接写入响应流的，但这种性能优势需要大量的使用才能看出来。&lt;/p&gt;
&lt;p&gt;使用 Html.Action 辅助方法，从控制器载入分布视图&lt;/p&gt;
&lt;p&gt;Action 和 RenderAction 类似于 Partial 和 RenderPartial 辅助方法。Partial 辅助方法通常在单独的文件中应用视图标记来帮助视图渲染视图模型的一部分。另一方面，Action 执行单独的控制器操作，并显示结果。Action 提供了更多的灵活性和重用性，因为控制器操作可以建立不同的模型，可以利用单独的控制器上下文。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼358–&amp;gt;&lt;/p&gt;
&lt;p&gt;利用 Controller 类型中的 PartialView 辅助方法来载入分布视图，而这种载入方式与用 View 辅助方法唯一的差别，仅在于它不会套用母版页面，其它则完全相同。&lt;/p&gt;
&lt;p&gt;@Html.Action(「GetPartialView」);&lt;/p&gt;
&lt;p&gt;通过 Html.Action 与 Html.Partial 载入分部视图结果是一样的，但载入的过程却差别很大。若使用 Html.Partial 载入分部视图是通过 HtmlHelper 直接读取 *.cshtml 文件，直接执行该视图并取得结果。若使用 Html.Action 的话，则会通过 HtmlHelper 对 IIS 再进行一次处理要求（通过 Server.Execute 方法），因此，使用 Html.Action 会重新执行一遍 Controller 的生命周期&lt;/p&gt;
&lt;h5 id=&#34;模型校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模型校验&#34;&gt;❡&lt;/a&gt; 模型校验&lt;/h5&gt;
&lt;h6 id=&#34;modelsstudentbocs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsstudentbocs-2&#34;&gt;❡&lt;/a&gt; Models/StudentBo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼359–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsstudenteditbocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsstudenteditbocs&#34;&gt;❡&lt;/a&gt; Models/StudentEditBo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼360–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentaddcshtml-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentaddcshtml-3&#34;&gt;❡&lt;/a&gt; Student/Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼361–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studenteditcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studenteditcshtml-2&#34;&gt;❡&lt;/a&gt; Student/Edit.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼362–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;profilesstudentprofilecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#profilesstudentprofilecs&#34;&gt;❡&lt;/a&gt; Profiles/StudentProfile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼363–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentcontrollercs-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentcontrollercs-5&#34;&gt;❡&lt;/a&gt; StudentController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼364–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;模型绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模型绑定&#34;&gt;❡&lt;/a&gt; 模型绑定&lt;/h5&gt;
&lt;h6 id=&#34;apifox软件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apifox软件&#34;&gt;❡&lt;/a&gt; Apifox 软件&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼365–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼366–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼367–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsbindtestcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsbindtestcs&#34;&gt;❡&lt;/a&gt; Models/BindTest.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼368–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsproductinputcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsproductinputcs&#34;&gt;❡&lt;/a&gt; Models/ProductInput.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼369–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersproductcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersproductcontrollercs&#34;&gt;❡&lt;/a&gt; Controllers/ProductController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼370–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersbindcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersbindcontrollercs&#34;&gt;❡&lt;/a&gt; Controllers/BindController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼371–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsproductcreatecshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsproductcreatecshtml&#34;&gt;❡&lt;/a&gt; Views/Product/Create.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼372–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;文件上传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件上传&#34;&gt;❡&lt;/a&gt; 文件上传&lt;/h5&gt;
&lt;h6 id=&#34;uploadcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#uploadcontrollercs&#34;&gt;❡&lt;/a&gt; UploadController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼373–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsuploadindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsuploadindexcshtml&#34;&gt;❡&lt;/a&gt; Views/upload/index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼374–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsuploadlargefilecshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsuploadlargefilecshtml&#34;&gt;❡&lt;/a&gt; Views/upload/LargeFile.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼375–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsuploadmoreuploadcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsuploadmoreuploadcshtml&#34;&gt;❡&lt;/a&gt; Views/upload/MoreUpload.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼376–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;结合表单上传文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结合表单上传文件&#34;&gt;❡&lt;/a&gt; 结合表单上传文件&lt;/h6&gt;
&lt;h6 id=&#34;productcontrollercs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productcontrollercs-2&#34;&gt;❡&lt;/a&gt; ProductController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼377–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsproductcreatecshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsproductcreatecshtml-2&#34;&gt;❡&lt;/a&gt; Views/product/create.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼378–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;productinfocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#productinfocs&#34;&gt;❡&lt;/a&gt; productinfo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼379–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;特殊视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊视图&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;特殊视图&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;_layoutcshtml-布局页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_layoutcshtml-布局页&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;_Layout.cshtml&lt;/strong&gt; &lt;strong&gt;布局页&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼380–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;_viewstartcshtml-视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_viewstartcshtml-视图&#34;&gt;❡&lt;/a&gt; ** _ViewStart.cshtml** &lt;strong&gt;视图&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼381–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;_viewimportcshtml-命名导入视图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#_viewimportcshtml-命名导入视图&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;_ViewImport.cshtml&lt;/strong&gt; &lt;strong&gt;命名导入视图&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼382–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;标签助手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标签助手&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;标签助手&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;标签助手是服务端代码能够参与在 Razor 文件中创建和呈现 HTML 元素。例如，内置的 ImageTagHelper 可以将版本号追加到图像名称。无论何时更改图像，服务器都会为图像生成新的唯一版本，因此可以保证客户端获取当前图像（而不是过时的缓存图像）。内置的标签助手多用于常见任务，例如创建表单，链接和加载资源等。标签助手是在 C# 中定义的，它们基于元素名称，属性名称或父标签来定位 HTML 元素。例如，当应用 LabelTagHelper 特性时，内置的 LabelTagHelper &lt;strong&gt;可以减少&lt;/strong&gt; &lt;strong&gt;Razor&lt;/strong&gt; &lt;strong&gt;视图中&lt;/strong&gt; &lt;strong&gt;HTML**** 和&lt;/strong&gt; &lt;strong&gt;C#&lt;/strong&gt; &lt;strong&gt;之间的 **** 显示转换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼383–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentaddcshtml-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentaddcshtml-4&#34;&gt;❡&lt;/a&gt; Student/Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼384–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentindexcshtml&#34;&gt;❡&lt;/a&gt; Student/index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼385–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsstudentcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsstudentcs&#34;&gt;❡&lt;/a&gt; Models/Student.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼386–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;studentcontrollercs-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#studentcontrollercs-6&#34;&gt;❡&lt;/a&gt; StudentController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼387–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;shared_layoutcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shared_layoutcshtml-2&#34;&gt;❡&lt;/a&gt; Shared/_Layout.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼388–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;tagsemailtaghelpercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tagsemailtaghelpercs&#34;&gt;❡&lt;/a&gt; tags/EmailTagHelper.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼389–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;views_viewimportscshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#views_viewimportscshtml&#34;&gt;❡&lt;/a&gt; Views/_ViewImports.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼390–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewcomponentsstudentviewcomponentcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewcomponentsstudentviewcomponentcs&#34;&gt;❡&lt;/a&gt; ViewComponents/StudentViewComponent.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼391–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-5&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼392–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;服务与配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务与配置&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;服务与配置&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;以前&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#以前&#34;&gt;❡&lt;/a&gt; 以前&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼393–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;现在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现在&#34;&gt;❡&lt;/a&gt; 现在&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼394–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;正转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正转&#34;&gt;❡&lt;/a&gt; 正转&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼395–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;反转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反转&#34;&gt;❡&lt;/a&gt; 反转&lt;/h5&gt;
&lt;p&gt;把依赖的创建丢给其它人，自己只负责使用，其它人丢给你依赖的这个过程理解为注入。&lt;/p&gt;
&lt;p&gt;为了在业务变化的时候尽少改动代码可能造成的问题。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼396–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;何为容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何为容器&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;何为容器&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;容器负责两件事情&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器负责两件事情&#34;&gt;❡&lt;/a&gt; 容器负责两件事情：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;绑定服务与实例之间的关系&lt;/li&gt;
&lt;li&gt;获取实例，并对实例进行管理（创建与销毁）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;aspnet-core-di&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aspnet-core-di&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FTUC5ORVQ=&#34;&gt;ASP.NET&lt;/span&gt; CORE DI&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;使用时通过 Nuget 包 Microsoft.Extensions.DependencyInjection 来使用 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相对与其他&lt;strong&gt;&lt;strong&gt; DI&lt;/strong&gt;&lt;/strong&gt; 框架，它比较轻量，且只支持构造器注入，不支持属性注入、以及方法注入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS0zZHMuTkVU&#34;&gt;在.NET&lt;/span&gt; Core 中 DI 的核心分为两个组件：&lt;strong&gt;IServiceCollection 和 IServiceProvider&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IServiceCollection 负责注册&lt;/li&gt;
&lt;li&gt;IServiceProvider 负责提供实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;服务的注册方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务的注册方式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;服务的注册方式&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼397–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;服务提供者-serviceprovider&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务提供者-serviceprovider&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;服务提供者&lt;/strong&gt; &lt;strong&gt;ServiceProvider&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;服务实例的创建、销毁均由 ServiceProvider 负责维护，生成的服务实例一般不要执行对象的 Dispose 方法（如果有的话），因为服务实例有可能被其他地方使用。&lt;/p&gt;
&lt;p&gt;当释放 ServiceProvider 时，该 Provider 将会释放由它生成的对象。&lt;/p&gt;
&lt;p&gt;在生成实例时，如果对象实现了 Dispose 接口，它会把该对象保存在&lt;em&gt; disposables&lt;/em&gt; 列表中，当&lt;em&gt; Provider&lt;/em&gt; 释放时，当即会自动调用 disposables 元素对象的 Dispose 方法而 ServiceProvider 本身又可以创建新的 ServiceProvider，这样就相当生成了一个作用域 Scope。&lt;/p&gt;
&lt;h6 id=&#34;获取的服务的三种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取的服务的三种方式&#34;&gt;❡&lt;/a&gt; 获取的服务的三种方式&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼398–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;服务的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务的生命周期&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;服务的生命周期&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;生命周期分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;瞬态 Transient： 每一次从 ServiceProvider 取得，均返回一个新的实例。&lt;/p&gt;
&lt;p&gt;请求获取 -（GC 回收 - 主动释放） 每一次获取的对象都不是同一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用域 Scope：在同一作用域下生成的实例相同，即同一个 ServiceProvider 下取得的实例相同&lt;/p&gt;
&lt;p&gt;请求开始 - 请求结束 在这次请求中获取的对象都是同一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单例 Singleton： 任意一个 ServiceProvider 下取得的实例都相同&lt;/p&gt;
&lt;p&gt;项目启动 - 项目关闭 相当于静态类 只会有一个&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用域主要针对特定&lt;strong&gt;&lt;strong&gt; ServiceProvider&lt;/strong&gt;&lt;/strong&gt; 的，即在同一个&lt;strong&gt;&lt;strong&gt; ServiceProvider&lt;/strong&gt;&lt;/strong&gt; 下，注册为&lt;strong&gt;&lt;strong&gt; Scope&lt;/strong&gt;&lt;/strong&gt; 类型的对象为单例&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;programcs-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-6&#34;&gt;❡&lt;/a&gt; program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼399–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;homecontrollercs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homecontrollercs-2&#34;&gt;❡&lt;/a&gt; HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼400–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;optionsredisoptionscs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#optionsredisoptionscs&#34;&gt;❡&lt;/a&gt; Options/RedisOptions.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼401–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicesifoodservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicesifoodservicecs&#34;&gt;❡&lt;/a&gt; Services/IFoodService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼402–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicesimplfoodservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicesimplfoodservicecs&#34;&gt;❡&lt;/a&gt; Services/Impl/FoodService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼403–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewshomeindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewshomeindexcshtml&#34;&gt;❡&lt;/a&gt; Views/Home/Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼404–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;autofac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autofac&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Autofac&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;nuget安装相关包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nuget安装相关包&#34;&gt;❡&lt;/a&gt; Nuget 安装相关包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼405–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;autofacmoduleregistercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autofacmoduleregistercs&#34;&gt;❡&lt;/a&gt; AutofacModuleRegister.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼406–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-7&#34;&gt;❡&lt;/a&gt; program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼407–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;生命周期&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼408–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;系统内置服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统内置服务&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;系统内置服务&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;内置的日志服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置的日志服务&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;内置的日志服务&lt;/strong&gt;&lt;/h6&gt;
&lt;h6 id=&#34;programcs-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-8&#34;&gt;❡&lt;/a&gt; program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼409–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼410–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼411–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;log4net-使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#log4net-使用&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Log4Net&lt;/strong&gt; &lt;strong&gt;使用&lt;/strong&gt;&lt;/h6&gt;
&lt;h6 id=&#34;安装2个包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装2个包&#34;&gt;❡&lt;/a&gt; 安装 2 个包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼412–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;log4netconfig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#log4netconfig&#34;&gt;❡&lt;/a&gt; log4net.config&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼413–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-9&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼414–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;nlog-日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nlog-日志&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;NLog&lt;/strong&gt; &lt;strong&gt;日志&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;属性变为始终复制以及内容便于发布的时候&lt;/p&gt;
&lt;h6 id=&#34;安装包-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-2&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼415–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-10&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼416–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;nlogconfig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nlogconfig&#34;&gt;❡&lt;/a&gt; nlog.config&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼417–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;serilog推荐使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serilog推荐使用&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;SeriLog(&lt;strong&gt;&lt;strong&gt;推荐使用&lt;/strong&gt;&lt;/strong&gt;)&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;默认级别 - 如果没有指定 MinimumLevel ，则将处理 Information 级别事件和更高级别的事件。&lt;/p&gt;
&lt;h6 id=&#34;安装包-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-3&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼418–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;appsettingsjson&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appsettingsjson&#34;&gt;❡&lt;/a&gt; appsettings.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼419–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-11&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-11&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼420–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;日志扩展&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志扩展&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;日志扩展&lt;/strong&gt;&lt;/h6&gt;
&lt;h6 id=&#34;输出到文件需要引用一个包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出到文件需要引用一个包&#34;&gt;❡&lt;/a&gt; 输出到文件需要引用一个包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼421–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-12&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-12&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼422–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;appsettingsjson-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appsettingsjson-2&#34;&gt;❡&lt;/a&gt; appsettings.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼423–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;configuration-配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#configuration-配置&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Configuration&lt;/strong&gt; &lt;strong&gt;配置&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;homecontrollerindex-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homecontrollerindex-4&#34;&gt;❡&lt;/a&gt; HomeController/Index&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼424–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-13&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-13&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼425–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;appsettingsdevelopmentjson&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appsettingsdevelopmentjson&#34;&gt;❡&lt;/a&gt; appsettings.Development.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼426–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;optionsredisoptionscs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#optionsredisoptionscs-2&#34;&gt;❡&lt;/a&gt; Options\RedisOptions.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼427–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;结合entityframework&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结合entityframework&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;结合&lt;/strong&gt; EntityFramework&lt;/h4&gt;
&lt;h5 id=&#34;环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境搭建&#34;&gt;❡&lt;/a&gt; 环境搭建&lt;/h5&gt;
&lt;h6 id=&#34;创建类库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建类库&#34;&gt;❡&lt;/a&gt; 创建类库&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼428–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;创建数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建数据库&#34;&gt;❡&lt;/a&gt; 创建数据库&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼429–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;创建类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建类&#34;&gt;❡&lt;/a&gt; 创建类&lt;/h6&gt;
&lt;h6 id=&#34;webapplication_mvc_efcore_modelbaseentitycs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webapplication_mvc_efcore_modelbaseentitycs&#34;&gt;❡&lt;/a&gt; WebApplication_MVC_EFCore_Model/BaseEntity.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼430–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;webapplication_mvc_efcore_modeldebtorcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webapplication_mvc_efcore_modeldebtorcs&#34;&gt;❡&lt;/a&gt; WebApplication_MVC_EFCore_Model/Debtor.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼431–&amp;gt;&lt;/p&gt;
&lt;p&gt;WebApplication_MVC_EFCore_Model/Account.cs&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼432–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;安装包-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-4&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼433–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;appsettingsjson-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appsettingsjson-3&#34;&gt;❡&lt;/a&gt; appsettings.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼434–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;webapplication_mvc_efcore_servicestepdbcontextcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webapplication_mvc_efcore_servicestepdbcontextcs&#34;&gt;❡&lt;/a&gt; WebApplication_MVC_EFCore_Service/StepDbContext.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼435–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-14&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-14&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼436–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;分页显示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分页显示&#34;&gt;❡&lt;/a&gt; 分页显示&lt;/h5&gt;
&lt;h6 id=&#34;servicedtoaccountviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicedtoaccountviewmodelcs&#34;&gt;❡&lt;/a&gt; Service/Dto/AccountViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼437–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicedtoconditionaccountrequestcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicedtoconditionaccountrequestcs&#34;&gt;❡&lt;/a&gt; Service/Dto/condition/AccountRequest.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼438–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicedtoconditionpagerequestcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicedtoconditionpagerequestcs&#34;&gt;❡&lt;/a&gt; Service/Dto/condition/PageRequest.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼439–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;serviceiaccountservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serviceiaccountservicecs&#34;&gt;❡&lt;/a&gt; Service/IAccountService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼440–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;serviceaccountservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serviceaccountservicecs&#34;&gt;❡&lt;/a&gt; Service/AccountService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼441–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;向service导入util包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#向service导入util包&#34;&gt;❡&lt;/a&gt; 向 Service 导入 util 包&lt;/h6&gt;
&lt;h6 id=&#34;accountcontroller&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#accountcontroller&#34;&gt;❡&lt;/a&gt; AccountController&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼442–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsaccountindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsaccountindexcshtml&#34;&gt;❡&lt;/a&gt; Views/Account/Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼443–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;查询显示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查询显示&#34;&gt;❡&lt;/a&gt; 查询显示&lt;/h5&gt;
&lt;h6 id=&#34;accountcontroller-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#accountcontroller-2&#34;&gt;❡&lt;/a&gt; AccountController&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼444–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsaccountindexcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsaccountindexcshtml-2&#34;&gt;❡&lt;/a&gt; Views/Account/Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼445–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7serviceaccountservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7serviceaccountservicecs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Service\AccountService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼446–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;增删改查&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增删改查&#34;&gt;❡&lt;/a&gt; 增删改查&lt;/h5&gt;
&lt;h6 id=&#34;accountcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#accountcontrollercs&#34;&gt;❡&lt;/a&gt; AccountController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼447–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7serviceprofilesaccountprofilecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7serviceprofilesaccountprofilecs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Service\Profiles\AccountProfile.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼448–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7servicedtoaccountbocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7servicedtoaccountbocs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Service\Dto\AccountBo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼449–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7servicedtodebtorviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7servicedtodebtorviewmodelcs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Service\Dto\DebtorViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼450–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7servicedtoaccountupdatebocs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7servicedtoaccountupdatebocs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Service\Dto\AccountUpdateBo.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼451–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7step4unit7modeldebtorcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7step4unit7modeldebtorcs&#34;&gt;❡&lt;/a&gt; Step4.Unit7\Step4.Unit7.Model\Debtor.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼452–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7modelaccountcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7modelaccountcs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Model\Account.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼453–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7modelbaseentitycs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7modelbaseentitycs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Model\BaseEntity.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼454–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7viewsaccountindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7viewsaccountindexcshtml&#34;&gt;❡&lt;/a&gt; Step4.Unit7\Views\Account\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼455–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7viewsaccountaddcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7viewsaccountaddcshtml&#34;&gt;❡&lt;/a&gt; Step4.Unit7\Views\Account\Add.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼456–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7viewsaccounteditcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7viewsaccounteditcshtml&#34;&gt;❡&lt;/a&gt; Step4.Unit7\Views\Account\Edit.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼457–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-15&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-15&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼458–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7serviceiaccountservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7serviceiaccountservicecs&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Service\IAccountService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼459–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;step4unit7serviceaccountservicecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit7serviceaccountservicecs-2&#34;&gt;❡&lt;/a&gt; Step4.Unit7.Service\AccountService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼460–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;角色与授权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#角色与授权&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;角色与授权&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;identity-完成登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#identity-完成登录&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Identity&lt;/strong&gt; &lt;strong&gt;完成登录&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;登录与注册的 View&lt;/li&gt;
&lt;li&gt;用于登录的控制器 AccountController&lt;/li&gt;
&lt;li&gt;Model 校验&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;appsettingsjson-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appsettingsjson-4&#34;&gt;❡&lt;/a&gt; appsettings.json&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼461–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;安装包-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-5&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼462–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;programcs-16&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-16&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Program.cs&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼463–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;数据迁移&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据迁移&#34;&gt;❡&lt;/a&gt; 数据迁移&lt;/h5&gt;
&lt;h6 id=&#34;visual-studio-2022&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#visual-studio-2022&#34;&gt;❡&lt;/a&gt; Visual Studio 2022&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼464–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;cli-命令行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cli-命令行&#34;&gt;❡&lt;/a&gt; CLI 命令行&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼465–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;登录与注册功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#登录与注册功能&#34;&gt;❡&lt;/a&gt; 登录与注册功能&lt;/h5&gt;
&lt;h6 id=&#34;modelsloginviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsloginviewmodelcs&#34;&gt;❡&lt;/a&gt; Models\LoginViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼466–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsregisterviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsregisterviewmodelcs&#34;&gt;❡&lt;/a&gt; Models\RegisterViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼467–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsaccountlogincshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsaccountlogincshtml&#34;&gt;❡&lt;/a&gt; Views\Account\Login.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼468–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsaccountregistercshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsaccountregistercshtml&#34;&gt;❡&lt;/a&gt; Views\Account\Register.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼469–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-17&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-17&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼470–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersaccountcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersaccountcontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\AccountController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼471–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;相关配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关配置&#34;&gt;❡&lt;/a&gt; 相关配置&lt;/h5&gt;
&lt;h6 id=&#34;controllersaccountcontrollercs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersaccountcontrollercs-2&#34;&gt;❡&lt;/a&gt; Controllers\AccountController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼472–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllershomecontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllershomecontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼473–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsshared_layoutcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsshared_layoutcshtml&#34;&gt;❡&lt;/a&gt; Views\Shared_Layout.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼474–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-18&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-18&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼475–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;用户配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户配置&#34;&gt;❡&lt;/a&gt; 用户配置&lt;/h5&gt;
&lt;h6 id=&#34;controllersusercontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersusercontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\UserController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼476–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsuserindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsuserindexcshtml&#34;&gt;❡&lt;/a&gt; Views\User\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼477–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsshared_layoutcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsshared_layoutcshtml-2&#34;&gt;❡&lt;/a&gt; Views\Shared_Layout.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼478–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsusereditviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsusereditviewmodelcs&#34;&gt;❡&lt;/a&gt; Models\UserEditViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼479–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;角色管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#角色管理&#34;&gt;❡&lt;/a&gt; 角色管理&lt;/h5&gt;
&lt;h6 id=&#34;programcs-19&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-19&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼480–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersrolecontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersrolecontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\RoleController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼481–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsrolecreateviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsrolecreateviewmodelcs&#34;&gt;❡&lt;/a&gt; Models\RoleCreateViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼482–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsroleeditviewmodelcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsroleeditviewmodelcs&#34;&gt;❡&lt;/a&gt; Models\RoleEditViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼483–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsrolecreatecshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsrolecreatecshtml&#34;&gt;❡&lt;/a&gt; Views\Role\Create.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼484–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsroleeditcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsroleeditcshtml&#34;&gt;❡&lt;/a&gt; Views\Role\Edit.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼485–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsroleindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsroleindexcshtml&#34;&gt;❡&lt;/a&gt; Views\Role\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼486–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsshared_layoutcshtml-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsshared_layoutcshtml-3&#34;&gt;❡&lt;/a&gt; Views\Shared_Layout.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼487–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;用户角色管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户角色管理&#34;&gt;❡&lt;/a&gt; 用户角色管理&lt;/h5&gt;
&lt;h6 id=&#34;controllersusercontrollercs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersusercontrollercs-2&#34;&gt;❡&lt;/a&gt; Controllers\UserController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼488–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsuserindexcshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsuserindexcshtml-2&#34;&gt;❡&lt;/a&gt; Views\User\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼489–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;授权策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#授权策略&#34;&gt;❡&lt;/a&gt; 授权策略&lt;/h5&gt;
&lt;h6 id=&#34;基于角色授权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于角色授权&#34;&gt;❡&lt;/a&gt; 基于角色授权&lt;/h6&gt;
&lt;h6 id=&#34;programcs-20&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-20&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼490–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersrolecontrollercs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersrolecontrollercs-2&#34;&gt;❡&lt;/a&gt; Controllers\RoleController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼491–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;基于claim授权部分授权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于claim授权部分授权&#34;&gt;❡&lt;/a&gt; 基于 Claim 授权（部分授权）&lt;/h6&gt;
&lt;h6 id=&#34;programcs-21&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-21&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼492–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersaccountcontrollercs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersaccountcontrollercs-3&#34;&gt;❡&lt;/a&gt; Controllers\AccountController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼493–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsuserindexcshtml-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsuserindexcshtml-3&#34;&gt;❡&lt;/a&gt; Views\User\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼494–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;面向切面编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向切面编程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;面向切面编程&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义&#34;&gt;❡&lt;/a&gt; 定义&lt;/h5&gt;
&lt;p&gt;无感增强功能，不影响原先的业务&lt;/p&gt;
&lt;h6 id=&#34;controllersusercontrollercs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersusercontrollercs-3&#34;&gt;❡&lt;/a&gt; Controllers\UserController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼495–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;xss-攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss-攻击&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;XSS&lt;/strong&gt; &lt;strong&gt;攻击&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;controllersxsscontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersxsscontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\XssController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼496–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsxssindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsxssindexcshtml&#34;&gt;❡&lt;/a&gt; Views\Xss\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼497–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;csrf-攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csrf-攻击&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;CSRF&lt;/strong&gt; &lt;strong&gt;攻击&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;controllerscsrfcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllerscsrfcontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\CsrfController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼498–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsstudentviewmodelcs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsstudentviewmodelcs-2&#34;&gt;❡&lt;/a&gt; Models\StudentViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼499–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewscsrfindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewscsrfindexcshtml&#34;&gt;❡&lt;/a&gt; Views\Csrf\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼500–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-22&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-22&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼501–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;其他系统过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他系统过滤器&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;其他系统过滤器&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;controllersusercontrollercs-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersusercontrollercs-4&#34;&gt;❡&lt;/a&gt; Controllers\UserController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼502–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;授权过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#授权过滤器&#34;&gt;❡&lt;/a&gt; 授权过滤器&lt;/h5&gt;
&lt;h6 id=&#34;filterscustomerauthorizeattributecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filterscustomerauthorizeattributecs&#34;&gt;❡&lt;/a&gt; Filters\CustomerAuthorizeAttribute.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼503–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersaccountcontrollercs-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersaccountcontrollercs-4&#34;&gt;❡&lt;/a&gt; Controllers\AccountController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼504–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;modelsloginviewmodelcs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#modelsloginviewmodelcs-2&#34;&gt;❡&lt;/a&gt; Models\LoginViewModel.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼505–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsshared_layoutcshtml-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsshared_layoutcshtml-4&#34;&gt;❡&lt;/a&gt; Views\Shared_Layout.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼506–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsaccountlogincshtml-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsaccountlogincshtml-2&#34;&gt;❡&lt;/a&gt; Views\Account\Login.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼507–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;appsettingsjson-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appsettingsjson-5&#34;&gt;❡&lt;/a&gt; appsettings.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼508–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;安装包-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-6&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼509–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-23&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-23&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼510–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersusercontrollercs-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersusercontrollercs-5&#34;&gt;❡&lt;/a&gt; Controllers\UserController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼511–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;异常过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常过滤器&#34;&gt;❡&lt;/a&gt; 异常过滤器&lt;/h5&gt;
&lt;h6 id=&#34;controllershomecontrollercs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllershomecontrollercs-2&#34;&gt;❡&lt;/a&gt; Controllers\HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼512–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;filterscustomerexceptionfilterattributecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filterscustomerexceptionfilterattributecs&#34;&gt;❡&lt;/a&gt; Filters\CustomerExceptionFilterAttribute.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼513–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;过滤器的应用方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过滤器的应用方式&#34;&gt;❡&lt;/a&gt; 过滤器的应用方式&lt;/h5&gt;
&lt;h6 id=&#34;filterscustomerexceptionfilterattributecs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filterscustomerexceptionfilterattributecs-2&#34;&gt;❡&lt;/a&gt; Filters\CustomerExceptionFilterAttribute.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼514–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllershomecontrollercs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllershomecontrollercs-3&#34;&gt;❡&lt;/a&gt; Controllers\HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼515–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;资源过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源过滤器&#34;&gt;❡&lt;/a&gt; 资源过滤器&lt;/h5&gt;
&lt;h6 id=&#34;controllersresourcecontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersresourcecontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\ResourceController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼516–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;filterscustomerresourcefilterattributecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filterscustomerresourcefilterattributecs&#34;&gt;❡&lt;/a&gt; Filters\CustomerResourceFilterAttribute.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼517–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsresourceindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsresourceindexcshtml&#34;&gt;❡&lt;/a&gt; Views\Resource\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼518–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;行为过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行为过滤器&#34;&gt;❡&lt;/a&gt; 行为过滤器&lt;/h5&gt;
&lt;h6 id=&#34;filterscustomeractionfilterattributecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filterscustomeractionfilterattributecs&#34;&gt;❡&lt;/a&gt; Filters\CustomerActionFilterAttribute.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼519–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;areasmobilecontrollersproductcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#areasmobilecontrollersproductcontrollercs&#34;&gt;❡&lt;/a&gt; Areas\Mobile\Controllers\ProductController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼520–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;areasmobileviewsproductindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#areasmobileviewsproductindexcshtml&#34;&gt;❡&lt;/a&gt; Areas\Mobile\Views\Product\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼521–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;areaspccontrollersproductcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#areaspccontrollersproductcontrollercs&#34;&gt;❡&lt;/a&gt; Areas\Pc\Controllers\ProductController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼522–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;areaspcviewsproductindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#areaspcviewsproductindexcshtml&#34;&gt;❡&lt;/a&gt; Areas\Pc\Views\Product\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼523–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-24&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-24&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼524–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;结果过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结果过滤器&#34;&gt;❡&lt;/a&gt; 结果过滤器&lt;/h5&gt;
&lt;h6 id=&#34;filterscustomeractionresultfilterattributecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filterscustomeractionresultfilterattributecs&#34;&gt;❡&lt;/a&gt; Filters\CustomerActionResultFilterAttribute.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼525–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;拦截器的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拦截器的使用&#34;&gt;❡&lt;/a&gt; 拦截器的使用&lt;/h5&gt;
&lt;h6 id=&#34;安装包-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-7&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼526–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-25&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-25&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼527–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;autofacregistermodulecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autofacregistermodulecs&#34;&gt;❡&lt;/a&gt; AutofacRegisterModule.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼528–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;interceptorslogaopcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#interceptorslogaopcs&#34;&gt;❡&lt;/a&gt; Interceptors\LogAop.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼529–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicesistudentservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicesistudentservicecs&#34;&gt;❡&lt;/a&gt; Services\IStudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼530–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;servicesstudentservicecs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servicesstudentservicecs&#34;&gt;❡&lt;/a&gt; Services\StudentService.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼531–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllershomecontrollercs-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllershomecontrollercs-4&#34;&gt;❡&lt;/a&gt; Controllers\HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼532–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;项目发布&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目发布&#34;&gt;❡&lt;/a&gt; 项目发布&lt;/h5&gt;
&lt;h6 id=&#34;iis部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iis部署&#34;&gt;❡&lt;/a&gt; IIS 部署&lt;/h6&gt;
&lt;h6 id=&#34;linux部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux部署&#34;&gt;❡&lt;/a&gt; Linux 部署&lt;/h6&gt;
&lt;h6 id=&#34;linux-docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-docker&#34;&gt;❡&lt;/a&gt; Linux-docker&lt;/h6&gt;
&lt;h6 id=&#34;step4unit8dockerfile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step4unit8dockerfile&#34;&gt;❡&lt;/a&gt; Step4.Unit8\Dockerfile&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼533–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼534–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;restful-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#restful-api&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;RESTful API&lt;/strong&gt;&lt;/h3&gt;
&lt;h2 id=&#34;adonet&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adonet&#34;&gt;❡&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0Fkby5uZXQ=&#34;&gt;Ado.net&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&amp;lt;!–code￼535–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;构建datatable&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构建datatable&#34;&gt;❡&lt;/a&gt; 构建 DataTable&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼536–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置文件&#34;&gt;❡&lt;/a&gt; 配置文件&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼537–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;数据连接池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据连接池&#34;&gt;❡&lt;/a&gt; 数据连接池&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼538–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;参数化查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数化查询&#34;&gt;❡&lt;/a&gt; 参数化查询&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼539–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;存储过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储过程&#34;&gt;❡&lt;/a&gt; 存储过程&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼540–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;输出参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出参数&#34;&gt;❡&lt;/a&gt; 输出参数&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼541–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;web项目操作ado下面三个以及这个都需要学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web项目操作ado下面三个以及这个都需要学习&#34;&gt;❡&lt;/a&gt; Web 项目操作 Ado (下面三个以及这个都需要学习)&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼542–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;视频操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#视频操作&#34;&gt;❡&lt;/a&gt; 视频操作&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼543–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;indexhtml操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#indexhtml操作&#34;&gt;❡&lt;/a&gt; index.html 操作&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼544–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;封装dbhelper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装dbhelper&#34;&gt;❡&lt;/a&gt; 封装 DbHelper&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼545–&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;数据访问技术orm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据访问技术orm&#34;&gt;❡&lt;/a&gt; 数据访问技术 (ORM)&lt;/h2&gt;
&lt;h3 id=&#34;freesqlsqlsugger&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#freesqlsqlsugger&#34;&gt;❡&lt;/a&gt; FreeSQL/SQLSugger&lt;/h3&gt;
&lt;h3 id=&#34;entityframeworkcore&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#entityframeworkcore&#34;&gt;❡&lt;/a&gt; EntityFrameworkCore&lt;/h3&gt;
&lt;h4 id=&#34;orm介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#orm介绍&#34;&gt;❡&lt;/a&gt; ORM 介绍&lt;/h4&gt;
&lt;h5 id=&#34;安装net-cli&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装net-cli&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;安装&lt;/strong&gt;.Net CLI&lt;/h5&gt;
&lt;h4 id=&#34;efcore-入门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#efcore-入门&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;EFCore&lt;/strong&gt; &lt;strong&gt;入门&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;quackstartbloggingcontextcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quackstartbloggingcontextcs&#34;&gt;❡&lt;/a&gt; QuackStart\BloggingContext.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼546–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;quackstartblogcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quackstartblogcs&#34;&gt;❡&lt;/a&gt; QuackStart\Blog.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼547–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;quackstartpostcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quackstartpostcs&#34;&gt;❡&lt;/a&gt; QuackStart\Post.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼548–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;programcs-26&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-26&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼549–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;安装包-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-8&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼550–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;dbcontext在mvc运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dbcontext在mvc运行&#34;&gt;❡&lt;/a&gt; DbContext 在 mvc 运行&lt;/h5&gt;
&lt;h6 id=&#34;安装包-9&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-9&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼551–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;appsettingsjson-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appsettingsjson-6&#34;&gt;❡&lt;/a&gt; appsettings.json&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼552–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-27&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-27&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼553–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;blogcontextcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blogcontextcs&#34;&gt;❡&lt;/a&gt; BlogContext.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼554–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;datablogcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datablogcs&#34;&gt;❡&lt;/a&gt; Data\Blog.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼555–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;datapostcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datapostcs&#34;&gt;❡&lt;/a&gt; Data\Post.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼556–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllershomecontrollercs-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllershomecontrollercs-5&#34;&gt;❡&lt;/a&gt; Controllers\HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼557–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;dbcontext几种创建方式总共三种还有之前那一种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dbcontext几种创建方式总共三种还有之前那一种方式&#34;&gt;❡&lt;/a&gt; DbContext 几种创建方式（总共三种，还有之前那一种方式）&lt;/h5&gt;
&lt;h6 id=&#34;第一种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一种方式&#34;&gt;❡&lt;/a&gt; 第一种方式&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼558–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;第二种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二种方式&#34;&gt;❡&lt;/a&gt; 第二种方式&lt;/h6&gt;
&lt;h6 id=&#34;homecontrollercs-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#homecontrollercs-3&#34;&gt;❡&lt;/a&gt; HomeController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼559–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;blogcontextcs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#blogcontextcs-2&#34;&gt;❡&lt;/a&gt; BlogContext.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼560–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;dbcontext-工厂&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dbcontext-工厂&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;DbContext&lt;/strong&gt; &lt;strong&gt;工厂&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;programcs-28&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-28&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼561–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;viewsfactorycontextindexcshtml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#viewsfactorycontextindexcshtml&#34;&gt;❡&lt;/a&gt; Views\FactoryContext\Index.cshtml&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼562–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllersfactorycontextcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllersfactorycontextcontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\FactoryContextController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼563–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;一个项目中操作多种数据库有点问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一个项目中操作多种数据库有点问题&#34;&gt;❡&lt;/a&gt; 一个项目中操作多种数据库 (有点问题)&lt;/h5&gt;
&lt;h6 id=&#34;安装包-10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装包-10&#34;&gt;❡&lt;/a&gt; 安装包&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼564–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-29&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-29&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼565–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;mysqlblogcontextcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysqlblogcontextcs&#34;&gt;❡&lt;/a&gt; MySqlBlogContext.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼566–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;dataauthorcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dataauthorcs&#34;&gt;❡&lt;/a&gt; Data\Author.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼567–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;dbcontext连接池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dbcontext连接池&#34;&gt;❡&lt;/a&gt; DbContext 连接池&lt;/h5&gt;
&lt;h6 id=&#34;programcs-30&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-30&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼568–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;controllerscontextpoolcontrollercs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#controllerscontextpoolcontrollercs&#34;&gt;❡&lt;/a&gt; Controllers\ContextPoolController.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼569–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi更新表名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi更新表名&#34;&gt;❡&lt;/a&gt; FluentApi 更新表名&lt;/h4&gt;
&lt;h5 id=&#34;datapostcs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datapostcs-2&#34;&gt;❡&lt;/a&gt; Data\Post.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼570–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;datablogcs-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#datablogcs-2&#34;&gt;❡&lt;/a&gt; Data\Blog.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼571–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;mysqlcontextcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysqlcontextcs&#34;&gt;❡&lt;/a&gt; MySqlContext.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼572–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼573–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;sqlcontextcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlcontextcs&#34;&gt;❡&lt;/a&gt; SqlContext.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼574–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi更新schema&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi更新schema&#34;&gt;❡&lt;/a&gt; FluentApi 更新 Schema&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼575–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi表注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi表注释&#34;&gt;❡&lt;/a&gt; FluentApi 表注释&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼576–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi排除表迁移&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi排除表迁移&#34;&gt;❡&lt;/a&gt; FluentApi 排除表迁移&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼577–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi属性配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi属性配置&#34;&gt;❡&lt;/a&gt; FluentApi 属性配置&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼578–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi分组配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi分组配置&#34;&gt;❡&lt;/a&gt; FluentApi 分组配置&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼579–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;entityconfigblogentityconfigcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#entityconfigblogentityconfigcs&#34;&gt;❡&lt;/a&gt; EntityConfig\BlogEntityConfig.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼580–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi主键设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi主键设置&#34;&gt;❡&lt;/a&gt; FluentApi 主键设置&lt;/h4&gt;
&lt;h5 id=&#34;entityconfigauthorentityconfigcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#entityconfigauthorentityconfigcs&#34;&gt;❡&lt;/a&gt; EntityConfig\AuthorEntityConfig.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼581–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi默认值操作值自动更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi默认值操作值自动更新&#34;&gt;❡&lt;/a&gt; FluentApi 默认值操作 / 值自动更新&lt;/h4&gt;
&lt;h5 id=&#34;entityconfigtagentityconfigcs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#entityconfigtagentityconfigcs&#34;&gt;❡&lt;/a&gt; EntityConfig\TagEntityConfig.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼582–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;fluentapi值自动更新&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fluentapi值自动更新&#34;&gt;❡&lt;/a&gt; FluentApi 值自动更新&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼583–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;保存数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#保存数据&#34;&gt;❡&lt;/a&gt; 保存数据&lt;/h4&gt;
&lt;h5 id=&#34;增删改查-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增删改查-2&#34;&gt;❡&lt;/a&gt; 增删改查&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼584–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;savechanges用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#savechanges用法&#34;&gt;❡&lt;/a&gt; SaveChanges 用法&lt;/h5&gt;
&lt;p&gt;多个操作的时候可以写一个，因为是事务，但是如果其中有一个有错误，所有的都会出现回滚都不执行.&lt;/p&gt;
&lt;h5 id=&#34;保存相关数据包含其他属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#保存相关数据包含其他属性&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;保存相关数据&lt;/strong&gt;（包含其他属性）&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼585–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;并发问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发问题&#34;&gt;❡&lt;/a&gt; 并发问题&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼586–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;事务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务&#34;&gt;❡&lt;/a&gt; 事务&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼587–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;dapper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dapper&#34;&gt;❡&lt;/a&gt; Dapper&lt;/h3&gt;
&lt;h3 id=&#34;nhibernate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nhibernate&#34;&gt;❡&lt;/a&gt; NHibernate&lt;/h3&gt;
&lt;h2 id=&#34;版本控制系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本控制系统&#34;&gt;❡&lt;/a&gt; 版本控制系统&lt;/h2&gt;
&lt;h3 id=&#34;git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git&#34;&gt;❡&lt;/a&gt; Git&lt;/h3&gt;
&lt;h4 id=&#34;背景-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景-2&#34;&gt;❡&lt;/a&gt; 背景&lt;/h4&gt;
&lt;h5 id=&#34;集中式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集中式&#34;&gt;❡&lt;/a&gt; 集中式&lt;/h5&gt;
&lt;p&gt;​		SVN：集中式版本控制系统，与 Git 相比，不支持本地化开发，但故障恢复速度较快，可以像 Git&lt;/p&gt;
&lt;p&gt;一样实现版本回退。&lt;/p&gt;
&lt;p&gt;​		集中式版本控制系统，版本库是&lt;strong&gt;集中存放在中央服务器的&lt;/strong&gt;，而干活的时候，用的都是自己的电脑，&lt;/p&gt;
&lt;p&gt;所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。&lt;/p&gt;
&lt;p&gt;中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完&lt;/p&gt;
&lt;p&gt;了，再放回图书馆。&lt;/p&gt;
&lt;h5 id=&#34;分布式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式&#34;&gt;❡&lt;/a&gt; 分布式&lt;/h5&gt;
&lt;p&gt;​		Git：现在应用最为广泛的分布式版本控制系统，使用广泛，由于分布式的特点，支持本地化开发&lt;/p&gt;
&lt;p&gt;和离线工作。&lt;/p&gt;
&lt;p&gt;​		分布式版本控制系统根本没有 “中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然&lt;strong&gt;每个人电脑上都有一个完整的版本库&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作&#34;&gt;❡&lt;/a&gt; 操作&lt;/h4&gt;
&lt;h4 id=&#34;git环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git环境配置&#34;&gt;❡&lt;/a&gt; Git 环境配置&lt;/h4&gt;
&lt;h5 id=&#34;基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本操作&#34;&gt;❡&lt;/a&gt; 基本操作&lt;/h5&gt;
&lt;h5 id=&#34;常用指令配置别名可选&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用指令配置别名可选&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;常用指令配置别名（可选）&lt;/strong&gt;&lt;/h5&gt;
&lt;h5 id=&#34;获取本地仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取本地仓库&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;获取本地仓库&lt;/strong&gt;&lt;/h5&gt;
&lt;h5 id=&#34;基本操作指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本操作指令&#34;&gt;❡&lt;/a&gt; 基本操作指令&lt;/h5&gt;
&lt;h6 id=&#34;工作区working-directory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作区working-directory&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;工作区（&lt;strong&gt;&lt;strong&gt;Working Directory&lt;/strong&gt;&lt;/strong&gt;）&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;git_test 就是所谓的工作区&lt;/p&gt;
&lt;h6 id=&#34;版本库repository&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本库repository&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;版本库（&lt;strong&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/strong&gt;）&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	工作区有一个&lt;strong&gt;隐藏目录 .git&lt;/strong&gt; ，这个不算工作区，而是&lt;strong&gt; Git 的版本库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	Git 的版本库里存了很多东西，其中最重要的就是称为&lt;strong&gt; stage（或者叫 index）的暂存区&lt;/strong&gt;，还有&lt;strong&gt; Git 为我们&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动创建的第一个分支 master ，以及指向 master 的一个指针叫 HEAD&lt;/strong&gt; 。&lt;/p&gt;
&lt;h6 id=&#34;查看提交日志log&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看提交日志log&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;查看提交日志&lt;/strong&gt; **(log)**&lt;/h6&gt;
&lt;p&gt;format ，可以定制记录的显示格式&lt;/p&gt;
&lt;h6 id=&#34;版本回退版本穿梭&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本回退版本穿梭&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;版本回退&lt;/strong&gt; **/**&lt;strong&gt; 版本穿梭&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;文件回退&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼588–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;仓库版本回退&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作用：版本切换&lt;/p&gt;
&lt;p&gt;命令形式：git reset --hard commitID（版本 id）&lt;/p&gt;
&lt;p&gt;commitID 可以使用 git-log 或 git log 指令查看&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git reflog&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;添加文件至忽略列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加文件至忽略列表&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;添加文件至忽略列表&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	一般我们总会&lt;strong&gt;有些文件无需纳入 Git 的管理&lt;/strong&gt;，也不希望它们总出现在未跟踪文件列表。 通常都是些自动&lt;/p&gt;
&lt;p&gt;生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以&lt;strong&gt;在工作目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中创建一个名为 .gitignore 的文件（文件名称固定）&lt;/strong&gt;，列出要忽略的文件模式。下面是一个示例（.net&lt;/p&gt;
&lt;p&gt;常用的）：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;.Net&lt;/strong&gt; &lt;strong&gt;忽略文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼589–&amp;gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Java&lt;/strong&gt; &lt;strong&gt;忽略文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼590–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;练习基础操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#练习基础操作&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;练习&lt;/strong&gt; **😗*&lt;strong&gt; 基础操作&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼591–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分支&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;分支&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼592–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;解决冲突难点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决冲突难点&#34;&gt;❡&lt;/a&gt; 解决冲突（难点）&lt;/h6&gt;
&lt;h6 id=&#34;合并提交&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#合并提交&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;合并提交&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	在实际开发中，可能一个功能有会 N 次提交记录，甚至有时候给每次提交取名称都变成一件脑壳疼的问&lt;/p&gt;
&lt;p&gt;题，并且这种 “重复性” 的提交如果大家都推送至远端仓库，会导致远端仓库的提交记录密密麻麻，不易&lt;/p&gt;
&lt;p&gt;梳理。其实我们&lt;strong&gt;可以把这些 “重复性” 的提交合并为一次提交记录再推送至远端仓库&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;** 语法：****git rebase -i HEAD~**&lt;strong&gt; 最近几次提交次数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼593–&amp;gt;&lt;/p&gt;
&lt;p&gt;里面的提示有：&lt;/p&gt;
&lt;p&gt;pick：保留该 commit（缩写:p）&lt;/p&gt;
&lt;p&gt;reword：保留该 commit，但我需要修改该 commit 的注释（缩写:r）&lt;/p&gt;
&lt;p&gt;edit：保留该 commit, 但我要停下来修改该提交 (不仅仅修改注释)（缩写:e）&lt;/p&gt;
&lt;p&gt;squash：将该 commit 和前一个 commit 合并（缩写:s）&lt;/p&gt;
&lt;p&gt;fixup：将该 commit 和前一个 commit 合并，但我不要保留该提交的注释信息（缩写:f）&lt;/p&gt;
&lt;p&gt;exec：执行 shell 命令（缩写:x）&lt;/p&gt;
&lt;p&gt;drop：我要丢弃该 commit（缩写:d）&lt;/p&gt;
&lt;h6 id=&#34;冲突解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#冲突解决&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;冲突解决&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;在 git rebase 过程中，可能会存在冲突，此时就需要解决冲突。&lt;/p&gt;
&lt;p&gt;错误提示信息： git rebase -i resumeerror: could not apply … 。&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼594–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;开发中分支使用原则与流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发中分支使用原则与流程&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;开发中分支使用原则与流程&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离&lt;/p&gt;
&lt;p&gt;开来进行重大的 Bug 修改、开发新的功能，以免影响开发主线。&lt;/p&gt;
&lt;p&gt;在开发中，一般有如下分支使用原则与流程：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt; &lt;strong&gt;（生产） 分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;develop&lt;/strong&gt;**（开发）分支 **&lt;/p&gt;
&lt;p&gt;​	是从 master 创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线&lt;/p&gt;
&lt;p&gt;要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到 master 分支，准备上线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;feature/xxxx&lt;/strong&gt; &lt;strong&gt;分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	从 develop 创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后&lt;/p&gt;
&lt;p&gt;合并到 develop 分支。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hotfix/xxxx&lt;/strong&gt; 分支&lt;/p&gt;
&lt;p&gt;​	从 master 派生的分支，一般作为线上 bug 修复使用，修复完成后需要合并到 master、test、&lt;/p&gt;
&lt;p&gt;develop 分支。&lt;/p&gt;
&lt;p&gt;还有一些其他分支，在此不再详述，例如 test 分支（用于代码测试）、pre 分支（预上线分支）等等。&lt;/p&gt;
&lt;h6 id=&#34;练习分支操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#练习分支操作&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;练习&lt;/strong&gt; **😗*&lt;strong&gt; 分支操作&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;git init 后需要提交一次后才能创建分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼595–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;git远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git远程仓库&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;Git**** 远程仓库&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;如何搭建git远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何搭建git远程仓库&#34;&gt;❡&lt;/a&gt; 如何搭建 git 远程仓库&lt;/h5&gt;
&lt;p&gt;​	比较常用的有 GitHub、码云、GitLab 等。&lt;/p&gt;
&lt;p&gt;​	gitHub（ 地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tLw==&#34;&gt;https://github.com/&lt;/span&gt; ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作&lt;/p&gt;
&lt;p&gt;为唯一的版本库格式进行托管，故名 gitHub&lt;/p&gt;
&lt;p&gt;​	码云（地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20v&#34;&gt;https://gitee.com/&lt;/span&gt; ）是国内的一个代码托管平台，由于服务器在国内，所以相比于&lt;/p&gt;
&lt;p&gt;GitHub，码云速度会更快&lt;/p&gt;
&lt;p&gt;​	GitLab （地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLw==&#34;&gt;https://about.gitlab.com/&lt;/span&gt; ）是一个用于仓库管理系统的开源项目，使用 Git 作 为代码&lt;/p&gt;
&lt;p&gt;管理工具，并在此基础上搭建起来的 web 服务，一般用于在企业、学校等内部网络搭建 git 私服。&lt;/p&gt;
&lt;h5 id=&#34;配置ssh公钥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置ssh公钥&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;配置&lt;strong&gt;&lt;strong&gt; SSH&lt;/strong&gt;&lt;/strong&gt; 公钥&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;作用：用于验证操作者的身份信息（相当于用户登录）。&lt;/p&gt;
&lt;h5 id=&#34;操作远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作远程仓库&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;操作远程仓库&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;推送到远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#推送到远程仓库&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;推送到远程仓库&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;命令：git push [-f] [–set-upstream] [远端名称 [本地分支名][: 远端分支名] ]&lt;/p&gt;
&lt;p&gt;如果远程分支名和本地分支名称相同，则可以只写本地分支&lt;/p&gt;
&lt;p&gt;git push origin master&lt;/p&gt;
&lt;p&gt;n -f 表示强制覆盖&lt;/p&gt;
&lt;p&gt;n --set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;git push --set-upstream origin master:dev&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：在 ****push&lt;/strong&gt; &lt;strong&gt;之前 一定要先&lt;strong&gt;&lt;strong&gt; pull (&lt;strong&gt;&lt;strong&gt;拉取&lt;/strong&gt;&lt;/strong&gt;),&lt;strong&gt;&lt;strong&gt; 获取最新代码之后，解决冲突后（如果有冲突的话），才能&lt;/strong&gt;&lt;/strong&gt; push&lt;/strong&gt;&lt;/strong&gt; 成功！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果当前分支已经和远端分支关联，则可以省略分支名和远端名。&lt;/p&gt;
&lt;p&gt;git push 将 master 分支推送到已关联的远端分支。&lt;/p&gt;
&lt;h6 id=&#34;本地分支与远程分支的关联关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地分支与远程分支的关联关系&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;本地分支与远程分支的关联关系&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;查看关联关系我们可以使用 &lt;strong&gt;git branch -vv&lt;/strong&gt; 命令&lt;/p&gt;
&lt;h6 id=&#34;从远程仓库克隆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从远程仓库克隆&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;从远程仓库克隆&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	如果已经有一个远端仓库，我们可以直接 clone 到本地。&lt;/p&gt;
&lt;p&gt;​	命令: &lt;strong&gt;git clone &amp;lt;仓库路径&amp;gt; [本地目录]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	本地目录可以省略，&lt;strong&gt;会自动生成一个目录&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;从远程仓库中抓取和拉取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从远程仓库中抓取和拉取&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;从远程仓库中抓取和拉取&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	远程分支和本地的分支一样，我们可以进行 merge 操作，只是需要先把远端仓库里的更新都下载到本&lt;/p&gt;
&lt;p&gt;地，再进行操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抓取 命令：git fetch [remote name] [branch name]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ø&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;抓取指令就是将仓库里的更新都抓取到本地，不会进行合并&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ø 如果不指定远端名称和分支名，则抓取所有分支。&lt;/p&gt;
&lt;p&gt;Ø 拉取 命令：git pull [remote name] [branch name]&lt;/p&gt;
&lt;p&gt;Ø &lt;strong&gt;git pull --rebase origin master（用在合并代码的时候其作用就是在一个随机创建的分支上处理冲&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;突，避免了直接污染原来的分区&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;例如：git pull origin dev&lt;/p&gt;
&lt;p&gt;Ø &lt;strong&gt;拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于 fetch+merge&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ø 如果不指定远端名称和分支名，则抓取所有并更新当前分支。&lt;/p&gt;
&lt;h6 id=&#34;练习远程仓库操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#练习远程仓库操作&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;练习&lt;/strong&gt; **😗*&lt;strong&gt; 远程仓库操作&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼596–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;开发工具结合git还有点操作问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开发工具结合git还有点操作问题&#34;&gt;❡&lt;/a&gt; 开发工具结合 git (还有点操作问题)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; &lt;strong&gt;提交常见问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;husky &amp;gt; commit-msg (node v14.16.0)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;⧗ input: 你的消息 xxxx…&lt;/p&gt;
&lt;p&gt;✖ subject may not be empty [subject-empty]&lt;/p&gt;
&lt;p&gt;✖ type may not be empty [type-empty]&lt;/p&gt;
&lt;p&gt;✖ found 2 problems, 0 warnings&lt;/p&gt;
&lt;p&gt;ⓘ Get help: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvY29tbWl0bGludC8jd2hhdC1pcy1jb21taXRsaW50&#34;&gt;https://github.com/conventional-changelog/commitlint/#what-is-commitlint&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;原因：你提交的消息不符合规范&lt;/p&gt;
&lt;p&gt;解决办法：，需要在前面加 feat: 。如果是 bug, 则前面加 bug: 。注意，冒号（英文）后面有空格&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;hint: Updates were rejected because the tip of your current branch is behind&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;hint: its remote counterpart. Integrate the remote changes (e.g.&lt;/p&gt;
&lt;p&gt;hint: 『git pull …』) before pushing again.&lt;/p&gt;
&lt;p&gt;原因分析：&lt;/p&gt;
&lt;p&gt;​	是由于本地和远程仓库两者代码文件不同步，因此需要先 pull，进行合并然后再进行 push&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;​	1、先使用 pull 命令：&lt;/p&gt;
&lt;p&gt;​			git pull --rebase origin master&lt;/p&gt;
&lt;p&gt;​	2、再使用 push 命令：&lt;/p&gt;
&lt;p&gt;​			git push -u origin master&lt;/p&gt;
&lt;h3 id=&#34;svn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#svn&#34;&gt;❡&lt;/a&gt; Svn&lt;/h3&gt;
&lt;h3 id=&#34;maven&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven&#34;&gt;❡&lt;/a&gt; maven&lt;/h3&gt;
&lt;h2 id=&#34;云与容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云与容器&#34;&gt;❡&lt;/a&gt; 云与容器&lt;/h2&gt;
&lt;h3 id=&#34;azure-或其他云服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#azure-或其他云服务&#34;&gt;❡&lt;/a&gt; Azure 或其他云服务&lt;/h3&gt;
&lt;h3 id=&#34;docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker&#34;&gt;❡&lt;/a&gt; Docker&lt;/h3&gt;
&lt;h2 id=&#34;设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计模式&#34;&gt;❡&lt;/a&gt; 设计模式&lt;/h2&gt;
&lt;h2 id=&#34;微服务架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微服务架构&#34;&gt;❡&lt;/a&gt; 微服务架构&lt;/h2&gt;
&lt;h1 id=&#34;项目篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目篇&#34;&gt;❡&lt;/a&gt; 项目篇&lt;/h1&gt;
&lt;h2 id=&#34;幸福旅游网&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#幸福旅游网&#34;&gt;❡&lt;/a&gt; 幸福旅游网&lt;/h2&gt;
&lt;h3 id=&#34;导入数据库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导入数据库&#34;&gt;❡&lt;/a&gt; 导入数据库&lt;/h3&gt;
&lt;p&gt;第一种打开并复制 (小数据可以，大数据的话就得使用命令行的方式)，第二种使用环境变量设置并通过命令的方式进行导入&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼597–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;数据库设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库设计&#34;&gt;❡&lt;/a&gt; 数据库设计&lt;/h3&gt;
&lt;h4 id=&#34;为什么需要大图和小图的地址&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要大图和小图的地址&#34;&gt;❡&lt;/a&gt; 为什么需要大图和小图的地址？&lt;/h4&gt;
&lt;p&gt;因为如果使用了 css 缩放技术，还是原来的大小 2M，大图加小图一块是 4M. 如果采取两个字段分别存储大图和小图的地址则是 2M+20k 的大小，大大提升了速度。&lt;/p&gt;
&lt;h4 id=&#34;为什么需要version&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么需要version&#34;&gt;❡&lt;/a&gt; 为什么需要 Version?&lt;/h4&gt;
&lt;p&gt;是通过乐观锁来控制并发人数的，会限制人数&lt;/p&gt;
&lt;h3 id=&#34;索引设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引设计&#34;&gt;❡&lt;/a&gt; 索引设计&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼598–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;依赖组件安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#依赖组件安装&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;依赖组件安装&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;安装docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装docker&#34;&gt;❡&lt;/a&gt; 安装 docker&lt;/h4&gt;
&lt;p&gt;通过 CentOS7 安装 docker&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼599–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;安装redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装redis&#34;&gt;❡&lt;/a&gt; 安装 redis&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼600–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;安装rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装rabbitmq&#34;&gt;❡&lt;/a&gt; 安装 rabbitmq&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼601–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;项目搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目搭建&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;项目搭建&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1hc3AtdGgyZWwyMGQubmV0&#34;&gt;创建 asp.net&lt;/span&gt; core 空的项目，并且创建三个类库 travel.data、travel.service、travel.CommonUtil，并且添加对应的引用包&lt;/p&gt;
&lt;h4 id=&#34;travelcommonutil&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#travelcommonutil&#34;&gt;❡&lt;/a&gt; travel.CommonUtil&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼602–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;traveldata&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#traveldata&#34;&gt;❡&lt;/a&gt; travel.data&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼603–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;反向工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向工程&#34;&gt;❡&lt;/a&gt; 反向工程&lt;/h4&gt;
&lt;p&gt;删除无参构造函数以及一些暂时用不上的&lt;/p&gt;
&lt;h4 id=&#34;ddd-项目结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ddd-项目结构&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;DDD&lt;/strong&gt; &lt;strong&gt;项目结构&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;是四层结构&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表示层&lt;/strong&gt;：为用户提供接口。使用&lt;em&gt;应用层&lt;/em&gt;实现与用户交互.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用层&lt;/strong&gt;：表示层与领域层的中介，编排业务对象执行特定的应用程序任务。使用应用程序逻辑实现用例.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;领域层&lt;/strong&gt;：包含业务对象以及业务规则。是应用程序的核心.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础设施层&lt;/strong&gt;：提供通用的技术功能，支持更高的层，主要使用第三方类库&lt;/p&gt;
&lt;h4 id=&#34;配置连接池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置连接池&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;配置连接池&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼604–&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;组件配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件配置&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;组件配置&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;serilog-日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#serilog-日志&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;SeriLog&lt;/strong&gt; &lt;strong&gt;日志&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;travelapi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#travelapi&#34;&gt;❡&lt;/a&gt; travel.api&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼605–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼606–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;配置autofac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置autofac&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;配置&lt;/strong&gt; Autofac&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼607–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;新建一个autofacmoduleregister名称随意继承autofacmodule-重写load方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新建一个autofacmoduleregister名称随意继承autofacmodule-重写load方法&#34;&gt;❡&lt;/a&gt; 新建一个 AutofacModuleRegister（名称随意）继承 Autofac.Module 重写 Load 方法&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼608–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;programcs-类中将di替换为autofac&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-类中将di替换为autofac&#34;&gt;❡&lt;/a&gt; Program.cs 类中将 DI 替换为 Autofac&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼609–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;配置automap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置automap&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;配置&lt;/strong&gt; AutoMap&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼610–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼611–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;配置swagger&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置swagger&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;配置&lt;/strong&gt; Swagger&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼612–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;travelapi和traveldata&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#travelapi和traveldata&#34;&gt;❡&lt;/a&gt; travel.api 和 travel.data&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;启用&lt;/strong&gt; &lt;strong&gt;XML&lt;/strong&gt; &lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;注册swagger服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册swagger服务&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;注册&lt;/strong&gt; Swagger 服务&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼613–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼614–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;隐藏某些接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏某些接口&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;隐藏某些接口&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼615–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;配置jwt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置jwt&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;配置&lt;/strong&gt; JWT&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼616–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼617–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼618–&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼619–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;生成token&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成token&#34;&gt;❡&lt;/a&gt; 生成 Token&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼620–&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Token&lt;/strong&gt; &lt;strong&gt;自动刷新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!–code￼621–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;配置redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置redis&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;配置&lt;/strong&gt; Redis&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼622–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;即时通讯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#即时通讯&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;即时通讯&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;travelapihubs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#travelapihubs&#34;&gt;❡&lt;/a&gt; travel.api/Hubs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼623–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;travelapiconsts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#travelapiconsts&#34;&gt;❡&lt;/a&gt; travel.api/Consts&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼624–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;programcs-31&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-31&#34;&gt;❡&lt;/a&gt; Program.cs&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼625–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;事件总线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件总线&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;事件总线&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&amp;lt;!–code￼626–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;注册服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注册服务&#34;&gt;❡&lt;/a&gt; 注册服务&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼627–&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;webapi-设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webapi-设置&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;WebAPI&lt;/strong&gt; &lt;strong&gt;设置&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;统一返回格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统一返回格式&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;统一返回格式&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼628–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;json序列化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#json序列化-2&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;JSON&lt;/strong&gt; 序列化&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼629–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-32&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-32&#34;&gt;❡&lt;/a&gt; program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼630–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;异常处理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常处理器&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;异常处理器&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼631–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;授权过滤器-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#授权过滤器-2&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;授权过滤器&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼632–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;travelapicontrollers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#travelapicontrollers&#34;&gt;❡&lt;/a&gt; travel.api/controllers&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼633–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-33&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-33&#34;&gt;❡&lt;/a&gt; program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼634–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;设置授权策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置授权策略&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;设置授权策略&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼635–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;programcs-34&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#programcs-34&#34;&gt;❡&lt;/a&gt; program.cs&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼636–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;设置基类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置基类&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;设置基类&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼637–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;设置跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置跨域&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;设置跨域&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;&amp;lt;!–code￼638–&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;公共上传&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#公共上传&#34;&gt;❡&lt;/a&gt; &lt;strong&gt;公共上传&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;支持静态资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#支持静态资源&#34;&gt;❡&lt;/a&gt; 支持静态资源&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼639–&amp;gt;&lt;/p&gt;
&lt;h6 id=&#34;在根目录新建固定文件夹-wwwroot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在根目录新建固定文件夹-wwwroot&#34;&gt;❡&lt;/a&gt; 在根目录新建固定文件夹： wwwroot&lt;/h6&gt;
&lt;h6 id=&#34;travelapicontrollers-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#travelapicontrollers-2&#34;&gt;❡&lt;/a&gt; travel.api/controllers&lt;/h6&gt;
&lt;p&gt;&amp;lt;!–code￼640–&amp;gt;&lt;/p&gt;
</content>
        <category term="后端" scheme="http://whw-colab.github.io/categories/%E5%90%8E%E7%AB%AF/" />
        <category term="C#学习" scheme="http://whw-colab.github.io/categories/%E5%90%8E%E7%AB%AF/C-%E5%AD%A6%E4%B9%A0/" />
        <updated>2025-04-17T04:12:57.000Z</updated>
    </entry>
    <entry>
        <id>http://whw-colab.github.io/2025/04/15/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="http://whw-colab.github.io/2025/04/15/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;❡&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;❡&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼0–&amp;gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;❡&lt;/a&gt; Run server&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼1–&amp;gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;❡&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼2–&amp;gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;❡&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;p&gt;&amp;lt;!–code￼3–&amp;gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2025-04-15T07:04:41.338Z</updated>
    </entry>
</feed>
